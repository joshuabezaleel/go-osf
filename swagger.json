{
  "swagger": "2.0",
  "info": {
    "title": "OSF APIv2 Documentation",
    "version": "2.0",
    "contact": {
      "name": "OSF",
      "email": "support@osf.io",
      "url": "https://osf.io/support"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://cdn.cos.io/media/images/cos_center_logo_small.original.png",
      "backgroundColor": "transparent"
    }
  },
  "host": "api.test.osf.io",
  "schemes": [
    "https"
  ],
  "basePath": "/v2",
  "x-tagGroups": [
    {
      "name": "Welcome",
      "tags": [
        "Introduction",
        "General Usage",
        "Authentication",
        "Pagination",
        "Versioning",
        "Filtering",
        "Sparse Fieldsets",
        "Embedding",
        "Request Formatting",
        "Errors & Error Codes",
        "Entities & Entity Collections"
      ]
    },
    {
      "name": "API Reference",
      "tags": [
        "Addons",
        "Base",
        "Citations",
        "Comments",
        "Collections",
        "Files",
        "Licenses",
        "Logs",
        "Institutions",
        "Registration Schemas",
        "Registration Schema Blocks",
        "Schema Responses",
        "Schema Response Actions",
        "Nodes",
        "Preprints",
        "Preprint Providers",
        "Registrations",
        "Taxonomies",
        "Users",
        "View Only Links"
      ]
    }
  ],
  "tags": [
    {
      "name": "Introduction",
      "x-traitTag": true,
      "description": "Welcome to the Open Science Framework API. With this API you can access users, projects, components, logs, and files from the [Open Science Framework](https://osf.io/). The Open Science Framework (OSF) is a free, open-source service maintained by the [Center for Open Science](http://cos.io/).\n\nThe OSF serves as a repository and archive for study designs, materials, data, manuscripts, or anything else associated with your research during the research process. Every project and file on the OSF has a permanent unique identifier, and every registration (a permanent, time-stamped version of your projects and files) can be assigned a DOI. You can use the OSF to measure your impact by monitoring the traffic to projects and files you make public. With the OSF you have full control of what parts of your research are public and what remains private."
    },
    {
      "name": "General Usage",
      "x-traitTag": true,
      "description": "The OSF API generally conforms to the [JSON-API v1.0 spec](http://jsonapi.org/format/1.0/). Where exceptions exist, they will be noted. Each endpoint will have its own documentation, but there are some general principles.\nNote: Assume undocumented routes/features/fields are unstable.\n#### Canonical URLs\nAll canonical URLs have trailing slashes.  A request to an endpoint without a trailing slash will result in a **301 Redirect** to the canonical URL.  There are some exceptions when working with the Files API, so if a URL in a response does not have a slash, do not append one.\n#### Plurals\nEndpoints are always pluralized.  `/users/`, not `/user/`, `/nodes/`, not `/node/`.\nThe only exception are the node and preprint citation endpoints, which are `/citation/`, not `/citations/`.\n#### Common Actions\nEvery endpoint in the OSF API responds to `GET`, `HEAD`, and `OPTION` requests.\nYou must have adequate permissions to interact with any endpoint. Unauthorized use will result in **401 Unauthorized** or **403 Forbidden** responses.\nUse `HEAD` to probe an endpoint and make sure your headers are well-formed. A `GET` request will return a representation of the entity or entity collection referenced by the endpoint.\nAn `OPTIONS` request will return a JSON object that describes the endpoint, including the name, a description, the acceptable request formats, the allowed response formats, and any actions available via the endpoint.\n### Testing\nThe OSF provides public testing servers to be used to test integrations againest.\n#### Testing Server\nThe test-* subdomains of the osf are intended to match, at any given time, the current production environment of the Open Science Framework.\nWe have staging servers that will have newer features, including newer API features, that aren't ready for production. However, because those servers are subject to the whims of QA and whichever group needs to do specific testing, they aren't particular stable for API developers. #### Testing Server\nThe `test` subdomains of the osf are intended to match, at any given time, the current production environment of the OSF. The test servers linked below are primarily for developing your API application on a stable system.\n- Test web server: https://test.osf.io/\n- Test API server: https://api.test.osf.io/v2/\n- Test Files server (known as Waterbutler): https://files.us.test.osf.io/\n#### Ephemerality Notice\nExpect the server to be down from time to time while we update software, and don't expect data to persist indefinitely. We periodically run data migrations on the test servers without notice."
    },
    {
      "name": "Authentication",
      "x-traitTag": true,
      "description": "#### Token Auth\nTo use a Personal Access Token, make an `Authorization` header with the contents `Bearer <token>` as shown in the example below, replacing `<token>` with your token.\n\n    curl -X \"GET\" \"https://api.osf.io/v2/users/me/\" \\\n    -H \"Authorization: Bearer <token>\"\n\nTo make a Personal Access Token, visit your OSF settings page (either on the [OSF](https://osf.io/settings/tokens/) or our [testing server](https://test.osf.io/settings/tokens/)) to create one. You can limit the scope of the token, but remember that it has access to all of the information that you do within the limits of the scope, so be careful with your tokens.\n#### OAuth\nThe OSF allows third-party web applications to connect to the OSF on behalf of other users via the OAuth 2.0 web application flow.\nYou can add a developer application from the OSF settings page (either on the [OSF](https://osf.io/settings/tokens/) or our [testing server](https://test.osf.io/settings/tokens/)).\n\nWe will be adding narrative documentation for handling OAuth flows, but for now, if you're familiar with OAuth, you can check out the [CAS overlay documentation](https://github.com/CenterForOpenScience/cas-overlay#web-server-authorization) for options.\nWe've also created a [test application](https://github.com/abought/osf_oauth2_demo) for verifying that our OAuth workflow works correctly. If you set up an OAuth application on https://test.osf.io/, you should be able to add the client secret and client id to the settings file and it should work properly. If it does not, please let us know."
    },
    {
      "name": "Pagination",
      "x-traitTag": true,
      "description": "All entity collection endpoints respond to the `page` query parameter as described in the [JSON-API spec](http://jsonapi.org/format/#fetching-pagination).\n\nHowever, links to the first, last, previous, and next pages of results are provided in the `links` key of the response, and you are encouraged to use those rather than adding query parameters by hand.\n\nIf there are only enough results to fill one page, the `first`, `last`, `prev`, and `next` links will be null.\n#### Versioning\nAs of version `2.3`, pagination links conform to the JSON API specification. Meta information was pulled out of the `links` object and placed in a top-level `meta` object.\n\nThe `meta` key contains the total number of entities available, as well as the current number of results displayed per page."
    },
    {
      "name": "Versioning",
      "x-traitTag": true,
      "description": "Versioning can be specified in three different ways:\n\n#### URL Path Versioning\n+ `/v2/` is the only documented path, but only refers to the major version\n+ A version specified via the URL path is a **required** part of the URL.\n+ Only a major version can be specified via the URL path, i.e. `/v2.0.6/` is invalid, additionally, paths such as `/v2.0/` are invalid.\n+ If the default version of the API is within the major version specified in the URL path, the default version will be applied (i.e. if the default version is `2.3` and the URL path is `/v2/`, then version returned will be `2.3`).\n+ If the default version of the API is not within the major version specified in the URL path, the URL path version will be applied (i.e. if the default version is `3.0` and the URL path is `/v2/`, then the version returned will be `2.0`)\n\n#### Query Parameter Versioning\n+ `/v2/nodes/?version=2.1.6`\n+ Pinning to a specific version via a query parameter is **optional**.\n+ A specific version (major, minor, or patch) for a single request can be specified via the `version` query parameter, as long as it is an allowed version.\n+ If the version specified in the query parameter does not fall within the same major version specified in the URL path, i.e `/v2/nodes/?version=3.1.4` a 409 Conflict response will be returned.\n\n#### Header Versioning\n+ `Accept-Header=application/vnd.api+json;version=3.0.1`\n+ Pinning to a specific version via request header is **optional**.\n+ A specific version (major, minor, or patch) for a single request can be specified via the `Accept Header` of the request, as long as it is an allowed version.\n+ If the version specified in the header does not fall within the same major version specified in the URL path a 409 Conflict response will be returned.\n+ If both a header version and query parameter version are specified, the versions must match exactly or a 409 Conflict response will be returned (i.e. one does not take precedence over the other).\n\n#### CHANGELOG\n`v2.1`\n+ Pagination links conform to JSON API specification, i.e. `meta` information was pulled out of the `links` object and placed in a top-level `meta` object.\n+ Deprecate the `node_links` field in the **Node** and **Registration** serializers in favor of `linked_nodes` and `linked_registrations`.\n\n`v2.2`\n+ Modify institution nodes list so that affiliated components are also returned from `/v2/institutions/<id>/nodes/`.\n+ Ensure all existing date fields are standardized on UTC.\n\n`v2.3`\n+ Handle merged users more correctly on `/v2/users/`.\n\n`v2.4`\n+ Deprecate the `parents` field in the **Taxonomies** serializer.\n+ Deprecate the following fields in the **Preprint Provider** serializer:\n    + `social_facebook`, `social_instagram`, and `social_twitter`\n    + `banner_path`, `logo_path`, and `header_text`\n    + `email_contact`"
    },
    {
      "name": "Filtering",
      "x-traitTag": true,
      "description": "Entity collections can be filtered by adding a query parameter in the form:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`filter[<fieldname>]=<matching information>`\n\nString queries are filtered using substring matching. For example, if you were trying to find [Lise Meitner](http://en.wikipedia.org/wiki/Lise_Meitner):\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/users/?filter[full_name]=meitn`\n\nYou can filter on multiple fields, or the same field in different ways, by &-ing the query parameters together.\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/users/?filter[full_name]=lise&filter[family_name]=mei`\n\nBoolean fields should be queried with `true` or `false`.\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?filter[registered]=true`\n\nYou can request multiple resources by filtering on id and placing comma-separated values in your query parameter.\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?filter[id]=aegu6,me23a`\n\nYou can filter with case-sensitivity or case-insensitivity by using `contains` and `icontains`, respectively.\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?filter[tags][icontains]=help`"
    },
    {
      "name": "Sparse Fieldsets",
      "x-traitTag": true,
      "description": "All endpoints respond to the `fields` query parameter as described in the [JSON-API spec](http://jsonapi.org/format/#fetching-sparse-fieldsets).\n\n\nFrom the specification:\n\n<blockquote>\n  <p>A client MAY request that an endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] parameter.</p>\n  <p>The value of the fields parameter MUST be a comma-separated (U+002C COMMA, “,”) list that refers to the name(s) of the fields to be returned.</p>\n  <p>If a client requests a restricted set of fields for a given resource type, an endpoint MUST NOT include additional fields in resource objects of that type in its response.</p>\n</blockquote>\n\n#### Basic Usage\n\nWhen making a request to an endpoint that returns a serialized object of some `type`, you can specify `fields[<type>]=<comma,separated,list,of,fields>` to receive a subset of the object's fields in the response.\n\n\nFor example, the request below will serialize only the `title` attribute and `children` relationship for each node in the response.\n\n\nhttps://api.osf.io/v2/nodes/?fields[nodes]=title,children\n\n\nSparse fieldsets can be used to restrict both attribute and relationship fields.\nNote that top-level objects (such as `type`, `id`, `attributes`, `relationships`, and `links`) will always be serialized and cannot be excluded.\n\n#### Advanced Usage\n\nSparse fieldsets can be used to restrict any entity returned in the response.\n\n\nFor example, the request below will serialize only the `full_name` attribute for each user (auto-embedded by the `embed=contributors` query parameter), and the `title` attribute for each node.\n\n\nhttps://api.osf.io/v2/nodes/?fields[nodes]=title,contributors&embed=contributors&fields[users]=full_name\n\n\nAny field specified in another query parameters used by the serializer (e.g. `embed`) must also be included in the sparse fieldset.\nFor example, fields that are being embedded on the sparse type (e.g. `nodes`) must also be included in `fields[<type>]` when using embeds, or the embed will be invalid.\n\n\nA request to embed contributors and restrict nodes to only return the `title` attribute should have the form:\n\n\nhttps://api.osf.io/v2/nodes/?embed=contributors&fields[nodes]=title,contributors\n\n\n**NOT**\n\n\nhttps://api.osf.io/v2/nodes/?embed=contributors&fields[nodes]=title\n"
    },
    {
      "name": "Embedding",
      "x-traitTag": true,
      "description": "All related resources that appear in the `relationships` attribute are embeddable, meaning it is possible to fetch a node and its contributors in a single request by adding a query parameter like:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?embed=contributors`\n\nThe embedded results will have the following structure:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`{relationship_name}: {full_embedded_response}`\n\nWhere `full_embedded_response` means the full API response resulting from a **GET** request to the `href` link of the corresponding related resource.\n\nThis means if there are no errors in processing the embedded request the response will have the format:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`data: {response}`\n\nAnd if there are errors processing the embedded request the response will have the format:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`errors: {errors}`\n\nMultiple embeds can be achieved with multiple query parameters separated by \"&\".\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?embed=contributors&embed=comments`\n\nSome endpoints are automatically embedded, such as the [node contributors](#operation/nodes_contributors_list) endpoint, which automatically embeds user information."
    },
    {
      "name": "Request Formatting",
      "x-traitTag": true,
      "description": "## Attribute Validation\nEndpoints that allow creation or modification of entities generally limit updates to certain attributes of the entity.\n\nIf you attempt to set an attribute that does not permit updates (such as a `date_created` timestamp), the API will silently ignore that attribute.\n\nThis will not affect the response from the API: if the request would have succeeded without the updated attribute, it will still report as successful. Likewise, if the request would have failed without the attribute update, the API will still report a failure.\n\nTypoed or non-existent attributes will behave the same as non-updatable attributes and will be silently ignored. If a request is not working the way you expect, make sure to double check your spelling.\n## Create/Update Requests\n#### Formatting POST/PUT/PATCH Request Bodies\nThe OSF API follows the JSON-API spec for [create and update requests](http://jsonapi.org/format/1.0/#crud). This means all request bodies must be wrapped with some metadata.\n\nEach request body must be an object with a `data` key containing at least a `type` member. The value of the `type` member must agree with the `type` of the entities represented by the endpoint. If not, a **409 Conflict** will be returned.\n\nThe request should also contain an `attributes` member with an object containing the key-value pairs to be created/updated.\n\n**PUT/PATCH** requests must also have an `id` key that matches the ID part of the endpoint you are making a request to. If the `id` key does not match the ID part of the URL path, a **409 Conflict** error will be returned.\n\n#### Creating a Node via POST Example\n\n    POST /v2/nodes/\n    {\n      \"data\": {\n        \"type\": \"nodes\",\n        \"attributes\": {\n          \"title\" : \"A Phylogenetic Tree of Famous Internet Cats\",\n          \"category\" : \"project\",\n          \"description\" : \"How closely related are Grumpy Cat and C.H. Cheezburger? Is memefulness inheritable?\"\n        }\n      }\n    }\n\n\n#### Updating a User via PUT Example\n\n    PUT /v2/users/me/\n    {\n      \"data\": {\n        \"id\": \"3rqxc\",\n        \"type\": \"users\",\n        \"attributes\": {\n          \"full_name\" : \"Henrietta Swan Leavitt\",\n          \"given_name\" : \"Henrietta\",\n          \"middle_names\" : \"Swan\",\n          \"family_name\" : \"Leavitt\"\n        }\n      }\n    }\n\n**Note:** If you PUT/PATCH to the `/users/me/` endpoint, you must still provide your full user id in the `id` field of the request.  We do not support using the `me` alias in request bodies at this time.\n\n#### PUT vs. PATCH\nFor most endpoints that support updates via **PUT** requests, we also allow **PATCH** updates.\n\n**PUT** requests require all mandatory attributes to be set, even if their value is unchanged. **PATCH** requests may omit mandatory attributes, whose value will be unchanged."
    },
    {
      "name": "Errors & Error Codes",
      "x-traitTag": true,
      "description": "## Errors\nWhen a request fails for any reason, the OSF API will return an appropriate HTTP response code and include a descriptive error in the body of the response.\n\nThe response body will be a JSON object with a key, `errors`, pointing to an array of error objects.\n\nIn general, these error objects will consist of a `detail` key with a detailed error message and a `source` object that may contain a field `pointer` that is a [JSON Pointer](https://tools.ietf.org/html/rfc6901) to the error-causing attribute.\n\nThe `error` objects may include additional information in accordance with the [JSON-API error spec](http://jsonapi.org/format/1.0/#error-objects).\n\n#### Example\nAn error response from an incorrect create node request:\n\n    {\n      \"errors\": [\n        {\n          \"source\": {\n            \"pointer\": \"/data/attributes/category\"\n          },\n          \"detail\": \"This field is required.\"\n        },\n        {\n          \"source\": {\n            \"pointer\": \"/data/type\"\n          },\n          \"detail\": \"This field may not be null.\"\n        },\n        {\n          \"source\": {\n            \"pointer\": \"/data/attributes/title\"\n          },\n          \"detail\": \"This field is required.\"\n        }\n      ]\n    }\n\n## Error Codes\nThe OSF API uses conventional HTTP response codes to indicate the success or failure of an API request.\n\nIn general, codes in the `2xx` range indicate success, codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, invalid authentication credentials were provided, etc.), and codes in the `5xx` range indicate an error with our API servers (these are rare, and if they occur consistently, should be [reported](mailto:support@osf.io)).\n\n`200` **OK**\n\nThe request was successful and everything worked as expected.\n\n`201` **Created**\n\nThe request was successful and a new resource was created. The newly created resource can be referenced by the ID returned in the response.\n\n`204` **No Content**\n\nThe request was sucessful but does not need to return an entity-body.\n\n`400` **Bad Request**\n\nThe request was unacceptable, often due to a missing required parameter or malformed data.\n\n`401` **Unauthorized**\n\nThe request requires user authentication, which was not provided.\n\n`403` **Forbidden**\n\nThe request was understood but not fulfilled, most likely due to invalid permissions.\n\n`404` **Not Found**\n\nThe requested resource does not exist.\n\n`405` **Method Not Allowed**\n\nThe method specified in the request is not allowed for the resource.\n\n`409` **Conflict**\n\nThe request could not be completed due to a conflict with the current state of the resource or within the request data.\n\n`410` **Gone**\n\nThe requested resource is no longer available, most likely because it was deleted.\n\n`429` **Too Many Requests**\n\nThe user has sent too many requests in a given amount of time.\n\nWait at least the amount of time specified in the `Retry-After` header of the response before sending another request.\n\nAuthenticated requests have a rate limit of 10,000/day.\n\nUnauthenticated requests have a rate limit of 100/hour.\n\n`5xx` **Server Errors**\n\nThe API server encountered an unexpected error."
    },
    {
      "name": "Entities & Entity Collections",
      "x-traitTag": true,
      "description": "## Entities\nAn entity is a single resource that has been retrieved from the API, usually from an endpoint with the entity's ID as the final path part. A successful response from an entity request will be a JSON object with a top level `data` key pointing to a sub-object with the following members:\n#### ID\nThe identifier for the entity.  This **MUST** be included with all PUT and PATCH requests.\n#### Type\nThe type identifier of this entity.  This **MUST** be included with all create and update requests.\n#### Attributes\nThe properties of the entity.  Names, descriptions, etc.\n#### Relationships\nRelationships are URLs to other entities or entity collections that have a relationship to the entity.\n\nFor example, the node entity provides a `contributors` relationship that points to the endpoint to retrieve all contributors to that node. It is recommended to use these links rather than to filter general entity collection endpoints by IDs. They'll be faster, easier, and less error-prone.\n\nGenerally a relationship will have the following structure:\n\n\n    {relationship_name}: {\n      \"links\": {\n        \"related\": {\n          \"href\": {url_to_related_entity_or_entity_collection},\n          \"meta\": {}\n        }\n      }\n    }\n\n\nIf there are no related entities, `href` will be null.\n#### Embeds\nPlease see the [embedding](#tag/Embedding) documentation.\n#### Links\nLinks are urls to alternative representations of the entity or actions that may be performed on the entity.\n\nMost entities will provide a `self` link that is the canonical endpoint for the entity where update and delete requests should be sent. Most entities will also provide an `html` link that directs to the entity's page on the Open Science Framework.\n## Entity Collections\nEntity collection endpoints return a list of entities and an additional data structure with pagination links, such as `next`, `prev`, `first`, and `last`.\n\nThe OSF API limits all entity collection responses to a maximum of 10 entities.\n\nThe response object has two keys:\n#### Data\nThe `data` key is an array of entities that match the query.\n\nEach entity in the array is the same representation that is returned from that entity's `self` link, meaning that refetching the entity is unnecessary.\n#### Links\nThe `links` key contains pagination information, including links to the previous, next, first, and last pages of results.\n\nThe `meta` key contains the total number of entities available, as well as the current number of results displayed per page.\nIf there are only enough results to fill one page, the `first`, `last`, `prev`, and `next` values will be null."
    },
    {
      "name": "Addons",
      "description": "Addons represent a user connection to an external service, some addons allow for additional storage, some modify user authentication or add a redirect link to a project."
    },
    {
      "name": "Base",
      "description": "This is the \"home page\" of the API you can get important autentication information for the user making the request and get links to other resources."
    },
    {
      "name": "Registration Schemas",
      "description": "A Registration Schemas defines the range of valid responses to a registration. Each Registration Schema is composed of <a href=\"#tag/Registration-Schema-Blocks\">\"blocks\"</a> that define the individual questions a user responds to. Registration Schemas are created by the Center for Open Science or an affiliated institution and periodically migrated into the system. Registration Schemas are updated and deactivated using an internal versioning system."
    },
    {
      "name": "Registration Schema Blocks",
      "description": "Registration Schema Blocks are read-only entities, they represent question prompts and form inputs known as \"blocks\" that make up a Registration Schemas. Each block has a designated `block_type` that determines what type of information that Schema Block's corresponding block in the Schema Response."
    },
    {
      "name": "Schema Responses",
      "description": "Schema Responses contain user supplied responses to a Registration Schema. A Schema Response aggregates all of the the responses for a given version of a Registration's Registration Schema. Schema Responses are created when a Registration is completed. Once a Registration is completed the Schema Responses for a Registration can be revisied and updated by using it's associated action endpoints.\n\nThere are a few states for Schema Responses:\n\n  - `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you\n  must create a Schema Response Action that triggers a new submission.\n\n  - `in_progess` is the state of a Schema Response where the response is editable and still private, Schema\n  Responses are editted via a PATCH request as specified below.\n\n  - `unapproved` is the state of a Schema Response where edits have been made and \"locked-in\", now contributors\n  have the ability to reject the changes, however if they are not rejected changes are automatically approved\n  after 48 hours. If `unapproved` Schema Responses are rejected, they are returned to the `in_progress` state. If\n  `unapproved` Schema Responses are approved they either enter an `approved` state or go into a\n  `pending_moderation` to be accepted or denied by a moderator.\n\n  - `pending_moderation` is the state of a Schema Response where moderators have an opportunity to reject or\n  approve a Schema Response that has been approved by it's contributors. This state is only reachable for Schema\n  Responses that are associated with a Registration that has Registration Provider a moderated workflow.\n\n  - `approved` is the state of a Schema Response where it is public and immutable, in order to update an approved\n  Schema Response a new one must be created."
    },
    {
      "name": "Schema Response Actions",
      "description": "Schema Response Actions are objects that when created cause state transitions for Schema Responses. Users use state transitions to submit, approve, and revise new Schema Responses.\n\nSchema Response Actions have a  few different triggers to cause state transitions:\n\n  - `submit` is a trigger to transition a Schema Response from an `in_progress` state to an `unapproved` state,\n  this freezes edits for the Schema Response and allows all admin contributors to the Schema Response's\n  Registration to either approved or reject the Schema Response.\n\n  - `approve` is a trigger to transition a Schema Response from an `unapproved` state to an `approved` state, this\n  makes the Schema Response changes public completing the update of the Schema Response. On Schema Responses that\n  are associated with a Registration that has Registration Provider a moderated workflow the `approve` trigger\n  will transition the Schema Response to `pending_moderation`.\n\n  - `accept` is a trigger to transition a Schema Response from an `pending_moderation` state to an `approved`\n  state. This trigger is only valid for Schema Responses that are associated with a Registration that has\n  Registration Provider a moderated workflow and only possible for a user designated as moderator of a\n  Registration Provider.\n\n  - `admin_reject` is a trigger to transition a Schema Response from an `unapproved` state to an\n  `in_progress`  state. This trigger allows users to reject purposed changes to a Schema Response.\n\n  - `moderator_reject` is a trigger to transition a Schema Response from an `pending_moderation` state to an\n  `in_progress`  state. This trigger is only valid for Schema Responses that are associated with a Registration\n  that has Registration Provider a moderated workflow and only possible for a user designated as moderator of a\n  Registration Provider."
    }
  ],
  "paths": {
    "/addons/": {
      "get": {
        "summary": "List all addons",
        "description": "\nA paginated list of addons configurable with the OSF, for read purposes only.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 addons. Each resource in the array is a separate addon object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error.",
        "tags": [
          "Addons"
        ],
        "operationId": "addons_list",
        "x-response-schema": "Addon",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Addon",
                "properties": {
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the addon entity.",
                    "properties": {
                      "url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The URL to the third-party service provider."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name of the third-party service provider."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the service provider."
                      },
                      "categories": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "documentation",
                            "storage",
                            "bibliography",
                            "other",
                            "security",
                            "citations"
                          ]
                        },
                        "readOnly": true,
                        "description": "List of categories this addon belongs to."
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the addon entity (`addons`)."
                  },
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the addon entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.box.com",
                      "name": "Box",
                      "categories": [
                        "storage"
                      ],
                      "description": "Box is a file storage add-on. Connect your Box account to an OSF project to interact with files hosted on Box via the OSF."
                    },
                    "type": "addon",
                    "id": "box"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "https://dataverse.harvard.edu/",
                      "name": "Dataverse",
                      "categories": [
                        "storage"
                      ],
                      "description": "Dataverse is an open source software application to share, cite, and archive data. Connect your Dataverse account to share your Dataverse datasets via the OSF."
                    },
                    "type": "addon",
                    "id": "dataverse"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.dropbox.com",
                      "name": "Dropbox",
                      "categories": [
                        "storage"
                      ],
                      "description": "Dropbox is a file storage add-on. Connect your Dropbox account to an OSF project to interact with files hosted on Dropbox via the OSF."
                    },
                    "type": "addon",
                    "id": "dropbox"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.figshare.com",
                      "name": "figshare",
                      "categories": [
                        "storage"
                      ],
                      "description": "Figshare is an online digital repository. Connect your figshare account to share your figshare files along with other materials in your OSF project."
                    },
                    "type": "addon",
                    "id": "figshare"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.github.com",
                      "name": "GitHub",
                      "categories": [
                        "storage"
                      ],
                      "description": "GitHub is a web-based Git repository hosting service. Connect your GitHub repo to your OSF project to share your code alongside other materials in your OSF project."
                    },
                    "type": "addon",
                    "id": "github"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.mendeley.com",
                      "name": "Mendeley",
                      "categories": [
                        "citations"
                      ],
                      "description": "Mendeley is a reference management tool. Connecting Mendeley folders to OSF projects allows you and others to view, copy, and download citations that are relevant to your project from the Project Overview page."
                    },
                    "type": "addon",
                    "id": "mendeley"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.zotero.org",
                      "name": "Zotero",
                      "categories": [
                        "citations"
                      ],
                      "description": "Zotero is a reference management tool. Connecting Zotero folders to OSF projects allows you and others to view, copy, and download citations that are relevant to your project from the Project Overview page."
                    },
                    "type": "addon",
                    "id": "zotero"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "https://owncloud.org/",
                      "name": "ownCloud",
                      "categories": [
                        "storage"
                      ],
                      "description": "ownCloud is an open source, self-hosted file sync and share app platform. Connect your ownCloud account to an OSF project to interact with files hosted on ownCloud via the OSF."
                    },
                    "type": "addon",
                    "id": "owncloud"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "https://aws.amazon.com/s3/",
                      "name": "Amazon S3",
                      "categories": [
                        "storage"
                      ],
                      "description": "Amazon S3 is a file storage add-on. Connect your S3 account to an OSF project to interact with files hosted on S3 via the OSF."
                    },
                    "type": "addon",
                    "id": "s3"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "https://drive.google.com",
                      "name": "Google Drive",
                      "categories": [
                        "storage"
                      ],
                      "description": "Google Drive is a file storage add-on. Connect your Google Drive account to an OSF project to interact with files hosted on Google Drive via the OSF."
                    },
                    "type": "addon",
                    "id": "googledrive"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 10,
                  "per_page": 1000
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "#### Returns\nA JSON object with `meta` and `links` keys.\n\nThe `meta` key contains information such as a welcome message from the API, the specified version of the request, and the full representation of the current user, if authentication credentials were provided in the request.\n\nThe `links` key contains links to the following entity collections: [addons](#tag/Addons), [collections](), [institutions](#tag/Institutions), [licenses](#tag/Licenses), [registration schemas](#tag/Registration Schemas), [nodes](#tag/Nodes), [registrations](#tag/Registrations), [users](#tag/Users)",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Base"
        ],
        "operationId": "base_read"
      }
    },
    "/citations/styles/": {
      "get": {
        "summary": "List all citation styles",
        "description": "\nA paginated list of all standard citation styles available for rendering citations.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 citation styles. Each resource in the array is a separate citation syle and contains the full representation of the citation style object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include citation styles that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/citations/styles/?filter[title]=open.\n\nCitation styles may be filtered by their `id`, `title`, `short-title`, and `summary`.\n#### Errors\nThis request should never return an error.",
        "tags": [
          "Citations"
        ],
        "operationId": "citations_styles_list",
        "x-response-schema": "Citation Style",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Citation Style",
                "required": [
                  "id",
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the citation style, e.g. APA."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the citation style entity (`citation-styles`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "required": [
                      "date_parsed",
                      "title"
                    ],
                    "description": "The properties of the citation style entity.",
                    "properties": {
                      "date_parsed": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the citation style was first parsed, as an iso8601 formatted timestamp."
                      },
                      "short_title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The short name for the citation style."
                      },
                      "summary": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The summary of the citation style."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The official name of the citation style."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the citation style entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {},
                    "attributes": {
                      "date_parsed": "2015-02-16T04:16:25.732000",
                      "summary": null,
                      "short_title": "AMR",
                      "title": "Academy of Management Review"
                    },
                    "type": "citation-styles",
                    "id": "academy-of-management-review"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/citations/styles/?page=115",
                  "prev": null,
                  "next": "https://api.osf.io/v2/citations/styles/?page=2",
                  "meta": {
                    "total": 1149,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/citations/styles/{style_id}/": {
      "get": {
        "summary": "Retrieve a citation style",
        "description": "Retrieves the details of a citation style.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested citation style, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "description": "The unique identifier of the citation style.",
            "required": true,
            "type": "string",
            "name": "style_id",
            "in": "path"
          }
        ],
        "tags": [
          "Citations"
        ],
        "operationId": "citations_styles_read",
        "x-response-schema": "Citation Style",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Citation Style",
              "required": [
                "id",
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the citation style, e.g. APA."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the citation style entity (`citation-styles`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "required": [
                    "date_parsed",
                    "title"
                  ],
                  "description": "The properties of the citation style entity.",
                  "properties": {
                    "date_parsed": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the citation style was first parsed, as an iso8601 formatted timestamp."
                    },
                    "short_title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The short name for the citation style."
                    },
                    "summary": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The summary of the citation style."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The official name of the citation style."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the citation style entity."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {},
                  "attributes": {
                    "date_parsed": "2015-02-16T04:16:26.233000",
                    "summary": null,
                    "short_title": "APA",
                    "title": "American Psychological Association 6th edition"
                  },
                  "type": "citation-styles",
                  "id": "apa"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{comment_id}/": {
      "get": {
        "summary": "Retrieve a comment",
        "description": "Retrieves the details of a comment\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested comment, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "comment_id",
            "description": "The unique identifier of the comment you wish to retrieve."
          }
        ],
        "tags": [
          "Comments"
        ],
        "operationId": "comments_read",
        "x-response-schema": "Comment",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Comment",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the comment entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the comment entity (`comments`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the comment entity.",
                  "properties": {
                    "can_edit": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to edit this comment"
                    },
                    "content": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The content of the comment."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the comment was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the comment was last modified, as an iso8601 formatted timestamp."
                    },
                    "modified": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment has been edited."
                    },
                    "deleted": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment is deleted."
                    },
                    "is_abuse": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment is flagged or confirmed spam."
                    },
                    "is_ham": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not an admin checked the legitimacy of this comment."
                    },
                    "has_report": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment the current user reported this as spam."
                    },
                    "has_children": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment has replies."
                    },
                    "page": {
                      "description": "The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the comment entity.",
                  "properties": {
                    "node": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the node the comment is on."
                    },
                    "replies": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the replies to the comment."
                    },
                    "target": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the target of the comment."
                    },
                    "reports": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the reports connected to the comment."
                    },
                    "user": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the user who created the comment."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the comment entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the comment."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "comments",
                  "attributes": {
                    "content": "comment content"
                  },
                  "relationships": {
                    "target": {
                      "data": {
                        "type": "{target_type}",
                        "id": "{target_id}"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/gvuew/",
                          "meta": {}
                        }
                      }
                    },
                    "replies": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/gvuew/comments/?filter%5Btarget%5D=twpgrpv78d8s",
                          "meta": {}
                        }
                      }
                    },
                    "target": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/gvuew/",
                          "meta": {
                            "type": "nodes"
                          }
                        }
                      }
                    },
                    "reports": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/comments/twpgrpv78d8s/reports/",
                          "meta": {}
                        }
                      }
                    },
                    "user": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/rnizy/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/comments/twpgrpv78d8s/"
                  },
                  "attributes": {
                    "can_edit": true,
                    "date_modified": "2017-02-10T20:44:03.193000",
                    "deleted": false,
                    "is_ham": false,
                    "has_children": false,
                    "modified": false,
                    "content": "comments about things",
                    "has_report": false,
                    "is_abuse": false,
                    "date_created": "2017-02-10T20:44:03.185000",
                    "page": "node"
                  },
                  "type": "comments",
                  "id": "twpgrpv78d8s"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a comment",
        "description": "Updates the specified comment by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n#### Returns\nReturns JSON with a `data` key containing the new representation of the updated comment, if the request is successful.\n\nIf the request is unsuccessful, JSON with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "comment_id",
            "description": "The unique identifier of the comment you wish to update."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "comments",
                  "id": "{comment_id}",
                  "attributes": {
                    "content": "changed comment content"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Comments"
        ],
        "operationId": "comments_put",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a comment",
        "description": "Deletes a comment. This action can be undone by setting deleted to False in a comment update request.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "comment_id",
            "description": "The unique identifier of the comment you wish to delete."
          }
        ],
        "tags": [
          "Comments"
        ],
        "operationId": "comments_delete",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/files/{file_id}/": {
      "get": {
        "summary": "Retrieve a file",
        "description": "Retrieves the details of a file (or folder)\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested file, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n### Waterbutler API actions\n\nFiles can be modified through the Waterbutler API routes found in `links` (`new_folder`, `move`, `upload`, `download`, and `delete`).\n\n#### Download (files)\n\nTo download a file, issue a GET request against the download link. The response will have the Content-Disposition header set, which will will trigger a download in a browser.\n\n#### Create Subfolder (folders)\n\nYou can create a subfolder of an existing folder by issuing a PUT request against the new_folder link. The ?kind=folder portion of the query parameter is already included in the new_folder link. The name of the new subfolder should be provided in the name query parameter. The response will contain a WaterButler folder entity. If a folder with that name already exists in the parent directory, the server will return a 409 Conflict error response.\n\n#### Upload New File (folders)\n\n\n  To upload a file to a folder, issue a PUT request to the folder's upload link with the raw file data in the request body, and the kind and name query parameters set to 'file' and the desired name of the file. The response will contain a WaterButler file entity that describes the new file. If a file with the same name already exists in the folder, the server will return a 409 Conflict error response.\n\n\n#### Update Existing File (file)\n\nTo update an existing file, issue a PUT request to the file's upload link with the raw file data in the request body and the kind query parameter set to \"file\". The update action will create a new version of the file. The response will contain a WaterButler file entity that describes the updated file.\n\n#### Rename (files, folders)\n\nTo rename a file or folder, issue a POST request to the move link with the action body parameter set to \"rename\" and the rename body parameter set to the desired name. The response will contain either a folder entity or file entity with the new name.\n\n#### Move & Copy (files, folders)\n\nMove and copy actions both use the same request structure, a POST to the move url, but with different values for the action body parameters. The path parameter is also required and should be the OSF path attribute of the folder being written to. The rename and conflict parameters are optional. If you wish to change the name of the file or folder at its destination, set the rename parameter to the new name. The conflict param governs how name clashes are resolved. Possible values are replace and keep. replace is the default and will overwrite the file that already exists in the target folder. keep will attempt to keep both by adding a suffix to the new file's name until it no longer conflicts. The suffix will be ' (x)' where x is a increasing integer starting from 1. This behavior is intended to mimic that of the OS X Finder. The response will contain either a folder entity or file entity with the new name.\nFiles and folders can also be moved between nodes and providers. The resource parameter is the id of the node under which the file/folder should be moved. It must agree with the path parameter, that is the path must identify a valid folder under the node identified by resource. Likewise, the provider parameter may be used to move the file/folder to another storage provider, but both the resource and path parameters must belong to a node and folder already extant on that provider. Both resource and provider default to the current node and providers.\nIf a moved/copied file is overwriting an existing file, a 200 OK response will be returned. Otherwise, a 201 Created will be returned.\n\n#### Delete (file, folders)\n\nTo delete a file or folder send a DELETE request to the delete link. Nothing will be returned in the response body.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "file_id",
            "description": "The unique identifier of the file you wish to retrieve."
          }
        ],
        "tags": [
          "Files"
        ],
        "operationId": "files_detail",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file entity (`files`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the file entity.",
                    "properties": {
                      "extra": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The kind of files object it is (`file` or `folder`)."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Name of the file"
                      },
                      "last_touched": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Unix-style path to the file relative to the provider root."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                      },
                      "current_version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Version number of the file."
                      },
                      "delete_allowed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not deletion of the file is allowed."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the file provider (e.g., `osfstorage`)"
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier for this file entity for this project and storage provider."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user is allowed to post comments."
                      },
                      "guid": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                      },
                      "checkout": {
                        "type": "string",
                        "readOnly": true,
                        "description": "SOON TO BE DEPRECATED, see relationships checkout."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe this file, as entered by project contributors."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node the file is on."
                      },
                      "checkout": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user who checked out the file."
                      },
                      "comments": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the comments on the file."
                      },
                      "versions": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the versions of the file."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file entity.",
                    "properties": {
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the page to view a file's information or a folder's contents."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the file."
                      },
                      "move": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file moves."
                      },
                      "new_folder": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                      },
                      "upload": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file uploads."
                      },
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file downloads."
                      },
                      "delete": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file deletions."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv",
                          "meta": {}
                        }
                      }
                    },
                    "versions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "info": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "move": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "download": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "delete": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54"
                  },
                  "attributes": {
                    "extra": {
                      "hashes": {
                        "sha256": "2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e",
                        "md5": "44325d4f13b09f3769ede09d7c20a82c"
                      },
                      "downloads": 442
                    },
                    "kind": "file",
                    "name": "OSC2012.pdf",
                    "last_touched": "2015-09-18T01:11:16.328000",
                    "materialized_path": "/OSC2012.pdf",
                    "date_modified": "2014-10-17T19:24:12.264Z",
                    "current_version": 1,
                    "delete_allowed": true,
                    "date_created": "2014-10-17T19:24:12.264Z",
                    "provider": "osfstorage",
                    "path": "/553e69248c5e4a219919ea54",
                    "current_user_can_comment": true,
                    "guid": "sejcv",
                    "checkout": null,
                    "tags": [],
                    "size": 216945
                  },
                  "type": "files",
                  "id": "553e69248c5e4a219919ea54"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a file",
        "description": "Updates the specified file by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n#### Returns\nReturns JSON with a `data` key containing the new representation of the updated file, if the request is successful.\n\nIf the request is unsuccessful, JSON with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "file_id",
            "description": "The unique identifier of the file you wish to update."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "files",
                  "id": "{file_id}",
                  "attributes": {
                    "name": "new file name.jpg"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Files"
        ],
        "operationId": "files_patch",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/files/{file_id}/versions/": {
      "get": {
        "summary": "List all file versions",
        "description": "\nA paginated list of all file versions.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 file versions. Each resource in the array is a separate file version object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "file_id",
            "description": "The unique identifier of the file from which you want to retrieve versions."
          }
        ],
        "tags": [
          "Files"
        ],
        "operationId": "files_versions",
        "x-response-schema": "File Version",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File Version",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file version."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file versions entity (`file_versions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "readOnly": true,
                    "description": "The properties of the file versions entity.",
                    "properties": {
                      "content_type": {
                        "type": "object",
                        "readOnly": true,
                        "description": "MIME content-type for the file (null if unavailable)."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date of the file version creation, as an iso8601 formatted timestamp."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file version entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for a file version."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the html version page."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/1/",
                      "html": "https://osf.io/ezcuj/files/osfstorage/553e69248c5e4a219919ea54?revision=1"
                    },
                    "attributes": {
                      "content_type": "application/octet-stream",
                      "date_created": "2017-01-01T12:34:56.78910",
                      "size": 216945
                    },
                    "type": "file_versions",
                    "id": "1"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/files/{file_id}/versions/{version_id}/": {
      "get": {
        "summary": "Retrieve a file version",
        "description": "Retrieves the details of a file version\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested file, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "file_id",
            "description": "The unique identifier of the file from which you want to retrieve versions."
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "version_id",
            "description": "The file version number you want to retrieve."
          }
        ],
        "tags": [
          "Files"
        ],
        "operationId": "files_version_detail",
        "x-response-schema": "File Version",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File Version",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file version."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file versions entity (`file_versions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "readOnly": true,
                    "description": "The properties of the file versions entity.",
                    "properties": {
                      "content_type": {
                        "type": "object",
                        "readOnly": true,
                        "description": "MIME content-type for the file (null if unavailable)."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date of the file version creation, as an iso8601 formatted timestamp."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file version entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for a file version."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the html version page."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/1/",
                    "html": "https://osf.io/ezcuj/files/osfstorage/553e69248c5e4a219919ea54?revision=1"
                  },
                  "attributes": {
                    "content_type": "application/octet-stream",
                    "date_created": "2017-01-01T12:34:56.78910",
                    "size": 216945
                  },
                  "type": "file_versions",
                  "id": "1"
                }
              }
            }
          }
        }
      }
    },
    "/licenses/": {
      "get": {
        "summary": "List all licenses",
        "description": "A paginated list of licenses. The returned licenses are sorted by their name.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of 10 licenses. Each resource in the array is a separate license object and contains the full representation of the license, meaning additional requests to a license's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include licenses that match your filters by utilizing the `filter` query parameter, e.g. [https://api.osf.io/v2/licenses/?filter[name]=apache](https://api.osf.io/v2/licenses/?filter[name]=apache).\n\nLicenses may be filtered by their `id`, and `name`.",
        "tags": [
          "Licenses"
        ],
        "operationId": "license_list",
        "x-response-schema": "License",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "License",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the license."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the license (`license`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the license.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Name of the license."
                      },
                      "text": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full text of the license."
                      },
                      "required_fields": {
                        "type": "array",
                        "readOnly": true,
                        "description": "Fields required for this license (provided to help front-end validators). Maps to properties on the NodeLicense model.",
                        "items": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Individual fields required by this license."
                        }
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the license.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the license."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e968/"
                    },
                    "attributes": {
                      "text": "Copyright (c) {{year}}, {{copyrightHolders}}\nAll rights reserved.\n\nThe full descriptive text of the License.\n",
                      "required_fields": [
                        "year",
                        "copyrightHolders"
                      ],
                      "name": "BSD 2-Clause \"Simplified\" License"
                    },
                    "type": "licenses",
                    "id": "563c1cf88c5e4a3877f9e968"
                  }
                ],
                "links": {
                  "first": "",
                  "last": "https://api.osf.io/v2/licenses/?page=2",
                  "prev": "",
                  "next": "https://api.osf.io/v2/licenses/?page=2",
                  "meta": {
                    "total": 16,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/license/{license_id}/": {
      "get": {
        "summary": "Retrieve a license",
        "description": "Retrieves the details of a license.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested license, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "license_id",
            "description": "The unique identifier of the license."
          }
        ],
        "tags": [
          "Licenses"
        ],
        "operationId": "licenses_read",
        "x-response-schema": "License",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "License",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the license."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the license (`license`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the license.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Name of the license."
                    },
                    "text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Full text of the license."
                    },
                    "required_fields": {
                      "type": "array",
                      "readOnly": true,
                      "description": "Fields required for this license (provided to help front-end validators). Maps to properties on the NodeLicense model.",
                      "items": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Individual fields required by this license."
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the license.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the license."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e968/"
                  },
                  "attributes": {
                    "text": "Copyright (c) {{year}}, {{copyrightHolders}}\nAll rights reserved.\n\nThe full descriptive text of the License\n",
                    "required_fields": [
                      "year",
                      "copyrightHolders"
                    ],
                    "name": "BSD 2-Clause \"Simplified\" License"
                  },
                  "type": "licenses",
                  "id": "563c1cf88c5e4a3877f9e968"
                }
              }
            }
          }
        }
      }
    },
    "/logs/{log_id}/": {
      "get": {
        "summary": "Retrieve a log",
        "description": "Retrieves the details of a log.\nA log is permanent immutable record of a node's history. A log is created when a user performs one of many actions. See the [actions](#Logs_logs_actions) section for more details.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested log, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "description": "The unique identifier of the log you wish to retrieve.",
            "required": true,
            "type": "string",
            "name": "log_id",
            "in": "path"
          }
        ],
        "tags": [
          "Logs"
        ],
        "operationId": "logs_read",
        "x-response-schema": "Log",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "Log",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the log."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the log (`logs`)"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the log.",
                  "required": [
                    "action",
                    "date"
                  ],
                  "properties": {
                    "date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The date and time at which the log was created, as an iso8601 formatted timestamp."
                    },
                    "action": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The type of action performed on the OSF. See actions section for full list of possible actions."
                    },
                    "params": {
                      "type": "object",
                      "title": "Log Params",
                      "readOnly": true,
                      "description": "The type of action performed on the OSF. See description for full list of possible actions.",
                      "properties": {
                        "addon": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The addon associated with the connected node."
                        },
                        "anonymous_link": {
                          "type": "boolean",
                          "readOnly": true,
                          "description": "The view only link added to the node was anonymous."
                        },
                        "bucket": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The Amazon s3 bucket connected to the connected node."
                        },
                        "citation_name": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Name of citation associated with the connected node."
                        },
                        "contributors": {
                          "type": "string",
                          "readOnly": true,
                          "description": "List of contributors on the connected node involved in the action represented by this node log."
                        },
                        "data_set": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The dataset associated with the connected node."
                        },
                        "destination": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title."
                        },
                        "figshare_title": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Title of the fighshare project associated with this node log"
                        },
                        "forward_url": {
                          "type": "string",
                          "readOnly": true,
                          "description": "URL that the connected node forwards to."
                        },
                        "github_user": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The github user involved with the action represented by this node log."
                        },
                        "github_repo": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The github repository involved with the action represented by this node log."
                        },
                        "file": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Dictionary with information about the file involved with the log."
                        },
                        "filename": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Filename for the file associated with the log."
                        },
                        "kind": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Kind of the object associated with the log."
                        },
                        "folder": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Folder associated with the log."
                        },
                        "folder_name": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Name of the folder associated with the log."
                        },
                        "license": {
                          "type": "string",
                          "readOnly": true,
                          "description": "License for the associated node."
                        },
                        "identifiers": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Dictionary containing the DOI and ARK ID for a preprint associated with the log."
                        },
                        "institution": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Dictionary containing the ID and Name of the institution associated with the log."
                        },
                        "old_page": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Old name of wiki page for a wiki rename log action."
                        },
                        "page": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Current name of wiki page for rename log action."
                        },
                        "page_id": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Primary key of the wiki page associated with the log."
                        },
                        "params_node": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Node that is refered to in the params of the log."
                        },
                        "params_project": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Project that is refered to in the params of the log."
                        },
                        "path": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Path for a file associated with the log."
                        },
                        "pointer": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary with information about the node that is linked to the associated node."
                        },
                        "preprint": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Preprint related to the associated node."
                        },
                        "preprint_provider": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Preprint provider for the associated node."
                        },
                        "previous_institution": {
                          "type": "string",
                          "readOnly": true,
                          "description": "If a primary institution for the associated node is changed, this will show the previous institution."
                        },
                        "source": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title."
                        },
                        "study": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Dataverse study linked to the associated node."
                        },
                        "tag": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Tag associated with the associated node."
                        },
                        "tags": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Tags associated with the associated node."
                        },
                        "target": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title."
                        },
                        "template_node": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary containing information about the node that was used as a template for the associated node."
                        },
                        "title_new": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The new title for the associated node."
                        },
                        "title_original": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The original title for the associated node"
                        },
                        "updated_fields": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary containing all of the fields updated on the associated node."
                        },
                        "urls": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Links to access information about the file associated with this log."
                        },
                        "version": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Version of the wiki page associated with this log."
                        },
                        "wiki": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary with information about the wiki page associated with the log."
                        }
                      }
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the log.",
                  "required": [
                    "node"
                  ],
                  "properties": {
                    "node": {
                      "description": "A relationship to the node associated with this log.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "original_node": {
                      "description": "A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "user": {
                      "description": "A relationship to the user who performed the log action.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "linked_node": {
                      "description": "A relationship to the node linked to this log.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "template_node": {
                      "description": "A relationship to the node used as a template for this log.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "links": {
                  "description": "URLs to alternative representations of the log entity.",
                  "readOnly": true,
                  "type": "object",
                  "title": "Links",
                  "required": [
                    "self"
                  ],
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the log."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/",
                          "meta": {}
                        }
                      }
                    },
                    "original_node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/",
                          "meta": {}
                        }
                      }
                    },
                    "user": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/jk5cv/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/logs/4fc706a80b6e9118ef000122/"
                  },
                  "attributes": {
                    "date": "2012-05-31T05:50:32.083000",
                    "action": "contributor_added",
                    "params": {
                      "params_node": {
                        "id": "ezcuj",
                        "title": "Reproducibility Project: Psychology"
                      },
                      "contributors": [
                        {
                          "family_name": "Nosek",
                          "middle_names": "A.",
                          "given_name": "Brian",
                          "full_name": "Brian A. Nosek",
                          "active": true,
                          "id": "cdi38"
                        }
                      ]
                    }
                  },
                  "type": "logs",
                  "id": "4fc706a80b6e9118ef000122"
                }
              }
            }
          }
        }
      }
    },
    "/actions/": {
      "get": {
        "summary": "Actions",
        "description": "\nA log can have one of many actions. The complete list of loggable actions (in the format {identifier}: {description}) is as follows:\n* `project_created`: A Node is created\n* `project_registered`: A Node is registered\n* `project_deleted`: A Node is deleted\n* `created_from`: A Node is created using an existing Node as a template\n* `pointer_created`: A Pointer is created\n* `pointer_forked`: A Pointer is forked\n* `pointer_removed`: A Pointer is removed\n* `node_removed`: A component is deleted\n* `node_forked`: A Node is forked\n---\n* `made_public`: A Node is made public\n* `made_private`: A Node is made private\n* `tag_added`: A tag is added to a Node\n* `tag_removed`: A tag is removed from a Node\n* `edit_title`: A Node's title is changed\n* `edit_description`: A Node's description is changed\n* `updated_fields`: One or more of a Node's fields are changed\n* `external_ids_added`: An external identifier is added to a Node (e.g. DOI, ARK)\n* `view_only_link_added`: A view-only link was added to a Node\n* `view_only_link_removed`:  A view-only link was removed from a Node\n---\n* `contributor_added`: A Contributor is added to a Node\n* `contributor_removed`: A Contributor is removed from a Node\n* `contributors_reordered`: A Contributor's position in a Node's bibliography is changed\n* `permissions_updated`: A Contributor`s permissions on a Node are changed\n* `made_contributor_visible`: A Contributor is made bibliographically visible on a Node\n* `made_contributor_invisible`: A Contributor is made bibliographically invisible on a Node\n---\n* `wiki_updated`: A Node's wiki is updated\n* `wiki_deleted`: A Node's wiki is deleted\n* `wiki_renamed`: A Node's wiki is renamed\n* `made_wiki_public`: A Node's wiki is made public\n* `made_wiki_private`: A Node's wiki is made private\n---\n* `addon_added`: An add-on is linked to a Node\n* `addon_removed`: An add-on is unlinked from a Node\n* `addon_file_moved`: A File in a Node's linked add-on is moved\n* `addon_file_copied`: A File in a Node's linked add-on is copied\n* `addon_file_renamed`: A File in a Node's linked add-on is renamed\n* `node_authorized`: An addon is authorized for a project\n* `node_deauthorized`: An addon is deauthorized for a project\n* `folder_created`: A Folder is created in a Node's linked add-on\n* `file_added`: A File is added to a Node's linked add-on\n* `file_updated`: A File is updated on a Node's linked add-on\n* `file_removed`: A File is removed from a Node's linked add-on\n* `file_restored`: A File is restored in a Node's linked add-on\n---\n* `comment_added`: A Comment is added to some item\n* `comment_removed`: A Comment is removed from some item\n* `comment_updated`: A Comment is updated on some item\n---\n* `embargo_initiated`: An embargoed Registration is proposed on a Node\n* `embargo_approved`: A proposed Embargo of a Node is approved\n* `embargo_cancelled`: A proposed Embargo of a Node is cancelled\n* `embargo_completed`: A proposed Embargo of a Node is completed\n* `retraction_initiated`: A Withdrawal of a Registration is proposed\n* `retraction_approved`: A Withdrawal of a Registration is approved\n* `retraction_cancelled`: A Withdrawal of a Registration is cancelled\n* `registration_initiated`: A Registration of a Node is proposed\n* `registration_approved`: A proposed Registration is approved\n* `registration_cancelled`: A proposed Registration is cancelled",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Logs"
        ],
        "operationId": "logs_actions"
      }
    },
    "/institutions/": {
      "get": {
        "summary": "List all institutions",
        "description": "\nA paginated list of all verified institutions.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 institutions. Each resource in the array is a separate institution object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include institutions that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/?filter[id]=cos.\n\nInstitutions may be filtered by their `id`, `name`, and `auth_url`",
        "tags": [
          "Institutions"
        ],
        "operationId": "institutions_list",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Institution",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the institution entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the institution entity (`institutions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the institution entity.",
                    "properties": {
                      "auth_url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Url used to authenticate institution specific login."
                      },
                      "logo_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Static path to the institution specific logo."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full name of the institution."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Description of the institution."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the nodes affiliated with the institution."
                      },
                      "users": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the users affiliated with the institution."
                      },
                      "registrations": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the registrations affiliated with the institution."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the institutions entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the institution."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/cos/"
                    },
                    "attributes": {
                      "auth_url": null,
                      "logo_path": "/static/img/institutions/shields/cos-shield.png",
                      "name": "Center For Open Science",
                      "description": "COS is a non-profit technology company providing free and open services to increase inclusivity and transparency of research. Find out more at <a href=\"https://cos.io\">cos.io</a>."
                    },
                    "type": "institutions",
                    "id": "cos"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/institutions/cos/nodes/?page=2",
                  "prev": null,
                  "next": "https://api.osf.io/v2/institutions/cos/nodes/?page=2",
                  "meta": {
                    "total": 15,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{institution_id}/": {
      "get": {
        "summary": "Retrieve an institution",
        "description": "Retrieves the details of an institution\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested institution, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "institution_id",
            "description": "The unique identifier of the institution you wish to retrieve."
          }
        ],
        "tags": [
          "Institutions"
        ],
        "operationId": "institutions_detail",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Institution",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the institution entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the institution entity (`institutions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the institution entity.",
                    "properties": {
                      "auth_url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Url used to authenticate institution specific login."
                      },
                      "logo_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Static path to the institution specific logo."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full name of the institution."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Description of the institution."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the nodes affiliated with the institution."
                      },
                      "users": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the users affiliated with the institution."
                      },
                      "registrations": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the registrations affiliated with the institution."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the institutions entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the institution."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "nodes": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/institutions/cos/nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "users": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/institutions/cos/users/",
                          "meta": {}
                        }
                      }
                    },
                    "registrations": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/institutions/cos/registrations/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/institutions/cos/"
                  },
                  "attributes": {
                    "auth_url": null,
                    "logo_path": "/static/img/institutions/shields/cos-shield.png",
                    "name": "Center For Open Science",
                    "description": "COS is a non-profit technology company providing free and open services to increase inclusivity and transparency of research. Find out more at <a href=\"https://cos.io\">cos.io</a>."
                  },
                  "type": "institutions",
                  "id": "cos"
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{institution_id}/users/": {
      "get": {
        "summary": "List all affiliated users",
        "description": "A paginated list of all users affiliated with an institution.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 users. Each resource in the array is a separate users object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Filtering\nYou can optionally request that the response only include users that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/users?filter[family_name]=Nosek.\n\nUsers may be filtered by their `id`, `full_name`, `given_name`, `middle_names`, and `family_name`",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "institution_id",
            "description": "The unique identifier of the institution you wish to retrieve."
          }
        ],
        "tags": [
          "Institutions"
        ],
        "operationId": "institutions_users_list",
        "x-response-schema": "User",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "User",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the user entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the user entity (`users`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the user entity.",
                    "required": [
                      "active",
                      "date_registered",
                      "full_name"
                    ],
                    "properties": {
                      "active": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the user is an active user."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                      },
                      "family_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The family name of the user, used for bibliographic citations."
                      },
                      "full_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The full name of the user, used for display on the OSF."
                      },
                      "given_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The given name of the user, used for bibliographic citations."
                      },
                      "locale": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The user's locale, e.g. 'en_US'."
                      },
                      "middle_names": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The middle names of the user, used for bibliographic citations."
                      },
                      "suffix": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The suffix of the user, used for bibliographic citations."
                      },
                      "timezone": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The user's timezone, e.g. 'Etc/UTC'."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                    "properties": {
                      "institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions the user is affiliated with."
                      },
                      "nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes the user is a contributor to."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the user entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user's profile page on the OSF."
                      },
                      "profile_image": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user's profile image."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "users",
                    "id": "{user_id}",
                    "attributes": {
                      "full_name": "Casey M. Rollins",
                      "middle_names": "Marie"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/cdi38/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/users/cdi38/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/users/cdi38/institutions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/users/cdi38/",
                      "html": "https://osf.io/cdi38/",
                      "profile_image": "https://secure.gravatar.com/avatar/37fc491096861dae49fe23ba665af56b?d=identicon"
                    },
                    "attributes": {
                      "family_name": "Nosek",
                      "suffix": "",
                      "locale": "en_US",
                      "date_registered": "2012-05-31T05:29:01.320000",
                      "middle_names": "A.",
                      "given_name": "Brian",
                      "full_name": "Brian A. Nosek",
                      "active": true,
                      "timezone": "America/New_York"
                    },
                    "type": "users",
                    "id": "cdi38"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/institutions/cos/users/?page=8",
                  "prev": null,
                  "next": "https://api.osf.io/v2/institutions/cos/users/?page=2",
                  "meta": {
                    "total": 77,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{institution_id}/nodes/": {
      "get": {
        "summary": "List all affiliated nodes",
        "description": "A paginated list of all nodes affiliated with an institution.\n#### Versioning\nAs of version `2.2`, affiliated components (in addition to affiliated top-level projects) are returned from this endpoint.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 nodes. Each resource in the array is a separate nodes object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/nodes?filter[title]=science.\n\nNodes may be filtered by their `id`, `title`, `description`, `public`, `tags`, `category`, `date_created`, `date_modified`, `root`, `parent`, `contributors`, and `preprint`",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "institution_id",
            "description": "The unique identifier of the institution you wish to retrieve."
          }
        ],
        "tags": [
          "Institutions"
        ],
        "operationId": "institutions_node_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/comments/?filter%5Btarget%5D=qpxv2",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/qpxv2/",
                      "html": "https://osf.io/qpxv2/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "A project storing mp4 files of all the webinar videos posted to the COS youtube channel",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2017-02-09T14:19:23.054000",
                      "title": "COS Webinar Videos",
                      "collection": false,
                      "registration": false,
                      "date_created": "2017-02-08T18:27:00.135000",
                      "current_user_can_comment": true,
                      "node_license": {
                        "copyright_holders": [
                          ""
                        ],
                        "year": "2017"
                      },
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "qpxv2"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/institutions/cos/nodes/?page=330",
                  "prev": null,
                  "next": "https://api.osf.io/v2/institutions/cos/nodes/?page=2",
                  "meta": {
                    "total": 337,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{institution_id}/registrations/": {
      "get": {
        "summary": "List all affiliated registrations",
        "description": "A paginated list of all registrations affiliated with an institution.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 registrations. Each resource in the array is a separate users object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Filtering\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/registrations?filter[title]=science.\n\nRegistrations may be filtered by their  `id`, `title`, `description`, `public`, `tags`, `category`, `date_created`, `date_modified`, `root`, `parent`, `contributors`, and `preprint`",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "institution_id",
            "description": "The unique identifier of the institution you wish to retrieve."
          }
        ],
        "tags": [
          "Institutions"
        ],
        "operationId": "institutions_registration_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/comments/?filter%5Btarget%5D=xemzv",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/children/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/xemzv/",
                      "html": "https://osf.io/xemzv/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "This project contains the materials and proposal for the upcoming OASPA 2016 Conference",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-12-14T20:48:58.147000",
                      "title": "COASPA 2016, Center for Open Science",
                      "collection": false,
                      "registration": true,
                      "date_created": "2016-05-26T14:56:27.310000",
                      "current_user_can_comment": true,
                      "node_license": {
                        "copyright_holders": [
                          ""
                        ],
                        "year": "2016"
                      },
                      "public": true,
                      "tags": [
                        "TOP Guidelines",
                        "Open Practice Badges",
                        "Registered Reports",
                        "Prereg Challenge"
                      ]
                    },
                    "type": "nodes",
                    "id": "xemzv"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/institutions/cos/registrations/?page=3",
                  "prev": null,
                  "next": "https://api.osf.io/v2/institutions/cos/registrations/?page=2",
                  "meta": {
                    "total": 22,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schemas/registrations/": {
      "get": {
        "summary": "Retrieve a list of Registration Schemas",
        "description": "Retrieve a paginated list of all active Registration Schemas. Registration Schemas describe the supplemental questions that accompany a registration. Registration Schemas are read-only for API users.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of 10 Registration Schemas. Each resource in the array is a separate Registration Schemas object.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error.",
        "tags": [
          "Registration Schemas"
        ],
        "operationId": "registration_schemas_list",
        "x-response-schema": "Registration Schemas",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Registration Schema",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Registration Schema."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Registration Schema (`registration-schemas`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The attributes of the Registration Schema.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the Registration Schema"
                    },
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool that represents whether the Registration Schema is active."
                    },
                    "schema_version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "The version of this Registration Schema"
                    },
                    "schema": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "items": {
                          "type": "object"
                        }
                      },
                      "readOnly": true,
                      "description": "This dictionary is the raw schema that originally defined the Registration Schema object and it's blocks."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs that link to alternative representations of the Registration Schema.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Registration Schema.",
                  "properties": {
                    "schema_blocks": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the list of schema blocks that contain the question prompt information for the Registration Schema."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "registration-schemas",
                    "id": "6176c9d45e01f100091d4f94",
                    "attributes": {
                      "name": "Test Long-Form Registration Schema",
                      "schema_version": 2,
                      "schema": {
                        "title": "Test Long-Form Registration Schema",
                        "name": "Test Long-Form Registration Schema",
                        "atomicSchema": true,
                        "version": 2,
                        "description": "This is a test form for documentation purposes.",
                        "pages": [],
                        "blocks": [
                          {
                            "block_type": "page-heading",
                            "display_text": "The title of the page"
                          },
                          {
                            "block_type": "question-label",
                            "display_text": "The first question, put answer below."
                          },
                          {
                            "block_type": "long-text-input",
                            "registration_response_key": "Q1"
                          }
                        ]
                      },
                      "description": "This is a test form for documentation purposes.",
                      "active": true
                    },
                    "relationships": {
                      "schema_blocks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/schema_blocks/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 20,
                  "version": 2.2
                },
                "links": {
                  "self": "https://api.test.osf.io/v2/schemas/registrations/",
                  "first": null,
                  "last": "https://api.test.osf.io/v2/schemas/registrations/?page=2",
                  "prev": null,
                  "next": "https://api.test.osf.io/v2/schemas/registrations/?page=2"
                }
              }
            }
          }
        }
      }
    },
    "/schemas/registrations/{registration_schema_id}": {
      "get": {
        "summary": "Retrieve a Registration Schema",
        "description": "Retrieves the details of a given Registration Schema. Registration Schemas defines the desired supplemental information that should accompany be included in a Registration. Registration Schemas are Read-only to API users.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Registration Schemas, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_schema_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Registration Schemas"
        ],
        "operationId": "registration_schema_read",
        "x-response-schema": "Registration Schema",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Registration Schema",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Registration Schema."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Registration Schema (`registration-schemas`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The attributes of the Registration Schema.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the Registration Schema"
                    },
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool that represents whether the Registration Schema is active."
                    },
                    "schema_version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "The version of this Registration Schema"
                    },
                    "schema": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "items": {
                          "type": "object"
                        }
                      },
                      "readOnly": true,
                      "description": "This dictionary is the raw schema that originally defined the Registration Schema object and it's blocks."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs that link to alternative representations of the Registration Schema.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Registration Schema.",
                  "properties": {
                    "schema_blocks": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the list of schema blocks that contain the question prompt information for the Registration Schema."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "registration-schemas",
                  "id": "6176c9d45e01f100091d4f94",
                  "attributes": {
                    "name": "Test Long-Form Registration Schema",
                    "schema_version": 2,
                    "schema": {
                      "title": "Test Long-Form Registration Schema",
                      "name": "Test Long-Form Registration Schema",
                      "version": 2,
                      "description": "This is a test form for documentation purposes.",
                      "pages": [],
                      "blocks": [
                        {
                          "block_type": "page-heading",
                          "display_text": "The title of the page"
                        },
                        {
                          "block_type": "question-label",
                          "display_text": "The first question, put answer below."
                        },
                        {
                          "block_type": "long-text-input",
                          "registration_response_key": "Q1"
                        }
                      ],
                      "atomicSchema": true
                    },
                    "description": "This is a test form for documentation purposes.",
                    "active": true
                  },
                  "relationships": {
                    "schema_blocks": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/schema_blocks/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schema_responses/": {
      "get": {
        "summary": "List all Schema Responses",
        "description": "This retrieves a paginated list of all active Schema Responses that are public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys. The `data` key contains an array of 10 Schema Responses. Each resource in the array is a separate Registration Schemas object. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error.",
        "tags": [
          "Schema Responses"
        ],
        "operationId": "schema_responses_list",
        "x-response-schema": "Schema Responses",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "registration-schemas",
                    "id": "61b79f9eadbb5701424a2d5e",
                    "attributes": {
                      "revision_justification": "I made a mistake",
                      "date_created": "2021-12-13T19:31:42.058Z",
                      "date_submitted": "2021-12-13T19:53:02.837Z",
                      "date_modified": "2021-12-13T19:53:05.015Z",
                      "revision_responses": {
                        "q1": "Answer 1",
                        "q2": "Answer 2"
                      },
                      "reviews_state": "approved",
                      "is_original_response": false,
                      "is_pending_current_user_approval": false
                    },
                    "relationships": {
                      "actions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/actions/",
                            "meta": {}
                          }
                        }
                      },
                      "registration": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/jxtek/",
                            "meta": {}
                          },
                          "data": {
                            "id": "jxtek",
                            "type": "registration"
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/5e795fc0d2833800195735d0/",
                            "meta": {}
                          },
                          "data": {
                            "id": "5e795fc0d2833800195735d0",
                            "type": "registration-schemas"
                          }
                        }
                      },
                      "initiated_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/swrv7/",
                            "meta": {}
                          },
                          "data": {
                            "id": "swrv7",
                            "type": "users"
                          }
                        }
                      }
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.test.osf.io/v2/schema_responses/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Schema Response",
        "description": "This endpoint creates a new Schema Response with an `in_progress` state. A new response can only be created if the current schema response is in an `approved` state.\n#### Returns\nReturns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Schema Responses"
        ],
        "operationId": "schema_response_ppost",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "61c1e058e88376000a90e5dd",
                  "type": "schema-responses",
                  "attributes": {
                    "date_created": "2021-12-21T14:10:32.665084",
                    "date_submitted": null,
                    "date_modified": "2021-12-21T14:10:32.665111",
                    "revision_justification": "",
                    "revision_responses": {
                      "uploader": [],
                      "summary": "A summary of what is contained in this registration."
                    },
                    "updated_response_keys": [],
                    "reviews_state": "in_progress"
                  },
                  "relationships": {
                    "actions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schema_responses/61c1e058e88376000a90e5dd/actions/",
                          "meta": {}
                        }
                      }
                    },
                    "registration": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/e4ygz/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "e4ygz",
                        "type": "registrations"
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/5e13965879bee100010a790f/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "5e13965879bee100010a790f",
                        "type": "registration-schemas"
                      }
                    },
                    "initiated_by": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/zpw9n/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "zpw9n",
                        "type": "users"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/schema_responses/61c1e058e88376000a90e5dd/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      }
    },
    "/schema_responses/{schema_response_id}": {
      "get": {
        "summary": "Retrieve a Schema Response",
        "description": "This retrieves a single Schema response using it's id.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Schema Response, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Schema Responses"
        ],
        "operationId": "schema_responses_read",
        "x-response-schema": "Schema Response",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "registration-schemas",
                  "id": "61b79f9eadbb5701424a2d5e",
                  "attributes": {
                    "revision_justification": "I made a mistake",
                    "date_created": "2021-12-13T19:31:42.058Z",
                    "date_submitted": "2021-12-13T19:53:02.837Z",
                    "date_modified": "2021-12-13T19:53:05.015Z",
                    "revision_responses": {
                      "q1": "Answer 1",
                      "q2": "Answer 2"
                    },
                    "reviews_state": "approved",
                    "is_original_response": false,
                    "is_pending_current_user_approval": false
                  },
                  "relationships": {
                    "actions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/actions/",
                          "meta": {}
                        }
                      }
                    },
                    "registration": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/jxtek/",
                          "meta": {}
                        },
                        "data": {
                          "id": "jxtek",
                          "type": "registration"
                        }
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/5e795fc0d2833800195735d0/",
                          "meta": {}
                        },
                        "data": {
                          "id": "5e795fc0d2833800195735d0",
                          "type": "registration-schemas"
                        }
                      }
                    },
                    "initiated_by": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/swrv7/",
                          "meta": {}
                        },
                        "data": {
                          "id": "swrv7",
                          "type": "users"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Registration's Schema Response",
        "description": "Patching to this endpoint allows one to directly edit the revision responses on the Schema Response of a Registration if that Schema Response is in an `in_progress` state.\n#### Returns\nReturns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Schema Responses"
        ],
        "operationId": "schema_response_patch",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "registration-schemas",
                  "id": "61b79f9eadbb5701424a2d5e",
                  "attributes": {
                    "revision_justification": "I made a mistake",
                    "date_created": "2021-12-13T19:31:42.058Z",
                    "date_submitted": "2021-12-13T19:53:02.837Z",
                    "date_modified": "2021-12-13T19:53:05.015Z",
                    "revision_responses": {
                      "q1": "updated respons",
                      "q2": "Answer 2"
                    },
                    "reviews_state": "in_progress",
                    "is_original_response": false,
                    "is_pending_current_user_approval": false
                  },
                  "relationships": {
                    "actions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/actions/",
                          "meta": {}
                        }
                      }
                    },
                    "registration": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/jxtek/",
                          "meta": {}
                        },
                        "data": {
                          "id": "jxtek",
                          "type": "registration"
                        }
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/5e795fc0d2833800195735d0/",
                          "meta": {}
                        },
                        "data": {
                          "id": "5e795fc0d2833800195735d0",
                          "type": "registration-schemas"
                        }
                      }
                    },
                    "initiated_by": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/swrv7/",
                          "meta": {}
                        },
                        "data": {
                          "id": "swrv7",
                          "type": "users"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Incomplete Schema Response",
        "description": "This endpoint deletes a new Schema Response. Schema Responses can only be deleted in the `in_progress` state. Once a Schema Response is transitioned to an `approved` it is immutable and another Schema Response must be created to update the Schema Response for that registration.\n#### Returns\nReturns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Schema Responses"
        ],
        "operationId": "schema_response_delete",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/schema_responses/{schema_response_id}/actions/": {
      "get": {
        "summary": "Retrieve a list of Schema Response Actions for a Schema Response",
        "description": "This retrieves a paginated list of all Schema Response Actions created for a Schema Response.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Schema Response Actions"
        ],
        "operationId": "schema_response_action_read",
        "x-response-schema": "Schema Response Actions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Response Actions",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response Action."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Schema Response Action (`schema-response-actions`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "properties": {
                    "trigger": {
                      "enum": [
                        "submit",
                        "approve",
                        "accept",
                        "admin_reject",
                        "moderator_reject"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the trigger that caused the action."
                    },
                    "from_state": {
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the state of the Schema Response prior to the creation of the action."
                    },
                    "to_state": {
                      "enum": [
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the state of the Schema Response after the creation of the action"
                    },
                    "comment": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A comment made explaining the reasoning of the action."
                    },
                    "date_created": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The date the action was created."
                    },
                    "auto": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool of representing whether a user created the action."
                    },
                    "visible": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool of representing whether the action is visible."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Schema Response Action entity.",
                  "properties": {
                    "creator": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    },
                    "target": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the Registration Schema entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "61b9eae1a7d8ac025c4c46d3",
                    "type": "schema-response-actions",
                    "attributes": {
                      "trigger": "submit",
                      "comment": "",
                      "from_state": "in_progress",
                      "to_state": "unapproved",
                      "date_created": "2021-12-15T13:17:21.845573Z",
                      "date_modified": "2021-12-15T13:17:21.845622Z",
                      "auto": false,
                      "visible": true
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/zfsr2/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "zfsr2",
                          "type": "users"
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schema_responses/61b9cd62eb66180215222669/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "61b9cd62eb66180215222669",
                          "type": "schema_responses"
                        }
                      }
                    },
                    "embeds": {
                      "creator": {
                        "data": {
                          "id": "zfsr2",
                          "type": "users",
                          "attributes": {
                            "full_name": "Lukasz Okruszek",
                            "given_name": "Łukasz",
                            "middle_names": "",
                            "family_name": "Okruszek",
                            "suffix": "",
                            "date_registered": "2017-02-02T21:32:45.495000Z",
                            "active": true,
                            "timezone": "Europe/Budapest",
                            "locale": "pl",
                            "social": {
                              "ssrn": "",
                              "orcid": "0000-0002-7136-2864",
                              "github": [],
                              "scholar": "CHyWD84AAAAJ&amp;hl",
                              "twitter": [],
                              "linkedIn": [],
                              "impactStory": "",
                              "baiduScholar": "",
                              "researchGate": "Lukasz-Okruszek",
                              "researcherId": "",
                              "profileWebsites": [],
                              "academiaProfileID": "",
                              "academiaInstitution": ""
                            },
                            "employment": [
                              {
                                "title": "Head",
                                "endYear": "",
                                "ongoing": true,
                                "endMonth": 0,
                                "startYear": "2016",
                                "department": "Social Neuroscience Lab",
                                "startMonth": 9,
                                "institution": "Institute of Psychology, Polish Academy of Sciences"
                              }
                            ],
                            "education": []
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "quickfiles": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/quickfiles/",
                                  "meta": {}
                                },
                                "upload": {
                                  "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/",
                                  "meta": {}
                                },
                                "download": {
                                  "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/?zip=",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/preprints/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/zfsr2/",
                            "profile_image": "https://secure.gravatar.com/avatar/8a25f4601ac997f113b3145aa5cf907e?d=identicon",
                            "self": "https://api.osf.io/v2/users/zfsr2/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/actions/61b9eae1a7d8ac025c4c46d3/"
                    }
                  },
                  {
                    "id": "61b9eaf13cddaa026ef7245d",
                    "type": "schema-response-actions",
                    "attributes": {
                      "trigger": "approve",
                      "comment": "",
                      "from_state": "unapproved",
                      "to_state": "approved",
                      "date_created": "2021-12-15T13:17:37.195568Z",
                      "date_modified": "2021-12-15T13:17:37.195597Z",
                      "auto": false,
                      "visible": true
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/zfsr2/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "zfsr2",
                          "type": "users"
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schema_responses/61b9cd62eb66180215222669/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "61b9cd62eb66180215222669",
                          "type": "schema_responses"
                        }
                      }
                    },
                    "embeds": {
                      "creator": {
                        "data": {
                          "id": "zfsr2",
                          "type": "users",
                          "attributes": {
                            "full_name": "Test User",
                            "given_name": "Test",
                            "middle_names": "",
                            "family_name": "User",
                            "suffix": "",
                            "date_registered": "2017-02-02T21:32:45.495000Z",
                            "active": true,
                            "timezone": "Europe/Budapest",
                            "locale": "pl",
                            "social": {
                              "ssrn": "",
                              "orcid": "0000-0002-7136-286X",
                              "github": [],
                              "scholar": "",
                              "twitter": [],
                              "linkedIn": [],
                              "impactStory": "",
                              "baiduScholar": "",
                              "researchGate": "test-user",
                              "researcherId": "",
                              "profileWebsites": [],
                              "academiaProfileID": "",
                              "academiaInstitution": ""
                            },
                            "employment": [
                              {
                                "title": "Developer",
                                "endYear": "",
                                "ongoing": true,
                                "endMonth": 0,
                                "startYear": "2017",
                                "department": "Denfense",
                                "startMonth": 9,
                                "institution": "Institute of the Stars"
                              }
                            ],
                            "education": []
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "quickfiles": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/quickfiles/",
                                  "meta": {}
                                },
                                "upload": {
                                  "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/",
                                  "meta": {}
                                },
                                "download": {
                                  "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/?zip=",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/preprints/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/zfsr2/",
                            "profile_image": "https://secure.gravatar.com/avatar/8a25f4601ac997f113b3145aa5cf907e?d=identicon",
                            "self": "https://api.osf.io/v2/users/sfsr2/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/actions/61b9eaf13cddaa026ef7245d/"
                    }
                  }
                ],
                "meta": {
                  "total": 2,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/schema_responses/61b9cd62eb66180215222669/actions/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Schema Response Action",
        "description": "This creates a new Schema Response Action in order to trigger a state transition for a Schema Response.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Schema Response Actions"
        ],
        "operationId": "schema_response_action_read",
        "x-response-schema": "Schema Response Actions",
        "responses": {
          "201": {
            "description": "OK"
          }
        }
      }
    },
    "/schema_responses/{schema_response_id}/actions/{schema_response_action_id}": {
      "get": {
        "summary": "A Schema Response Action from a Schema Response",
        "description": "Retrieves a Schema Response Action by it's ID.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Schema Response example `61b9cd62eb66180215222669`."
          },
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_action_id",
            "required": true,
            "description": "The unique identifier of the Schema Response Action example `61b9eae1a7d8ac025c4c46d3`."
          }
        ],
        "tags": [
          "Schema Response Actions"
        ],
        "operationId": "schema_response_action_read",
        "x-response-schema": "Schema Response Actions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Response Actions",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response Action."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Schema Response Action (`schema-response-actions`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "properties": {
                    "trigger": {
                      "enum": [
                        "submit",
                        "approve",
                        "accept",
                        "admin_reject",
                        "moderator_reject"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the trigger that caused the action."
                    },
                    "from_state": {
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the state of the Schema Response prior to the creation of the action."
                    },
                    "to_state": {
                      "enum": [
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the state of the Schema Response after the creation of the action"
                    },
                    "comment": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A comment made explaining the reasoning of the action."
                    },
                    "date_created": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The date the action was created."
                    },
                    "auto": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool of representing whether a user created the action."
                    },
                    "visible": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool of representing whether the action is visible."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Schema Response Action entity.",
                  "properties": {
                    "creator": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    },
                    "target": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the Registration Schema entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "61b9eae1a7d8ac025c4c46d3",
                  "type": "schema-response-actions",
                  "attributes": {
                    "trigger": "submit",
                    "comment": "",
                    "from_state": "in_progress",
                    "to_state": "unapproved",
                    "date_created": "2021-12-15T13:17:21.845573Z",
                    "date_modified": "2021-12-15T13:17:21.845622Z",
                    "auto": false,
                    "visible": true
                  },
                  "relationships": {
                    "creator": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/zfsr2/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "zfsr2",
                        "type": "users"
                      }
                    },
                    "target": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schema_responses/61b9cd62eb66180215222669/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "61b9cd62eb66180215222669",
                        "type": "schema_responses"
                      }
                    }
                  },
                  "embeds": {
                    "creator": {
                      "data": {
                        "id": "zfsr2",
                        "type": "users",
                        "attributes": {
                          "full_name": "Lukasz Okruszek",
                          "given_name": "Łukasz",
                          "middle_names": "",
                          "family_name": "Okruszek",
                          "suffix": "",
                          "date_registered": "2017-02-02T21:32:45.495000Z",
                          "active": true,
                          "timezone": "Europe/Budapest",
                          "locale": "pl",
                          "social": {
                            "ssrn": "",
                            "orcid": "0000-0002-7136-2864",
                            "github": [],
                            "scholar": "CHyWD84AAAAJ&amp;hl",
                            "twitter": [],
                            "linkedIn": [],
                            "impactStory": "",
                            "baiduScholar": "",
                            "researchGate": "Lukasz-Okruszek",
                            "researcherId": "",
                            "profileWebsites": [],
                            "academiaProfileID": "",
                            "academiaInstitution": ""
                          },
                          "employment": [
                            {
                              "title": "Head",
                              "endYear": "",
                              "ongoing": true,
                              "endMonth": 0,
                              "startYear": "2016",
                              "department": "Social Neuroscience Lab",
                              "startMonth": 9,
                              "institution": "Institute of Psychology, Polish Academy of Sciences"
                            }
                          ],
                          "education": []
                        },
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "groups": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/groups/",
                                "meta": {}
                              }
                            }
                          },
                          "quickfiles": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/quickfiles/",
                                "meta": {}
                              },
                              "upload": {
                                "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/",
                                "meta": {}
                              },
                              "download": {
                                "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/?zip=",
                                "meta": {}
                              }
                            }
                          },
                          "registrations": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/registrations/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/institutions/",
                                "meta": {}
                              },
                              "self": {
                                "href": "https://api.osf.io/v2/users/zfsr2/relationships/institutions/",
                                "meta": {}
                              }
                            }
                          },
                          "preprints": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/preprints/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "html": "https://osf.io/zfsr2/",
                          "profile_image": "https://secure.gravatar.com/avatar/8a25f4601ac997f113b3145aa5cf907e?d=identicon",
                          "self": "https://api.osf.io/v2/users/zfsr2/"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/actions/61b9eae1a7d8ac025c4c46d3/"
                    }
                  }
                },
                "meta": {
                  "total": 2,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/schema_responses/61b9cd62eb66180215222669/actions/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/schema_responses/{schema_response_id}/schema_blocks/": {
      "get": {
        "summary": "Retrieve a list of Registration Schema Blocks for a Schema Response",
        "description": "This returns a list of all the Registration Schema Blocks are contained in Registration Schema.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Registration Schemas, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Registration Schema Blocks"
        ],
        "operationId": "schema_response_blocks_read",
        "x-response-schema": "Schema Response",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Registration Schema Block",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Registration Schema Block."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Registration Schema Block (`schema-blocks`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The attributes of the Registration Schema Block.",
                  "properties": {
                    "registration_response_key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "This string is the the block key for the Registration Schema Block's corresponding block on the Schema Response."
                    },
                    "schema_block_group_key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "This string indicates if a block is part of a block group, block groups may contain the different options dropdown menu or a group of inputs and display elements that are validated together."
                    },
                    "block_type": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A string that represents the type of input that the schema will take and the UI element that appears to the user on the frontend.",
                      "enum": [
                        "page-heading",
                        "section-heading",
                        "subsection-heading",
                        "paragraph",
                        "question-label",
                        "short-text-input",
                        "long-text-input",
                        "file-input",
                        "contributors-input",
                        "single-select-input",
                        "multi-select-input",
                        "select-input-option",
                        "select-other-option"
                      ]
                    },
                    "display_text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text that will accompany the UI element displayed on this Registration Schema Block."
                    },
                    "example_text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text that will accompany the UI element displayed on this Registration Schema Block."
                    },
                    "required": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool that represents if this field is required for creation of a Schema Response."
                    },
                    "index": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Integer beginning at zero that represents the order of Registration Schema Block in the Registration Schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Schema Response Action.",
                  "properties": {
                    "schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the schema the the Registration Schema Block is on."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the  Registration Schema Block.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema Block."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "schema-blocks",
                    "id": "61b79f9eadbb5701424a2d5e",
                    "attributes": {
                      "registration_response_key": null,
                      "schema_block_group_key": "",
                      "block_type": "page-heading",
                      "display_text": "Background and Study Intent",
                      "help_text": "",
                      "required": false,
                      "index": 0
                    },
                    "relationships": {
                      "schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/",
                            "meta": {}
                          },
                          "data": {
                            "id": "6176c9d45e01f100091d4f94",
                            "type": "registration-schemas"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/"
                    }
                  },
                  {
                    "type": "schema-blocks",
                    "id": "61b79f9eadbb5701424a2d53",
                    "attributes": {
                      "registration_response_key": null,
                      "schema_block_group_key": "",
                      "block_type": "question-label",
                      "display_text": "Question 1",
                      "help_text": "I am a question",
                      "required": false,
                      "index": 1
                    },
                    "relationships": {
                      "schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/",
                            "meta": {}
                          },
                          "data": {
                            "id": "6176c9d45e01f100091d4f94",
                            "type": "registration-schemas"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d53/"
                    }
                  },
                  {
                    "type": "schema-blocks",
                    "id": "61b79f9eadbb5701424a2d53",
                    "attributes": {
                      "registration_response_key": "Q1",
                      "schema_block_group_key": "",
                      "block_type": "long-text-input",
                      "display_text": "",
                      "help_text": "",
                      "required": false,
                      "index": 2
                    },
                    "relationships": {
                      "schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/",
                            "meta": {}
                          },
                          "data": {
                            "id": "6176c9d45e01f100091d4f94",
                            "type": "registration-schemas"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d53/"
                    }
                  }
                ],
                "meta": {
                  "total": 3,
                  "per_page": 10,
                  "version": 2.2
                },
                "links": {
                  "self": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/schema_blocks/",
                  "first": null,
                  "last": null,
                  "next": null,
                  "prev": null
                }
              }
            }
          }
        }
      }
    },
    "/schema_responses/{schema_response_id}/schema_blocks/{schema_response_block_id}": {
      "get": {
        "summary": "Retrieve a Registration Schema Block",
        "description": "This returns a Registration Schema Block by it's ID.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Registration Schemas, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          },
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_block_id",
            "required": true,
            "description": "The unique identifier of the Schema Response Block example `61b79f9eadbb5701424a2d5e`."
          }
        ],
        "tags": [
          "Registration Schema Blocks"
        ],
        "operationId": "schema_response_blocks_read",
        "x-response-schema": "Schema Response",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Registration Schema Block",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Registration Schema Block."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Registration Schema Block (`schema-blocks`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The attributes of the Registration Schema Block.",
                  "properties": {
                    "registration_response_key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "This string is the the block key for the Registration Schema Block's corresponding block on the Schema Response."
                    },
                    "schema_block_group_key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "This string indicates if a block is part of a block group, block groups may contain the different options dropdown menu or a group of inputs and display elements that are validated together."
                    },
                    "block_type": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A string that represents the type of input that the schema will take and the UI element that appears to the user on the frontend.",
                      "enum": [
                        "page-heading",
                        "section-heading",
                        "subsection-heading",
                        "paragraph",
                        "question-label",
                        "short-text-input",
                        "long-text-input",
                        "file-input",
                        "contributors-input",
                        "single-select-input",
                        "multi-select-input",
                        "select-input-option",
                        "select-other-option"
                      ]
                    },
                    "display_text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text that will accompany the UI element displayed on this Registration Schema Block."
                    },
                    "example_text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text that will accompany the UI element displayed on this Registration Schema Block."
                    },
                    "required": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool that represents if this field is required for creation of a Schema Response."
                    },
                    "index": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Integer beginning at zero that represents the order of Registration Schema Block in the Registration Schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Schema Response Action.",
                  "properties": {
                    "schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the schema the the Registration Schema Block is on."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the  Registration Schema Block.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema Block."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "schema-blocks",
                  "id": "61b79f9eadbb5701424a2d5e",
                  "attributes": {
                    "registration_response_key": null,
                    "schema_block_group_key": "",
                    "block_type": "page-heading",
                    "display_text": "Background and Study Intent",
                    "help_text": "",
                    "required": false,
                    "index": 0
                  },
                  "relationships": {
                    "schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/",
                          "meta": {}
                        },
                        "data": {
                          "id": "6176c9d45e01f100091d4f94",
                          "type": "registration-schemas"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/": {
      "get": {
        "summary": "List all nodes",
        "description": "\nA paginated list of nodes, representing projects and components, on the OSF.\n\nThe returned nodes are those which are public or which the user has access to view.\n\nThe returned nodes are sorted by their `date_modified`, with the most recently updated nodes appearing first.\n\nRegistrations cannot be accessed through this endpoint (use the [registrations](#tag/Registrations) endpoints instead).\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 nodes. Each resource in the array is a separate node object and contains the full representation of the node, meaning additional requests to a node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/?filter[title]=reproducibility.\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, `preprint`, and `contributors`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public and preprint are boolean fields, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.",
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=ezcuj",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/ezcuj/",
                      "html": "https://osf.io/ezcuj/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-12-08T21:45:17.058000",
                      "title": "Reproducibility Project: Psychology",
                      "collection": false,
                      "registration": false,
                      "date_created": "2012-04-01T15:49:07.702000",
                      "current_user_can_comment": true,
                      "node_license": null,
                      "public": true,
                      "tags": [
                        "replication",
                        "reproducibility",
                        "open science",
                        "reproduction",
                        "psychological science",
                        "psychology",
                        "metascience",
                        "crowdsource"
                      ]
                    },
                    "type": "nodes",
                    "id": "ezcuj"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/nodes/?page=1954",
                  "prev": null,
                  "next": "https://api.osf.io/v2/nodes/?page=2",
                  "meta": {
                    "total": 19536,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a node",
        "description": "Creates a new node.\n\nOn the OSF, nodes are considered **projects** or **components**. The difference between a project and a component is that a project is a top-level node, and a component is a child of a project.\n\nAdditionally, nodes have a `category` field that includes **project** as an option. The categorization determines what icon is displayed with the node on the OSF, and helps with search organization. Projects (top-level nodes) may have a category other than project, and components (children) may have a category of **project**.\n#### Required\nRequired fields for creating a node include:\n\n&nbsp;&nbsp;&nbsp;&nbsp`title`\n\n&nbsp;&nbsp;&nbsp;&nbsp`category`\n\nNote: Nodes default to **private** unless the `public` field is explicitly set to **true** in the request payload.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Node",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the node entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the node entity (`nodes`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the node entity.",
                  "required": [
                    "title",
                    "category"
                  ],
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the node, as selected by project contributors."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the node."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a fork of another node."
                    },
                    "forked_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "A list of strings that describe this node, as entered by project contributors."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this node is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of this node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this node."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this node."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this node."
                    },
                    "draft_registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this node."
                    },
                    "forked_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node which this node was forked from, if this node is a fork."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this node."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the license that has been applied to this node."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this node."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of preprints that this node relates to."
                    },
                    "registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been created from this node."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                    },
                    "template_node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this node."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this node."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the node entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this node."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "nodes",
                  "attributes": {
                    "title": "An Excellent Project Title",
                    "category": "software"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_create",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Node",
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/nodes/{node_id}/": {
      "get": {
        "summary": "Retrieve a node",
        "description": "Retrieves the details of a given node (project or component).\n#### Permissions\nOnly project contributors may retrieve the details of a private node. Attempting to retreive a private node for which you are not a contributor will result in a **403 Forbidden** response.\n\nAuthentication is not required to view the details of a public node, as public nodes give read-only access to everyone.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_read",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Node",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the node entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the node entity (`nodes`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the node entity.",
                  "required": [
                    "title",
                    "category"
                  ],
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the node, as selected by project contributors."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the node."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a fork of another node."
                    },
                    "forked_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "A list of strings that describe this node, as entered by project contributors."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this node is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of this node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this node."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this node."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this node."
                    },
                    "draft_registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this node."
                    },
                    "forked_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node which this node was forked from, if this node is a fork."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this node."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the license that has been applied to this node."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this node."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of preprints that this node relates to."
                    },
                    "registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been created from this node."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                    },
                    "template_node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this node."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this node."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the node entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this node."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "nodes",
                  "attributes": {
                    "title": "An Excellent Project Title",
                    "category": "software"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "e81xl",
                  "type": "nodes",
                  "attributes": {
                    "category": "project",
                    "fork": false,
                    "preprint": false,
                    "description": "We are conducting a study to investigate the replicability of cancer biology studies. Selected results from a substantial number of high-profile papers in the field of cancer biology published between 2010-2012 are being replicated by the Science Exchange network.",
                    "current_user_permissions": [
                      "read"
                    ],
                    "date_modified": "2017-01-18T20:46:11.076000",
                    "title": "Reproducibility Project: Cancer Biology",
                    "collection": false,
                    "registration": false,
                    "date_created": "2013-10-08T23:31:56.153000",
                    "current_user_can_comment": true,
                    "node_license": null,
                    "public": true,
                    "tags": [
                      "cancer biology",
                      "reproducibility",
                      "replication",
                      "open science"
                    ]
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/nodes/e81xl/",
                    "html": "https://osf.io/e81xl/"
                  },
                  "relationships": {
                    "files": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/files/",
                          "meta": {}
                        }
                      }
                    },
                    "view_only_links": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/view_only_links/",
                          "meta": {}
                        }
                      }
                    },
                    "citation": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/citation/",
                          "meta": {}
                        }
                      }
                    },
                    "draft_registrations": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/draft_registrations/",
                          "meta": {}
                        }
                      }
                    },
                    "contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "forks": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/forks/",
                          "meta": {}
                        }
                      }
                    },
                    "root": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/",
                          "meta": {}
                        }
                      }
                    },
                    "identifiers": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/identifiers/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/comments/?filter%5Btarget%5D=e81xl",
                          "meta": {}
                        }
                      }
                    },
                    "registrations": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/registrations/",
                          "meta": {}
                        }
                      }
                    },
                    "node_links": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/node_links/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_nodes": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/relationships/linked_nodes/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/linked_nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "wikis": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/wikis/",
                          "meta": {}
                        }
                      }
                    },
                    "affiliated_institutions": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/relationships/institutions/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/institutions/",
                          "meta": {}
                        }
                      }
                    },
                    "children": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/children/",
                          "meta": {}
                        }
                      }
                    },
                    "preprints": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/preprints/",
                          "meta": {}
                        }
                      }
                    },
                    "logs": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/logs/",
                          "meta": {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a node",
        "description": "Updates a node by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nNodes can be updated with either a **PUT** or **PATCH** request. The `title` and `category` fields are mandatory in a **PUT** request, and optional in a **PATCH**.\n#### Permissions\nOnly write contributors may update a node. Attempting to update a node for which you do not have write access will result in a **403 Forbidden** response.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "nodes",
                  "id": "{node_id}",
                  "attributes": {
                    "description": "An updated abstract.",
                    "tags": [
                      "cancer biology",
                      "reproducibility"
                    ],
                    "public": true
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_partial_update",
        "x-response-schema": "Node",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a node",
        "description": "\nPermanently deletes a node. This action cannot be undone.\n#### Permissions\nOnly project administrators may delete a node. Attempting to delete a node for which you are not an administrator will result in a **403 Forbidden** response.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_delete",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/nodes/{node_id}/addons/": {
      "get": {
        "summary": "List all addons",
        "description": "\nA paginated list of addons connected to the given node or project.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of at most 10 addon objects. Each resource in the array is a separate addon object and contains the full representation of the addon, meaning additional requests to a addon's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_addons_list",
        "x-response-schema": "Addon",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Addon",
                "properties": {
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the addon entity.",
                    "properties": {
                      "url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The URL to the third-party service provider."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name of the third-party service provider."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the service provider."
                      },
                      "categories": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "documentation",
                            "storage",
                            "bibliography",
                            "other",
                            "security",
                            "citations"
                          ]
                        },
                        "readOnly": true,
                        "description": "List of categories this addon belongs to."
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the addon entity (`addons`)."
                  },
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the addon entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/addons/<provider_id>/"
                    },
                    "attributes": {
                      "folder_path": null,
                      "configured": false,
                      "external_account_id": null,
                      "folder_id": null,
                      "node_has_auth": false
                    },
                    "type": "node_addons",
                    "id": "<provider_id>"
                  },
                  {
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/addons/<another_provider_id>/"
                    },
                    "attributes": {
                      "folder_path": null,
                      "configured": false,
                      "external_account_id": null,
                      "folder_id": null,
                      "node_has_auth": false
                    },
                    "type": "node_addons",
                    "id": "<another_provider_id>"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/addons/{provider}/folders/": {
      "get": {
        "summary": "List all addon folders",
        "description": "\nA paginated list of folders retrieved from the associated third-party (provider) service.\n#### Permissions\nFolders are visible only to the user that authorized the addon.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of addon folder objects. Each resource in the array is a separate addon folder object and contains the full representation of the addon folder, meaning additional requests to a addon folder's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the provider"
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_addons_folders_list",
        "x-response-schema": "Addon Folder",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Addon",
                "properties": {
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the addon entity.",
                    "properties": {
                      "url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The URL to the third-party service provider."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name of the third-party service provider."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the service provider."
                      },
                      "categories": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "documentation",
                            "storage",
                            "bibliography",
                            "other",
                            "security",
                            "citations"
                          ]
                        },
                        "readOnly": true,
                        "description": "List of categories this addon belongs to."
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the addon entity (`addons`)."
                  },
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the addon entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "root": "https://api.osf.io/v2/nodes/<node_id>/addons/<provider_id>/folders/",
                      "children": "https://api.osf.io/v2/nodes/<node_id>/addons/<provider_id>/folders/?path=/&id=/"
                    },
                    "attributes": {
                      "path": "/",
                      "kind": "folder",
                      "provider": "<provider_id>",
                      "name": "/ ()",
                      "folder_id": "/"
                    },
                    "type": "node_addon_folders",
                    "id": "/"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 1000
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/addons/{provider}/": {
      "get": {
        "summary": "Retrieve an addon",
        "description": "Retrieve details of an individual addon connected to this node.\n#### Permissions\nNodeSettings that are attached to public nodes will give read-only access to everyone. Private nodes require explicit read permission. Write and admin access are the same for public and private nodes. Administrators on a parent node have implicit read permissions for all child nodes.\nAny users with write or admin access to the node are able to deauthorize an enabled addon, but only the addon authorizer is able to change the configuration (i.e. selected folder) of an already-configured NodeSettings entity.\n#### Returns\nReturns a JSON object with a `data` key containing the details of the requested addon, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the addon."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_addon_read",
        "x-response-schema": "Addon",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Node Addon",
              "required": [
                "id",
                "type"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the node addon entity (`node_addons`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the node addon entity.",
                  "properties": {
                    "external_account_id": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The ID of the associated node addon account, if any."
                    },
                    "folder_id": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The ID of the linked folder from the addon provider."
                    },
                    "folder_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The folder path of the linked folder from the addon provider. Google Drive specific"
                    },
                    "configured": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node has been configured with an addon folder."
                    },
                    "enabled": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node has a NodeSettings object associated with it."
                    },
                    "node_has_auth": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node is fully authorized to use this node addon."
                    },
                    "url": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "An external link specific to the addon provider."
                    },
                    "label": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A label specific to the addon provider."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "self"
                  ],
                  "description": "URLs to alternative representations of the node addon entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the the canonical API endpoint for this node addon."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "http://api.osf.io/v2/nodes/gaz5n/addons/box/"
                  },
                  "attributes": {
                    "folder_path": null,
                    "configured": false,
                    "external_account_id": null,
                    "folder_id": null,
                    "node_has_auth": false
                  },
                  "type": "node_addons",
                  "id": "box"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an addon",
        "description": "Updates a node addon by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nNode addon can be updated with either a **PUT** or **PATCH** request. The `external_account_id`, `enabled`, and `folder_id` fields are mandatory in a **PUT**, and optional in **PATCH**. Non-string values will be accepted and stringified, however we make no promises about the stringification output.\n\nTo delete or deauthorize a node addon, issue a **PUT** with all fields set to `null` or `False`, or a **PATCH** with enabled set `False`.\n#### Permissions\nNodeSettings that are attached to public nodes will give read-only access to everyone. Private nodes require explicit read permission. Write and admin access are the same for public and private nodes. Administrators on a parent node have implicit read permissions for all child nodes.\nAny users with write or admin access to the node are able to deauthorize an enabled addon, but only the addon authorizer is able to change the configuration (i.e. selected folder) of an already-configured NodeSettings entity.\n\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated node addon, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the addon."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "node_addons",
                  "id": "{provider}",
                  "attributes": {
                    "external_account_id": "{account_id}",
                    "folder_id": "{folder_id}",
                    "folder_path": "{folder_path}",
                    "url": "{url}",
                    "label": "{label}"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_node_addon_update",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/nodes/{node_id}/children/": {
      "get": {
        "summary": "List all child nodes",
        "description": "\nA paginated list of the next level child nodes for the given node. The returned nodes are sorted by their `date_modified`, with the most recently updated child nodes appearing first.\n\nThe list will include child nodes that are public, as well as child nodes that are private, if the authenticated user has permission to view them.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 child nodes. If the given node has zero child nodes, the `data` key will contain an empty array. Each resource in the array is a separate node object and contains the full representation of the child node, meaning additional requests to the child node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/children/?filter[title]=reproducibility.\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, `preprint`, and `contributors`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public and preprint are boolean fields, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_children_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/comments/?filter%5Btarget%5D=ezum7",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/ezum7/",
                      "html": "https://osf.io/ezum7/"
                    },
                    "attributes": {
                      "category": "communication",
                      "fork": false,
                      "preprint": true,
                      "description": "Reproducibility is a defining feature of science, but the extent to which it characterizes current research is unknown. We conducted replications of 100 experimental and correlational studies published in three psychology journals using high-powered designs and original materials when available. Replication effects were half the magnitude of original effects, representing a substantial decline. Ninety-seven percent of original studies had statistically significant results. Thirty-six percent of replications had statistically significant results; 47% of original effect sizes were in the 95% confidence interval of the replication effect size; 39% of effects were subjectively rated to have replicated the original result; and if no bias in original results is assumed, combining original and replication results left 68% with statistically significant effects. Correlational tests suggest that replication success was better predicted by the strength of original evidence than by characteristics of the original and replication teams.",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-11-02T21:25:12.572000",
                      "title": "Estimating the Reproducibility of Psychological Science",
                      "collection": false,
                      "registration": false,
                      "date_created": "2015-07-20T17:42:16.496000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": [
                        "replication",
                        "reproducibility",
                        "effect size"
                      ]
                    },
                    "type": "nodes",
                    "id": "ezum7"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/nodes/ezcuj/children/?page=5",
                  "prev": null,
                  "next": "https://api.osf.io/v2/nodes/ezcuj/children/?page=2",
                  "meta": {
                    "total": 49,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a child node",
        "description": "Creates a new child node.\n\nNote: Creating a child node via this endpoint will function the same as creating a node via the node list endpoint, but the child node will have the given node set as its parent.\n#### Permissions\nOnly write contributors may create children nodes.\n#### Required\nRequired fields for creating a node include:\n\n&nbsp;&nbsp;&nbsp;&nbsp`title`\n\n&nbsp;&nbsp;&nbsp;&nbsp`category`\n\nNote: nodes default to **private** unless the `public` field is explicitly set to **true** in the request payload.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Node",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the node entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the node entity (`nodes`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the node entity.",
                  "required": [
                    "title",
                    "category"
                  ],
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the node, as selected by project contributors."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the node."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a fork of another node."
                    },
                    "forked_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "A list of strings that describe this node, as entered by project contributors."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this node is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of this node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this node."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this node."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this node."
                    },
                    "draft_registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this node."
                    },
                    "forked_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node which this node was forked from, if this node is a fork."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this node."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the license that has been applied to this node."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this node."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of preprints that this node relates to."
                    },
                    "registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been created from this node."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                    },
                    "template_node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this node."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this node."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the node entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this node."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "nodes",
                  "attributes": {
                    "title": "An Excellent Project Title",
                    "category": "software"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_children_create",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/nodes/{node_id}/citation/": {
      "get": {
        "summary": "Retrieve citation details",
        "description": "The citation details for a node, in CSL format.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the details necessary for the node citation.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_citation_list",
        "x-response-schema": "Citation Detail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Citation Detail",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the entity being cited."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation entity (either `node-citation`, `preprint-citation`, or `registration-citation`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation entity.",
                  "properties": {
                    "author": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The list of bibliographic authors, represented as dictionaries of their given and family names, for the entitiy being cited."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The DOI for the entity being cited, if one exists."
                    },
                    "publisher": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The publisher of the entity being cited. For nodes and registrations, the publisher is the 'Open Science Framework'. For preprints, the publisher is the same as the preprint provider."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the entity being cited."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the citation entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the entity that is being cited."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "bg4di",
                  "type": "node-citation",
                  "attributes": {
                    "publisher": "Open Science Framework",
                    "author": [
                      {
                        "given": "Timothy M",
                        "family": "Errington"
                      },
                      {
                        "given": "Nicole",
                        "family": "Vasilevsky"
                      },
                      {
                        "given": "Melissa A",
                        "family": "Haendel"
                      }
                    ],
                    "type": "webpage",
                    "title": "Identification Analysis of RP:CB"
                  },
                  "links": {
                    "self": "osf.io/bg4di"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/citation/{style_id}/": {
      "get": {
        "summary": "Retrieve a styled citation",
        "description": "The citation for a node in a specific style.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the node citation, in the requested style.",
        "parameters": [
          {
            "description": "The unique identifier of the citation style.",
            "required": true,
            "type": "string",
            "name": "style_id",
            "in": "path"
          },
          {
            "description": "The unique identifier of the node.",
            "required": true,
            "type": "string",
            "name": "node_id",
            "in": "path"
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_citation_read",
        "x-response-schema": "Styled Citation",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Styled Citation",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the citation style, e.g. APA."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation style entity (`styled-citations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation style entity.",
                  "properties": {
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The complete entity citation in the requested style."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {},
                  "attributes": {
                    "citation": "Aarts, A. A., Anderson, C. J., Anderson, J., van Assen, M. A. L. M., Attridge, P. R., Attwood, A. S., … Grange, J. (2016, December 8). Reproducibility Project: Psychology. Retrieved from osf.io/ezcuj"
                  },
                  "type": "styled-citations",
                  "id": "apa"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/comments/": {
      "get": {
        "summary": "List all comments",
        "description": "\nA paginated list of comments related to a given node.\n\nThe returned comments are sorted by their creation date, with the most recent comments appearing first.\n#### Permissions\nComments on public nodes are given read-only access to everyone.\n\nIf the node comment-level is `private`, only contributors have permission to comment.\n\nIf the comment-level is `public`, any logged-in OSF user can comment.\n\nComments on private nodes are only visible to contributors and administrators on the parent node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include comments that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/comments/?filter[target_id]=jg7sezmdnt93\n\nNodes may be filtered by their `deleted`, `target_id`, `date_created`, `date_modified`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public and preprint are boolean fields, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting `true` or `false` in the query will cause the match to fail.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_comments_list",
        "x-response-schema": "Comment",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Comment",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the comment entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the comment entity (`comments`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the comment entity.",
                    "properties": {
                      "can_edit": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to edit this comment"
                      },
                      "content": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The content of the comment."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the comment was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the comment was last modified, as an iso8601 formatted timestamp."
                      },
                      "modified": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment has been edited."
                      },
                      "deleted": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment is deleted."
                      },
                      "is_abuse": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment is flagged or confirmed spam."
                      },
                      "is_ham": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not an admin checked the legitimacy of this comment."
                      },
                      "has_report": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment the current user reported this as spam."
                      },
                      "has_children": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment has replies."
                      },
                      "page": {
                        "description": "The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the comment entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the node the comment is on."
                      },
                      "replies": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the replies to the comment."
                      },
                      "target": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the target of the comment."
                      },
                      "reports": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the reports connected to the comment."
                      },
                      "user": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the user who created the comment."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the comment entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the comment."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "comments",
                    "attributes": {
                      "content": "comment content"
                    },
                    "relationships": {
                      "target": {
                        "data": {
                          "type": "{target_type}",
                          "id": "{target_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "replies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=jg7sezmdnt93",
                            "meta": {}
                          }
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {
                              "type": "nodes"
                            }
                          }
                        }
                      },
                      "reports": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/comments/jg7sezmdnt93/reports/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/6yc8z/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/comments/jg7sezmdnt93/"
                    },
                    "attributes": {
                      "can_edit": false,
                      "date_modified": "2016-04-01T04:45:44.123000",
                      "deleted": false,
                      "is_ham": false,
                      "has_children": false,
                      "modified": false,
                      "content": "We have published a Bayesian reanalysis of this project at PLOS ONE: http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0149794\n\nI explain some of the context on my blog: http://alexanderetz.com/2016/02/26/the-bayesian-rpp-take-2/\n\nPlease note that the analysis we use in this paper is very different from the analysis used in the blog I posted in the previous comment, so the results are different as well.",
                      "has_report": false,
                      "is_abuse": false,
                      "date_created": "2016-02-27T13:50:24.240000",
                      "page": "node"
                    },
                    "type": "comments",
                    "id": "jg7sezmdnt93"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "replies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=23pk9",
                            "meta": {}
                          }
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {
                              "type": "nodes"
                            }
                          }
                        }
                      },
                      "reports": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/comments/23pk9/reports/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/6yc8z/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/comments/23pk9/"
                    },
                    "attributes": {
                      "can_edit": false,
                      "date_modified": "2016-04-01T04:45:37.437000",
                      "deleted": false,
                      "is_ham": false,
                      "has_children": false,
                      "modified": null,
                      "content": "In this blog http://wp.me/p4sgtg-o6 I conduct a Bayesian Re-analysis of the Reproducibility Project that gives a graded measure of replication success. In an attempt to avoid dichotomous success/fail replication outcomes, I calculate a continous outcome (Bayes factor) that answers the question, does the replication result fit more with the original reported effect or a null effect? Many replications are strong successes, many are strong failures, and there are many that lie somewhere in between.",
                      "has_report": false,
                      "is_abuse": false,
                      "date_created": "2015-08-30T14:50:21.093000",
                      "page": "node"
                    },
                    "type": "comments",
                    "id": "23pk9"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a comment",
        "description": "Create a comment on a given node overview page or a reply to a comment on that node.\n\nTo create a comment on the node overview page, the target `type` would be \"nodes\" and the target `id` would be the node `id`.\n\nTo reply to a comment on this node, the target `type` would be \"comments\" and the target `id` would be the `id` of the comment to reply to.\n#### Required\nA relationship object with a `data` key, containing the target (`comments` or `nodes`) type and a target `id` is required.\nIn addition, the `content` attribute describing the relationship between the node and the comment is required.\n#### Returns\nReturns a JSON object with a data key containing the representation of the new comment, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "node_id",
            "description": "The unique identifier of the node you want to comment on."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Comment",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the comment entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the comment entity (`comments`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the comment entity.",
                  "properties": {
                    "can_edit": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to edit this comment"
                    },
                    "content": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The content of the comment."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the comment was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the comment was last modified, as an iso8601 formatted timestamp."
                    },
                    "modified": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment has been edited."
                    },
                    "deleted": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment is deleted."
                    },
                    "is_abuse": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment is flagged or confirmed spam."
                    },
                    "is_ham": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not an admin checked the legitimacy of this comment."
                    },
                    "has_report": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment the current user reported this as spam."
                    },
                    "has_children": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment has replies."
                    },
                    "page": {
                      "description": "The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the comment entity.",
                  "properties": {
                    "node": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the node the comment is on."
                    },
                    "replies": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the replies to the comment."
                    },
                    "target": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the target of the comment."
                    },
                    "reports": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the reports connected to the comment."
                    },
                    "user": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the user who created the comment."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the comment entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the comment."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "comments",
                  "attributes": {
                    "content": "comment content"
                  },
                  "relationships": {
                    "target": {
                      "data": {
                        "type": "{target_type}",
                        "id": "{target_id}"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_comment_create",
        "x-response-schema": "Comment",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/nodes/{node_id}/contributors/": {
      "get": {
        "summary": "List all contributors",
        "description": "A paginated list of the node's contributors, sorted by their index.\n\nContributors are users who can make changes to the node or, in the case of private nodes, have read access to the node.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n\nNote that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 contributors. Each resource in the array contains the full representation of the contributor, meaning additional requests to a contributor's detail view are not necessary. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/y9jdt/contributors/?filter[bibliographic]=true.\n\nContributors may be filtered by their `bibliographic` and `permission` attributes.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_contributors_list",
        "x-response-schema": "Contributor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Contributor",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the contributor entity (`contributors`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the contributor entity.",
                    "properties": {
                      "bibliographic": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                      },
                      "index": {
                        "type": "integer",
                        "readOnly": false,
                        "description": "The position of this contributor in the list of project contributors and in project citations."
                      },
                      "permission": {
                        "type": "string",
                        "enum": [
                          "read",
                          "write",
                          "admin"
                        ],
                        "readOnly": false,
                        "description": "The permission level of the contributor. The default value is 'write'."
                      },
                      "unregistered_contributor": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                    "required": [
                      "node",
                      "user"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the contributor entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the the canonical API endpoint for the contributor."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "contributors",
                    "attributes": {},
                    "relationships": {
                      "user": {
                        "data": {
                          "type": "users",
                          "id": "{user_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/y9jdt/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/typ46/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/y9jdt/contributors/typ46/"
                    },
                    "embeds": {
                      "users": {
                        "data": {
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/typ46/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "self": {
                                  "href": "https://api.osf.io/v2/users/typ46/relationships/institutions/",
                                  "meta": {}
                                },
                                "related": {
                                  "href": "https://api.osf.io/v2/users/typ46/institutions/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "self": "https://api.osf.io/v2/users/typ46/",
                            "html": "https://osf.io/typ46/",
                            "profile_image": "https://secure.gravatar.com/avatar/3dd8757ba100b8406413706886243811?d=identicon"
                          },
                          "attributes": {
                            "family_name": "Geiger",
                            "suffix": "",
                            "locale": "en_us",
                            "date_registered": "2014-03-18T19:11:57.252000",
                            "middle_names": "J.",
                            "given_name": "Brian",
                            "full_name": "Brian J. Geiger",
                            "active": true,
                            "timezone": "America/New_York"
                          },
                          "type": "users",
                          "id": "typ46"
                        }
                      }
                    },
                    "attributes": {
                      "index": 0,
                      "unregistered_contributor": null,
                      "bibliographic": true,
                      "permission": "admin"
                    },
                    "type": "contributors",
                    "id": "y9jdt-typ46"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 9,
                    "per_page": 10,
                    "total_bibliographic": 1
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a contributor",
        "description": "Adds a contributor to a node, effectively creating a relationship between the node and a user.\n\nContributors are users who can make changes to the node or, in the case of private nodes, have read access to the node.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\" contributors. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n#### Permissions\nOnly project administrators can add contributors to a node.\n#### Required\nA relationship object with a `data` key, containing the `users` type and valid user ID is required.\n\nAll attributes describing the relationship between the node and the user are optional.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the new contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Contributor",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the contributor entity (`contributors`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the contributor entity.",
                  "properties": {
                    "bibliographic": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                    },
                    "index": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The position of this contributor in the list of project contributors and in project citations."
                    },
                    "permission": {
                      "type": "string",
                      "enum": [
                        "read",
                        "write",
                        "admin"
                      ],
                      "readOnly": false,
                      "description": "The permission level of the contributor. The default value is 'write'."
                    },
                    "unregistered_contributor": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                  "required": [
                    "node",
                    "user"
                  ],
                  "properties": {
                    "node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                    },
                    "user": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the contributor entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the the canonical API endpoint for the contributor."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "contributors",
                  "attributes": {},
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "{user_id}"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_contributors_create",
        "x-response-schema": "Contributor",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/nodes/{node_id}/contributors/{user_id}/": {
      "get": {
        "summary": "Retrieve a contributor",
        "description": "Retrieves the details of a given contributor.\n\nContributors are users who can make changes to the node or, in the case of private nodes, have read access to the node.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_contributors_read",
        "x-response-schema": "Contributor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Contributor",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the contributor entity (`contributors`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the contributor entity.",
                    "properties": {
                      "bibliographic": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                      },
                      "index": {
                        "type": "integer",
                        "readOnly": false,
                        "description": "The position of this contributor in the list of project contributors and in project citations."
                      },
                      "permission": {
                        "type": "string",
                        "enum": [
                          "read",
                          "write",
                          "admin"
                        ],
                        "readOnly": false,
                        "description": "The permission level of the contributor. The default value is 'write'."
                      },
                      "unregistered_contributor": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                    "required": [
                      "node",
                      "user"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the contributor entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the the canonical API endpoint for the contributor."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "contributors",
                    "attributes": {},
                    "relationships": {
                      "user": {
                        "data": {
                          "type": "users",
                          "id": "{user_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/y9jdt/",
                          "meta": {}
                        }
                      }
                    },
                    "users": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/typ46/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/nodes/y9jdt/contributors/typ46/"
                  },
                  "embeds": {
                    "users": {
                      "data": {
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/typ46/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "self": {
                                "href": "https://api.osf.io/v2/users/typ46/relationships/institutions/",
                                "meta": {}
                              },
                              "related": {
                                "href": "https://api.osf.io/v2/users/typ46/institutions/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "self": "https://api.osf.io/v2/users/typ46/",
                          "html": "https://osf.io/typ46/",
                          "profile_image": "https://secure.gravatar.com/avatar/3dd8757ba100b8406413706886243811?d=identicon"
                        },
                        "attributes": {
                          "family_name": "Geiger",
                          "suffix": "",
                          "locale": "en_us",
                          "date_registered": "2014-03-18T19:11:57.252000",
                          "middle_names": "J.",
                          "given_name": "Brian",
                          "full_name": "Brian J. Geiger",
                          "active": true,
                          "timezone": "America/New_York"
                        },
                        "type": "users",
                        "id": "typ46"
                      }
                    }
                  },
                  "attributes": {
                    "index": 0,
                    "unregistered_contributor": null,
                    "bibliographic": true,
                    "permission": "admin"
                  },
                  "type": "contributors",
                  "id": "y9jdt-typ46"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a contributor",
        "description": "Updates a contributor by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nContributors can be updated with either a **PUT** or **PATCH** request. Since this endpoint has no mandatory attributes, PUT and PATCH are functionally the same.\n#### Permissions\nOnly project administrators can update the contributors on a node.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\nIf the given user is not already in the contributor list, a 404 Not Found error will be returned. A node must always have at least one admin, and any attempt to downgrade the permissions of a sole admin will result in a 400 Bad Request error.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Contributor",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the contributor entity (`contributors`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the contributor entity.",
                  "properties": {
                    "bibliographic": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                    },
                    "index": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The position of this contributor in the list of project contributors and in project citations."
                    },
                    "permission": {
                      "type": "string",
                      "enum": [
                        "read",
                        "write",
                        "admin"
                      ],
                      "readOnly": false,
                      "description": "The permission level of the contributor. The default value is 'write'."
                    },
                    "unregistered_contributor": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                  "required": [
                    "node",
                    "user"
                  ],
                  "properties": {
                    "node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                    },
                    "user": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the contributor entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the the canonical API endpoint for the contributor."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "contributors",
                  "attributes": {},
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "{user_id}"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_contributors_partial_update",
        "x-response-schema": "Contributor",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a contributor",
        "description": "Removes a contributor from a node. This request only removes the relationship between the node and the user, it does not delete the user itself.\n\nA node must always have at least one admin, and attempting to remove the only admin from a node will result in a **400 Bad Request** response.\n#### Permissions\nA user can remove themselves as a node contributor. Otherwise, only project administrators can remove contributors.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_contributors_delete",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/nodes/{node_id}/draft_registrations/": {
      "get": {
        "summary": "List all draft registrations",
        "description": "A paginated list of all of the draft registrations of a given node.\n\nDraft registrations contain the supplemental registration questions that accompany a registration. A registration is a frozen version of the project that can never be edited or deleted, but can be withdrawn.\n\nYour original project remains editable but will now have the draft registration linked to it.\n#### Permissions\nOnly project administrators may view draft registrations.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 draft registrations. Each resource in the array is a separate draft registration object and contains the full representation of the draft registration, meaning additional requests to a draft registration's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_draft_registrations_list",
        "x-response-schema": "Draft Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Draft Registration",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the draft registration entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the draft registration entity.",
                    "required": [
                      "datetime_initiated",
                      "datetime_updated",
                      "registration_supplement"
                    ],
                    "properties": {
                      "datetime_initiated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                      },
                      "datetime_updated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                      },
                      "registration_metadata": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary of question IDs and responses from the registration schema."
                      },
                      "registration_supplement": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The ID of an active registration schema that this registration will conform to."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "required": [
                      "branched_from",
                      "initiator",
                      "registration_schema"
                    ],
                    "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                    "properties": {
                      "branched_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that this draft registration was created from."
                      },
                      "initiator": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the user who initiated the draft registration."
                      },
                      "registration_schema": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the detailed registration schema that this draft conforms to."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "required": [
                      "html"
                    ],
                    "description": "URLs to alternative representations of the draft registration entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the draft registration's page on the OSF."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "draft_registrations",
                    "attributes": {
                      "registration_supplement": "{schema_id}"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "",
                    "type": "draft_registrations",
                    "attributes": {
                      "datetime_initiated": "",
                      "datetime_updated": "",
                      "registration_metadata": {},
                      "registration_supplement": ""
                    },
                    "relationships": {
                      "branched_from": {
                        "links": {
                          "related": {
                            "href": "",
                            "meta": {}
                          }
                        }
                      },
                      "initiator": {
                        "links": {
                          "related": {
                            "href": "",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "html": ""
                    }
                  }
                ],
                "links": {
                  "first": "",
                  "last": "",
                  "prev": "",
                  "next": "",
                  "meta": {
                    "total": "",
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a draft registration",
        "description": "Initiate a draft registration of the current node.\nDraft registrations contain the supplemental registration questions that accompany a registration. A registration is a frozen version of the project that can never be edited or deleted, but can be withdrawn.\n\nYour original project remains editable but will now have the draft registration linked to it.\n#### Permissions\nOnly project administrators may view create registrations.\n#### Required\nRequired fields for creating a draft registration include:\n\n&nbsp;&nbsp;&nbsp;&nbsp`registration_supplement`\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Draft Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the draft registration entity.",
                  "required": [
                    "datetime_initiated",
                    "datetime_updated",
                    "registration_supplement"
                  ],
                  "properties": {
                    "datetime_initiated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                    },
                    "datetime_updated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                    },
                    "registration_metadata": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary of question IDs and responses from the registration schema."
                    },
                    "registration_supplement": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The ID of an active registration schema that this registration will conform to."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "required": [
                    "branched_from",
                    "initiator",
                    "registration_schema"
                  ],
                  "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                  "properties": {
                    "branched_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this draft registration was created from."
                    },
                    "initiator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user who initiated the draft registration."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the detailed registration schema that this draft conforms to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "html"
                  ],
                  "description": "URLs to alternative representations of the draft registration entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the draft registration's page on the OSF."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "draft_registrations",
                  "attributes": {
                    "registration_supplement": "{schema_id}"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_draft_registrations_create",
        "x-response-schema": "Draft Registration",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/nodes/{node_id}/draft_registrations/{draft_id}/": {
      "get": {
        "summary": "Retrieve a draft registration",
        "description": "Retrieve the details of a given draft registration.\nDraft registrations contain the supplemental registration questions that accompany a registration. A registration is a frozen version of the project that can never be edited or deleted, but can be withdrawn.\n\nYour original project remains editable but will now have the draft registration linked to it.\n#### Permissions\nOnly project administrators may view draft registrations.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_draft_registrations_read",
        "x-response-schema": "Draft Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Draft Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the draft registration entity.",
                  "required": [
                    "datetime_initiated",
                    "datetime_updated",
                    "registration_supplement"
                  ],
                  "properties": {
                    "datetime_initiated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                    },
                    "datetime_updated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                    },
                    "registration_metadata": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary of question IDs and responses from the registration schema."
                    },
                    "registration_supplement": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The ID of an active registration schema that this registration will conform to."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "required": [
                    "branched_from",
                    "initiator",
                    "registration_schema"
                  ],
                  "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                  "properties": {
                    "branched_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this draft registration was created from."
                    },
                    "initiator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user who initiated the draft registration."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the detailed registration schema that this draft conforms to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "html"
                  ],
                  "description": "URLs to alternative representations of the draft registration entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the draft registration's page on the OSF."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "draft_registrations",
                  "attributes": {
                    "registration_supplement": "{schema_id}"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "",
                    "type": "draft_registrations",
                    "attributes": {
                      "datetime_initiated": "",
                      "datetime_updated": "",
                      "registration_metadata": {},
                      "registration_supplement": ""
                    },
                    "relationships": {
                      "branched_from": {
                        "links": {
                          "related": {
                            "href": "",
                            "meta": {}
                          }
                        }
                      },
                      "initiator": {
                        "links": {
                          "related": {
                            "href": "",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "html": ""
                    }
                  }
                ],
                "links": {
                  "first": "",
                  "last": "",
                  "prev": "",
                  "next": "",
                  "meta": {
                    "total": "",
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a draft registration",
        "description": "Updates a draft registration by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nDraft registrations contain the supplemental registration questions that accompany a registration. Answer the questions in the draft registration supplement by sending update requests until you are ready to submit the draft.\n\nThe registration supplement of a draft registration cannot be updated after the draft has been created.\n\nWhen updating a draft registration, `registration_metadata` is required. It must be a dictionary with keys as question ids in the registration form, and values as nested dictionaries matching the specific format in the [registration schema](TODO: link me pls).\n\nIf a question is multiple-choice, the question response must exactly match one of the possible choices.\n#### Permissions\nOnly project administrators may update draft registrations.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Draft Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the draft registration entity.",
                  "required": [
                    "datetime_initiated",
                    "datetime_updated",
                    "registration_supplement"
                  ],
                  "properties": {
                    "datetime_initiated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                    },
                    "datetime_updated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                    },
                    "registration_metadata": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary of question IDs and responses from the registration schema."
                    },
                    "registration_supplement": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The ID of an active registration schema that this registration will conform to."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "required": [
                    "branched_from",
                    "initiator",
                    "registration_schema"
                  ],
                  "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                  "properties": {
                    "branched_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this draft registration was created from."
                    },
                    "initiator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user who initiated the draft registration."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the detailed registration schema that this draft conforms to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "html"
                  ],
                  "description": "URLs to alternative representations of the draft registration entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the draft registration's page on the OSF."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "draft_registrations",
                  "attributes": {
                    "registration_supplement": "{schema_id}"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_draft_registrations_partial_update",
        "x-response-schema": "Draft Registration",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a draft registration",
        "description": "Permanently deletes a draft registration. A draft that has already been registered cannot be deleted.\n#### Permissions\nOnly project administrators may delete draft registrations.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_draft_registrations_delete",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/nodes/{node_id}/files/": {
      "get": {
        "summary": "List all storage providers",
        "description": "List of all storage providers that are configured for this node\n\nUsers of the OSF may access their data on a [number of cloud-storage services](https://api.osf.io/v2/#storage-providers) that have integrations with the OSF. We call these **providers**. By default, every node has access to the OSF-provided storage but may use as many of the supported providers as desired.\n\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of files. Each resource in the array is a separate file object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nNote: In the OSF filesystem model, providers are treated as folders, but with special properties that distinguish them from regular folders. Every provider folder is considered a root folder, and may not be deleted through the regular file API.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_providers_list",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file entity (`files`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the file entity.",
                    "properties": {
                      "extra": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The kind of files object it is (`file` or `folder`)."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Name of the file"
                      },
                      "last_touched": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Unix-style path to the file relative to the provider root."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                      },
                      "current_version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Version number of the file."
                      },
                      "delete_allowed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not deletion of the file is allowed."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the file provider (e.g., `osfstorage`)"
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier for this file entity for this project and storage provider."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user is allowed to post comments."
                      },
                      "guid": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                      },
                      "checkout": {
                        "type": "string",
                        "readOnly": true,
                        "description": "SOON TO BE DEPRECATED, see relationships checkout."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe this file, as entered by project contributors."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node the file is on."
                      },
                      "checkout": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user who checked out the file."
                      },
                      "comments": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the comments on the file."
                      },
                      "versions": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the versions of the file."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file entity.",
                    "properties": {
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the page to view a file's information or a folder's contents."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the file."
                      },
                      "move": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file moves."
                      },
                      "new_folder": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                      },
                      "upload": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file uploads."
                      },
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file downloads."
                      },
                      "delete": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file deletions."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "storage_addons": "https://api.osf.io/v2/addons/?filter%5Bcategories%5D=storage",
                      "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/",
                      "new_folder": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/?kind=folder"
                    },
                    "attributes": {
                      "node": "ezcuj",
                      "path": "/",
                      "kind": "folder",
                      "name": "osfstorage",
                      "provider": "osfstorage"
                    },
                    "type": "files",
                    "id": "ezcuj:osfstorage"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/files/providers/{provider}/": {
      "get": {
        "summary": "Retrieve a storage provider",
        "description": "Retrieves the details of a storage provider enabled on this node.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested file object, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the storage provider."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_providers_read",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "File",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the file entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the file entity (`files`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the file entity.",
                  "properties": {
                    "extra": {
                      "type": "object",
                      "readOnly": true,
                      "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                    },
                    "kind": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The kind of files object it is (`file` or `folder`)."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "Name of the file"
                    },
                    "last_touched": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                    },
                    "materialized_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Unix-style path to the file relative to the provider root."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                    },
                    "current_version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Version number of the file."
                    },
                    "delete_allowed": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not deletion of the file is allowed."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The id of the file provider (e.g., `osfstorage`)"
                    },
                    "path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique identifier for this file entity for this project and storage provider."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user is allowed to post comments."
                    },
                    "guid": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                    },
                    "checkout": {
                      "type": "string",
                      "readOnly": true,
                      "description": "SOON TO BE DEPRECATED, see relationships checkout."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe this file, as entered by project contributors."
                    },
                    "size": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Size of the file in bytes."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "node": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    },
                    "checkout": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user who checked out the file."
                    },
                    "comments": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the comments on the file."
                    },
                    "versions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the versions of the file."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the file entity.",
                  "properties": {
                    "info": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the page to view a file's information or a folder's contents."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the file."
                    },
                    "move": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file moves."
                    },
                    "new_folder": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                    },
                    "upload": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file uploads."
                    },
                    "download": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file downloads."
                    },
                    "delete": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file deletions."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "storage_addons": "https://api.osf.io/v2/addons/?filter%5Bcategories%5D=storage",
                      "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/",
                      "new_folder": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/?kind=folder"
                    },
                    "attributes": {
                      "node": "ezcuj",
                      "path": "/",
                      "kind": "folder",
                      "name": "osfstorage",
                      "provider": "osfstorage"
                    },
                    "type": "files",
                    "id": "ezcuj:osfstorage"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/files/{provider}/": {
      "get": {
        "summary": "List all node files",
        "description": "List of all the files/folders that are attached to your project for a given storage provider.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of files. Each resource in the array is a separate file object and contains the full representation of the file.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include files that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/?filter[kind]=file\n\nNode files may be filtered by `id`, `name`, `node`, `kind`, `path`, `provider`, `size`, and `last_touched`.\n\n### Waterbutler API actions\n\nFiles can be modified through the Waterbutler API routes found in `links` (`new_folder`, `move`, `upload`, `download`, and `delete`).\n\n#### Download (files)\n\nTo download a file, issue a GET request against the download link. The response will have the Content-Disposition header set, which will will trigger a download in a browser.\n\n#### Create Subfolder (folders)\n\nYou can create a subfolder of an existing folder by issuing a PUT request against the new_folder link. The ?kind=folder portion of the query parameter is already included in the new_folder link. The name of the new subfolder should be provided in the name query parameter. The response will contain a WaterButler folder entity. If a folder with that name already exists in the parent directory, the server will return a 409 Conflict error response.\n\n#### Upload New File (folders)\n\nTo upload a file to a folder, issue a PUT request to the folder's upload link with the raw file data in the request body, and the kind and name query parameters set to 'file' and the desired name of the file. The response will contain a WaterButler file entity that describes the new file. If a file with the same name already exists in the folder, the server will return a 409 Conflict error response.\n\n#### Update Existing File (file)\n\nTo update an existing file, issue a PUT request to the file's upload link with the raw file data in the request body and the kind query parameter set to \"file\". The update action will create a new version of the file. The response will contain a WaterButler file entity that describes the updated file.\n\n#### Rename (files, folders)\n\nTo rename a file or folder, issue a POST request to the move link with the action body parameter set to \"rename\" and the rename body parameter set to the desired name. The response will contain either a folder entity or file entity with the new name.\n\n#### Move & Copy (files, folders)\n\nMove and copy actions both use the same request structure, a POST to the move url, but with different values for the action body parameters. The path parameter is also required and should be the OSF path attribute of the folder being written to. The rename and conflict parameters are optional. If you wish to change the name of the file or folder at its destination, set the rename parameter to the new name. The conflict param governs how name clashes are resolved. Possible values are replace and keep. replace is the default and will overwrite the file that already exists in the target folder. keep will attempt to keep both by adding a suffix to the new file's name until it no longer conflicts. The suffix will be ' (x)' where x is a increasing integer starting from 1. This behavior is intended to mimic that of the OS X Finder. The response will contain either a folder entity or file entity with the new name.\nFiles and folders can also be moved between nodes and providers. The resource parameter is the id of the node under which the file/folder should be moved. It must agree with the path parameter, that is the path must identify a valid folder under the node identified by resource. Likewise, the provider parameter may be used to move the file/folder to another storage provider, but both the resource and path parameters must belong to a node and folder already extant on that provider. Both resource and provider default to the current node and providers.\nIf a moved/copied file is overwriting an existing file, a 200 OK response will be returned. Otherwise, a 201 Created will be returned.\n\n#### Delete (file, folders)\n\nTo delete a file or folder send a DELETE request to the delete link. Nothing will be returned in the response body.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the storage provider."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_files_list",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file entity (`files`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the file entity.",
                    "properties": {
                      "extra": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The kind of files object it is (`file` or `folder`)."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Name of the file"
                      },
                      "last_touched": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Unix-style path to the file relative to the provider root."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                      },
                      "current_version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Version number of the file."
                      },
                      "delete_allowed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not deletion of the file is allowed."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the file provider (e.g., `osfstorage`)"
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier for this file entity for this project and storage provider."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user is allowed to post comments."
                      },
                      "guid": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                      },
                      "checkout": {
                        "type": "string",
                        "readOnly": true,
                        "description": "SOON TO BE DEPRECATED, see relationships checkout."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe this file, as entered by project contributors."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node the file is on."
                      },
                      "checkout": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user who checked out the file."
                      },
                      "comments": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the comments on the file."
                      },
                      "versions": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the versions of the file."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file entity.",
                    "properties": {
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the page to view a file's information or a folder's contents."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the file."
                      },
                      "move": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file moves."
                      },
                      "new_folder": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                      },
                      "upload": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file uploads."
                      },
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file downloads."
                      },
                      "delete": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file deletions."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv",
                            "meta": {}
                          }
                        }
                      },
                      "versions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "info": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                      "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                      "move": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "download": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "delete": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54"
                    },
                    "attributes": {
                      "extra": {
                        "hashes": {
                          "sha256": "2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e",
                          "md5": "44325d4f13b09f3769ede09d7c20a82c"
                        },
                        "downloads": 447
                      },
                      "kind": "file",
                      "name": "OSC2012.pdf",
                      "last_touched": "2015-09-18T01:11:16.328000",
                      "materialized_path": "/OSC2012.pdf",
                      "date_modified": "2014-10-17T19:24:12.264Z",
                      "current_version": 1,
                      "delete_allowed": true,
                      "date_created": "2014-10-17T19:24:12.264Z",
                      "provider": "osfstorage",
                      "path": "/553e69248c5e4a219919ea54",
                      "current_user_can_comment": true,
                      "guid": "sejcv",
                      "checkout": null,
                      "tags": [],
                      "size": 216945
                    },
                    "type": "files",
                    "id": "553e69248c5e4a219919ea54"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/files/{provider}/{path}/": {
      "get": {
        "summary": "Retrieve a file",
        "description": "Retrieves the details of a file attached to given node (project or component) for the given storage provider.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested file object, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the storage provider."
          },
          {
            "in": "path",
            "type": "string",
            "name": "path",
            "required": true,
            "description": "The unique identifier of the file path."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_files_read",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "File",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the file entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the file entity (`files`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the file entity.",
                  "properties": {
                    "extra": {
                      "type": "object",
                      "readOnly": true,
                      "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                    },
                    "kind": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The kind of files object it is (`file` or `folder`)."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "Name of the file"
                    },
                    "last_touched": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                    },
                    "materialized_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Unix-style path to the file relative to the provider root."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                    },
                    "current_version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Version number of the file."
                    },
                    "delete_allowed": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not deletion of the file is allowed."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The id of the file provider (e.g., `osfstorage`)"
                    },
                    "path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique identifier for this file entity for this project and storage provider."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user is allowed to post comments."
                    },
                    "guid": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                    },
                    "checkout": {
                      "type": "string",
                      "readOnly": true,
                      "description": "SOON TO BE DEPRECATED, see relationships checkout."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe this file, as entered by project contributors."
                    },
                    "size": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Size of the file in bytes."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "node": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    },
                    "checkout": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user who checked out the file."
                    },
                    "comments": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the comments on the file."
                    },
                    "versions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the versions of the file."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the file entity.",
                  "properties": {
                    "info": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the page to view a file's information or a folder's contents."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the file."
                    },
                    "move": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file moves."
                    },
                    "new_folder": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                    },
                    "upload": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file uploads."
                    },
                    "download": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file downloads."
                    },
                    "delete": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file deletions."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv",
                          "meta": {}
                        }
                      }
                    },
                    "versions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "info": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "move": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "download": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "delete": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54"
                  },
                  "attributes": {
                    "extra": {
                      "hashes": {
                        "sha256": "2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e",
                        "md5": "44325d4f13b09f3769ede09d7c20a82c"
                      },
                      "downloads": 447
                    },
                    "kind": "file",
                    "name": "OSC2012.pdf",
                    "last_touched": "2015-09-18T01:11:16.328000",
                    "materialized_path": "/OSC2012.pdf",
                    "date_modified": "2014-10-17T19:24:12.264Z",
                    "current_version": 1,
                    "delete_allowed": true,
                    "date_created": "2014-10-17T19:24:12.264Z",
                    "provider": "osfstorage",
                    "path": "/553e69248c5e4a219919ea54",
                    "current_user_can_comment": true,
                    "guid": "sejcv",
                    "checkout": null,
                    "tags": [],
                    "size": 216945
                  },
                  "type": "files",
                  "id": "553e69248c5e4a219919ea54"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/identifiers/": {
      "get": {
        "summary": "List all identifiers",
        "description": "List all identifiers associated with a given node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of identifiers. Each resource in the array is a separate identifier object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\n\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/identifiers/?filter[category]=ark\n\nIdentifiers may be filtered by their `category` e.g `ark` or `doi`.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_identifiers_list",
        "x-response-schema": "Identifier",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Identifier",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the identifier entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the identifier entity (`identifiers`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the identifier entity.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "enum": [
                          "ark",
                          "doi"
                        ],
                        "readOnly": true,
                        "description": "The category of the identifier"
                      },
                      "value": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier value itself"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the identifier entity.",
                    "properties": {
                      "referent": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the node the identifier refers to."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the identifier entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the identifier."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "referent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b459/"
                    },
                    "attributes": {
                      "category": "doi",
                      "value": "10.17605/OSF.IO/73PND"
                    },
                    "type": "identifiers",
                    "id": "57f1641db83f6901ed94b459"
                  },
                  {
                    "relationships": {
                      "referent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b45a/"
                    },
                    "attributes": {
                      "category": "ark",
                      "value": "c7605/osf.io/73pnd"
                    },
                    "type": "identifiers",
                    "id": "57f1641db83f6901ed94b45a"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/institutions/": {
      "get": {
        "summary": "List all institutions",
        "description": "List of all institutions affiliated with this node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 affilited institutions. Each resource in the array is a separate institution object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_institutions_list",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Institution",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the institution entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the institution entity (`institutions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the institution entity.",
                    "properties": {
                      "auth_url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Url used to authenticate institution specific login."
                      },
                      "logo_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Static path to the institution specific logo."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full name of the institution."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Description of the institution."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the nodes affiliated with the institution."
                      },
                      "users": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the users affiliated with the institution."
                      },
                      "registrations": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the registrations affiliated with the institution."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the institutions entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the institution."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/cos/"
                    },
                    "attributes": {
                      "auth_url": null,
                      "logo_path": "/static/img/institutions/shields/cos-shield.png",
                      "name": "Center For Open Science",
                      "description": "COS is a non-profit technology company providing free and open services to increase inclusivity and transparency of research. Find out more at <a href=\"https://cos.io\">cos.io</a>."
                    },
                    "type": "institutions",
                    "id": "cos"
                  },
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/uva/"
                    },
                    "attributes": {
                      "auth_url": "https://accounts.osf.io/Shibboleth.sso/Login?entityID=urn%3Amace%3Aincommon%3Avirginia.edu",
                      "logo_path": "/static/img/institutions/shields/uva-shield.png",
                      "name": "University of Virginia",
                      "description": "In partnership with the <a href=\"http://www.virginia.edu/vpr/\">Vice President for Research</a>, <a href=\"http://dsi.virginia.edu\">Data Science Institute</a>, <a href=\"https://www.hsl.virginia.edu\">Health Sciences Library</a>, and <a href=\"http://data.library.virginia.edu\">University Library</a>. Learn more about <a href=\"http://cadre.virginia.edu\">UVA resources for computational and data-driven research</a>. Projects must abide by the <a href=\"http://www.virginia.edu/informationpolicy/security.html\">University Security and Data Protection Policies</a>."
                    },
                    "type": "institutions",
                    "id": "uva"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/forks/": {
      "post": {
        "summary": "Create a fork of this node",
        "description": "Creates a fork of the given node.\n\nForking a project creates a copy of an existing node and all of its contents. The fork always points back to the original node, forming a network of nodes.\n\nYou might use a fork to copy another's work to build on and extend. For example, a professor may create an OSF project of materials for individual student use. Each student forks the project to have his or her own copy of the materials to start his/her own work.\n\nWhen creating a fork, your fork will only contain public components of the current node and components for which you are a contributor. Private components that you do not have access to will not be forked.\n#### Required\nThere are no required attributes when creating a fork, as all of the forked node's attributes will be copied from the current node.\n\nThe `title` field is optional, with the default title being \"Fork of \" prepended to the current node's title.\n#### Returns\nReturns a JSON object with a `data` key containing the complete srepresentation of the forked node, if the request is successful.\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Node",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the node entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the node entity (`nodes`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the node entity.",
                  "required": [
                    "title",
                    "category"
                  ],
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the node, as selected by project contributors."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the node."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a fork of another node."
                    },
                    "forked_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "A list of strings that describe this node, as entered by project contributors."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this node is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of this node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this node."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this node."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this node."
                    },
                    "draft_registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this node."
                    },
                    "forked_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node which this node was forked from, if this node is a fork."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this node."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the license that has been applied to this node."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this node."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of preprints that this node relates to."
                    },
                    "registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been created from this node."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                    },
                    "template_node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this node."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this node."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the node entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this node."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "nodes",
                  "attributes": {
                    "title": "An Excellent Project Title",
                    "category": "software"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_forks_create",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Node",
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "get": {
        "summary": "List all forks of this node",
        "description": "\nA paginated list of the current node's forks. The returned fork nodes are sorted by their `forked_date`, with the most recently forked nodes appearing first.\n\nForking a project creates a copy of an existing node and all of its contents. The fork always points back to the original node, forming a network of nodes.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 forked nodes. If the current node has zero forked nodes, the `data` key will contain an empty array. Each resource in the array is a separate node object and contains the full representation of the forked node, meaning additional requests to the forked node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_forks_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/comments/?filter%5Btarget%5D=95q3e",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/95q3e/",
                      "html": "https://osf.io/95q3e/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": true,
                      "preprint": false,
                      "description": "",
                      "current_user_permissions": [
                        "read",
                        "write",
                        "admin"
                      ],
                      "date_modified": "2016-07-23T00:21:05.371000",
                      "title": "Fork of Reproducibility Project: Psychology",
                      "forked_date": "2016-11-08T15:59:03.114000",
                      "collection": false,
                      "registration": false,
                      "date_created": "2012-04-01T15:49:07.702000",
                      "current_user_can_comment": true,
                      "node_license": null,
                      "public": false,
                      "tags": [
                        "replication",
                        "reproducibility",
                        "open science",
                        "reproduction",
                        "psychological science",
                        "psychology",
                        "metascience",
                        "crowdsource"
                      ]
                    },
                    "type": "nodes",
                    "id": "95q3e"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/linked_nodes/": {
      "get": {
        "summary": "List all linked nodes",
        "description": "List of all nodes linked to the given node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/?filter[title]=reproducibility.\n\nNodes may be filtered by their `title`, `category`, `description`, `public`, `registration`, or `tags`. `title`, `description`, and `category` are string fields and will be filteres using simple substring matching. `public`, `registration` are boolean and can be filtered using truthy values, such as `true`, `false`, `0`, `1`. `tags` is an array of simple strings.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_linked_nodes_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/comments/?filter%5Btarget%5D=bifc7",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/bifc7/",
                      "html": "https://osf.io/bifc7/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "This is an independent replication as part of the Reproducibility Project: Psychology.",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2017-03-03T05:00:31.512000",
                      "title": "Replication of WA Cunningham, JJ Van Bavel, IR Johnsen (2008, PS 19(2))",
                      "collection": false,
                      "registration": false,
                      "date_created": "2014-07-28T13:53:04.508000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "bifc7"
                  },
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/kxhz5/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/comments/?filter%5Btarget%5D=73pnd",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/73pnd/",
                      "html": "https://osf.io/73pnd/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": true,
                      "preprint": false,
                      "description": null,
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-10-02T19:50:23.605000",
                      "title": "Replication of Hajcak &amp; Foti (2008, PS, Study 1)",
                      "collection": false,
                      "registration": false,
                      "date_created": "2012-10-31T18:50:46.111000",
                      "current_user_can_comment": false,
                      "node_license": {
                        "copyright_holders": [
                          ""
                        ],
                        "year": "2016"
                      },
                      "public": true,
                      "tags": [
                        "anxiety",
                        "EMG",
                        "EEG",
                        "motivation",
                        "ERN"
                      ]
                    },
                    "type": "nodes",
                    "id": "73pnd"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/logs/": {
      "get": {
        "summary": "List all logs",
        "description": "A paginated list of all logs associated with a given node.\n\nThe returned logs are sorted by their `date`, with the most recents logs appearing first.\n\nThis list includes the logs of the specified node as well as the logs of that node's children to which the current user has read-only access.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 logs. Each resource in the array is a separate logs object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include logs that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/logs/?filter[action]=made_private.\n\nNodes may be filtered by their `action`, and `date`.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_logs_list",
        "x-response-schema": "Log",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Log",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the log."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the log (`logs`)"
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the log.",
                    "required": [
                      "action",
                      "date"
                    ],
                    "properties": {
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time at which the log was created, as an iso8601 formatted timestamp."
                      },
                      "action": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type of action performed on the OSF. See actions section for full list of possible actions."
                      },
                      "params": {
                        "type": "object",
                        "title": "Log Params",
                        "readOnly": true,
                        "description": "The type of action performed on the OSF. See description for full list of possible actions.",
                        "properties": {
                          "addon": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The addon associated with the connected node."
                          },
                          "anonymous_link": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "The view only link added to the node was anonymous."
                          },
                          "bucket": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The Amazon s3 bucket connected to the connected node."
                          },
                          "citation_name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Name of citation associated with the connected node."
                          },
                          "contributors": {
                            "type": "string",
                            "readOnly": true,
                            "description": "List of contributors on the connected node involved in the action represented by this node log."
                          },
                          "data_set": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The dataset associated with the connected node."
                          },
                          "destination": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title."
                          },
                          "figshare_title": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Title of the fighshare project associated with this node log"
                          },
                          "forward_url": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL that the connected node forwards to."
                          },
                          "github_user": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The github user involved with the action represented by this node log."
                          },
                          "github_repo": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The github repository involved with the action represented by this node log."
                          },
                          "file": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary with information about the file involved with the log."
                          },
                          "filename": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Filename for the file associated with the log."
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Kind of the object associated with the log."
                          },
                          "folder": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Folder associated with the log."
                          },
                          "folder_name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Name of the folder associated with the log."
                          },
                          "license": {
                            "type": "string",
                            "readOnly": true,
                            "description": "License for the associated node."
                          },
                          "identifiers": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary containing the DOI and ARK ID for a preprint associated with the log."
                          },
                          "institution": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary containing the ID and Name of the institution associated with the log."
                          },
                          "old_page": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Old name of wiki page for a wiki rename log action."
                          },
                          "page": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Current name of wiki page for rename log action."
                          },
                          "page_id": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Primary key of the wiki page associated with the log."
                          },
                          "params_node": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Node that is refered to in the params of the log."
                          },
                          "params_project": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Project that is refered to in the params of the log."
                          },
                          "path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Path for a file associated with the log."
                          },
                          "pointer": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the node that is linked to the associated node."
                          },
                          "preprint": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Preprint related to the associated node."
                          },
                          "preprint_provider": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Preprint provider for the associated node."
                          },
                          "previous_institution": {
                            "type": "string",
                            "readOnly": true,
                            "description": "If a primary institution for the associated node is changed, this will show the previous institution."
                          },
                          "source": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title."
                          },
                          "study": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dataverse study linked to the associated node."
                          },
                          "tag": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Tag associated with the associated node."
                          },
                          "tags": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Tags associated with the associated node."
                          },
                          "target": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title."
                          },
                          "template_node": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing information about the node that was used as a template for the associated node."
                          },
                          "title_new": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The new title for the associated node."
                          },
                          "title_original": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The original title for the associated node"
                          },
                          "updated_fields": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing all of the fields updated on the associated node."
                          },
                          "urls": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Links to access information about the file associated with this log."
                          },
                          "version": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Version of the wiki page associated with this log."
                          },
                          "wiki": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the wiki page associated with the log."
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the log.",
                    "required": [
                      "node"
                    ],
                    "properties": {
                      "node": {
                        "description": "A relationship to the node associated with this log.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "original_node": {
                        "description": "A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "user": {
                        "description": "A relationship to the user who performed the log action.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "linked_node": {
                        "description": "A relationship to the node linked to this log.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "template_node": {
                        "description": "A relationship to the node used as a template for this log.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "links": {
                    "description": "URLs to alternative representations of the log entity.",
                    "readOnly": true,
                    "type": "object",
                    "title": "Links",
                    "required": [
                      "self"
                    ],
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the log."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/jk5cv/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/4fc706a80b6e9118ef000122/"
                    },
                    "attributes": {
                      "date": "2012-05-31T05:50:32.083000",
                      "action": "contributor_added",
                      "params": {
                        "params_node": {
                          "id": "ezcuj",
                          "title": "Reproducibility Project: Psychology"
                        },
                        "contributors": [
                          {
                            "family_name": "Nosek",
                            "middle_names": "A.",
                            "given_name": "Brian",
                            "full_name": "Brian A. Nosek",
                            "active": true,
                            "id": "cdi38"
                          }
                        ]
                      }
                    },
                    "type": "logs",
                    "id": "4fc706a80b6e9118ef000122"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/fejxb/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/fejxb/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/2z47w/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/iraqy/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/58862f8f594d9001f547f484/"
                    },
                    "attributes": {
                      "date": "2017-01-23T16:30:07.321000",
                      "action": "pointer_created",
                      "params": {
                        "preprint_provider": null,
                        "params_node": {
                          "id": "fejxb",
                          "title": "Replication of Correll (2008, JPSP, Study 2)"
                        },
                        "pointer": {
                          "url": "/iraqy/",
                          "category": "project",
                          "id": "iraqy",
                          "title": "Independent Direct Replication #2 of Correll (2008, JPSP, Study 2)"
                        },
                        "params_project": null,
                        "contributors": []
                      }
                    },
                    "type": "logs",
                    "id": "58862f8f594d9001f547f484"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/rtjws/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/rtjws/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/5873190554be8101d7e30b3e/"
                    },
                    "attributes": {
                      "date": "2017-01-09T05:00:53.761000",
                      "action": "project_registered",
                      "params": {
                        "preprint_provider": null,
                        "params_node": {
                          "id": "rtjws",
                          "title": "Analysis Audit"
                        },
                        "params_project": null,
                        "contributors": []
                      }
                    },
                    "type": "logs",
                    "id": "5873190554be8101d7e30b3e"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 2,
                  "per_page": 10
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/preprints/": {
      "get": {
        "summary": "List all preprints",
        "description": "A paginated list of preprints related to a given node. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n\n**Note: This API endpoint is under active development, and is subject to change in the future.**\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 preprints. Each resource in the array is a separate preprint object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_preprints_list",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Preprint",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the preprint entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the preprint entity (`preprints`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the preprint entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_published": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                      },
                      "doi": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                      },
                      "is_preprint_orphan": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                      },
                      "license_record": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                      },
                      "subjects": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                    "required": [
                      "node",
                      "primary_file",
                      "provider"
                    ],
                    "properties": {
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the citation of the preprint."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the identifiers associated with the preprint."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the license that has been applied to the preprint."
                      },
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "primary_file": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the preprint entity.",
                    "properties": {
                      "doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the DOI entered by the user for the preprint manuscript."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                      },
                      "preprint_doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the OSF assigned DOI for the preprint."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the preprint."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "attributes": {},
                    "relationships": {
                      "node": {
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      },
                      "primary_file": {
                        "data": {
                          "type": "primary_files",
                          "id": "{primary_file_id}"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "providers",
                          "id": "{preprint_provider_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bnzx5/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/khbvy/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/57c44b1e594d90004a421ab1/",
                            "meta": {}
                          }
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/osf/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/khbvy/",
                      "html": "https://osf.io/khbvy/",
                      "doi": "https://dx.doi.org/10.1371/journal.pbio.1002456"
                    },
                    "attributes": {
                      "doi": "10.1371/journal.pbio.1002456",
                      "license_record": null,
                      "date_modified": "2016-08-29T14:53:51.185000",
                      "is_preprint_orphan": false,
                      "date_published": "2016-08-29T14:53:51.185000",
                      "subjects": [
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Public Affairs, Public Policy and Public Administration",
                            "id": "584240da54be81056cecaab8"
                          },
                          {
                            "text": "Science and Technology Policy",
                            "id": "584240d954be81056cecaa10"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Library and Information Science",
                            "id": "584240da54be81056cecab33"
                          },
                          {
                            "text": "Scholarly Publishing",
                            "id": "584240db54be81056cecacd2"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Psychology",
                            "id": "584240da54be81056cecac68"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Psychology",
                            "id": "584240da54be81056cecac68"
                          }
                        ]
                      ],
                      "date_created": "2016-08-29T14:53:51.185000",
                      "is_published": true
                    },
                    "type": "preprints",
                    "id": "khbvy"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/registrations/": {
      "get": {
        "summary": "List all registrations",
        "description": "List of all registrations of the given node.\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 registrations. Each resource in the array is a separate registrations object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\n\nYou can optionally request that the response only include registrations that match your filters by utilizing the filter query parameter, e.g. https://api.osf.io/v2/registrations/?filter[title]=open.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_registrations_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Registration",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the registration."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the registration entity (`registrations`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the registration entity.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the registered node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                      },
                      "date_withdrawn": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the registered node."
                      },
                      "embargo_end_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a fork of another node."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                      },
                      "pending_embargo_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                      },
                      "pending_registration_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval from project administrators."
                      },
                      "pending_withdrawal": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the registration is publicly visible."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                      },
                      "registered_meta": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary with supplemental registration questions and responses."
                      },
                      "registration_supplement": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registration schema this registration conforms to."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe the registered node."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registered node."
                      },
                      "withdrawn": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration has been withdrawn."
                      },
                      "withdrawal_justification": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this registration is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of the registered node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this registration."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this registration."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this registration."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this registration."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this registration."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this registration."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                      },
                      "registered_by": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the user that initiated this registration."
                      },
                      "registered_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that this registration was registered from."
                      },
                      "registration_schema": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the metaschema that this registration conforms to."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this registration."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this registration."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the registrations entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the registration's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this registration."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "registrations",
                    "attributes": {
                      "draft_registration": "{draft_registration_id}",
                      "registration_choice": "embargo",
                      "lift_embargo": "2017-05-10T20:44:03.185000"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "files": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/files/",
                          "meta": {}
                        }
                      }
                    },
                    "view_only_links": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/view_only_links/",
                          "meta": {}
                        }
                      }
                    },
                    "citation": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/citation/",
                          "meta": {}
                        }
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/metaschemas/564d31db8c5e4a7c9694b2be/",
                          "meta": {}
                        }
                      }
                    },
                    "logs": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/logs/",
                          "meta": {}
                        }
                      }
                    },
                    "contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "forks": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/forks/",
                          "meta": {}
                        }
                      }
                    },
                    "root": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/",
                          "meta": {}
                        }
                      }
                    },
                    "identifiers": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/identifiers/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/comments/?filter%5Btarget%5D=esa63",
                          "meta": {}
                        }
                      }
                    },
                    "registered_from": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/dpfyv/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_registrations": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/registrations/esa63/relationships/linked_registrations/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/linked_registrations/",
                          "meta": {}
                        }
                      }
                    },
                    "registered_by": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/ztdnp/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_nodes": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/registrations/esa63/relationships/linked_nodes/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/linked_nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "wikis": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/wikis/",
                          "meta": {}
                        }
                      }
                    },
                    "affiliated_institutions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/institutions/",
                          "meta": {}
                        }
                      }
                    },
                    "children": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/children/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/registrations/esa63/",
                    "html": "https://osf.io/esa63/"
                  },
                  "attributes": {
                    "registration_supplement": "Open-Ended Registration",
                    "pending_embargo_approval": false,
                    "registration": true,
                    "embargo_end_date": null,
                    "withdrawn": false,
                    "withdrawal_justification": null,
                    "category": "project",
                    "preprint": false,
                    "current_user_permissions": [
                      "read"
                    ],
                    "title": "How Awareness Impacts Multiple Forms of Social Bias in Behavior (Final Data Collection and Analysis Plan)",
                    "registered_meta": {
                      "summary": {
                        "comments": [],
                        "value": "This pre-registration is an updated data collection and analysis plan. See https://osf.io/ptcqw/ for original data collection rule and https://osf.io/8jyu8/ for original analysis plan. We are collecting more data given that results after original data collection were inconclusive.",
                        "extra": []
                      }
                    },
                    "public": true,
                    "fork": false,
                    "description": "",
                    "tags": [],
                    "collection": false,
                    "current_user_can_comment": true,
                    "pending_registration_approval": false,
                    "date_modified": "2017-02-12T19:22:26.488000",
                    "date_registered": "2017-02-12T19:28:48.864000",
                    "node_links": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/node_links/",
                          "meta": {}
                        }
                      }
                    },
                    "date_created": "2017-02-12T18:45:55.063000",
                    "pending_withdrawal": false,
                    "node_license": null
                  },
                  "type": "registrations",
                  "id": "esa63"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/view_only_links/": {
      "get": {
        "summary": "List all view only links",
        "description": "List of view only links on a node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 view only links. Each resource in the array is a view only link object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Permissions\n\nView only links on a node, public or private, are readable and writeable only by users that are administrators on the node.\n\n#### Filtering\n\nYou can optionally request that the response only include view only links that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/view_only_links/?filter[anonymous]=true.\n\nView Only Links may be filtered based on their `name`, `anonymous` and `date_created` fields. Possible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_view_only_links_list",
        "x-response-schema": "View Only Link",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "view-only-links",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the view only link."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the view only link ('view-only-links')."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the view only link entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the view only link was created, as an iso8601 formatted timestamp."
                      },
                      "anonymous": {
                        "type": "boolean",
                        "default": true,
                        "readOnly": false,
                        "description": "Whether or not the view only link has anonymized contributors"
                      },
                      "name": {
                        "type": "string",
                        "default": "Shared project link",
                        "readOnly": false,
                        "description": "The name of the view only link"
                      },
                      "key": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The view only key"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the view only link entity.",
                    "required": [
                      "nodes",
                      "creator"
                    ],
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": false,
                        "description": "A relationship to the nodes which this view only link gives read-only access to."
                      },
                      "creator": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the user who created this view only link."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "self": {
                            "href": "http://api.osf.io/v2/view_only_links/58d03846a170c50025baae61/relationships/nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "http://api.osf.io/v2/view_only_links/58d03846a170c50025baae61/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "creator": {
                        "links": {
                          "related": {
                            "href": "http://api.osf.io/v2/users/4xpu9/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/view_only_links/58d03846a170c50025baae61/"
                    },
                    "attributes": {
                      "date_created": "2017-03-20T20:15:02.488643",
                      "anonymous": false,
                      "key": "c1df490be3294a9bac01ff05c4097ab7",
                      "name": "vol name"
                    },
                    "type": "view_only_links",
                    "id": "58d03846a170c50025baae61"
                  },
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "self": {
                            "href": "http://api.osf.io/v2/view_only_links/58d13827a170c50025baae6e/relationships/nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "http://api.osf.io/v2/view_only_links/58d13827a170c50025baae6e/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "creator": {
                        "links": {
                          "related": {
                            "href": "http://api.osf.io/v2/users/4xpu9/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/view_only_links/58d13827a170c50025baae6e/"
                    },
                    "attributes": {
                      "date_created": "2017-03-21T14:26:47.507504",
                      "anonymous": false,
                      "key": "9794ac36085e4d7086ff4dab49daf1cb",
                      "name": "vol name"
                    },
                    "type": "view_only_links",
                    "id": "58d13827a170c50025baae6e"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 2,
                  "per_page": 10
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/view_only_links/{link_id}/": {
      "get": {
        "summary": "Retrieve a view only link",
        "description": "Retrieves the details of a view only link on a node.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested view only link, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Permissions\n\nView only links on a node, public or private, are readable and writeable only by users that are administrators on the node.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "link_id",
            "required": true,
            "description": "The unique identifier of the view only link."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_view_only_links_read",
        "x-response-schema": "View Only Link",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "view-only-links",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the view only link."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the view only link ('view-only-links')."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the view only link entity.",
                  "properties": {
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the view only link was created, as an iso8601 formatted timestamp."
                    },
                    "anonymous": {
                      "type": "boolean",
                      "default": true,
                      "readOnly": false,
                      "description": "Whether or not the view only link has anonymized contributors"
                    },
                    "name": {
                      "type": "string",
                      "default": "Shared project link",
                      "readOnly": false,
                      "description": "The name of the view only link"
                    },
                    "key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The view only key"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the view only link entity.",
                  "required": [
                    "nodes",
                    "creator"
                  ],
                  "properties": {
                    "nodes": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A relationship to the nodes which this view only link gives read-only access to."
                    },
                    "creator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the user who created this view only link."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": null
            }
          }
        }
      }
    },
    "/nodes/{node_id}/wikis/": {
      "get": {
        "summary": "List all wikis",
        "description": "List of wiki pages on a node.\n#### Returns\nPaginated list of the node's current wiki page versions ordered by their date_modified. Each resource contains the full representation of the wiki, meaning additional requests to an individual wiki's detail view are not necessary.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Filtering\nWiki pages can be filtered based on their `name` and `date_modified` fields.\n+ `filter[name]=<Str>` -- filter wiki pages by name\n+ `filter[date_modified][comparison_operator]=YYYY-MM-DDTH:M:S` -- filter wiki pages based on date modified.\n\nPossible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_wikis_list",
        "x-response-schema": "Wiki",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Wiki",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the wiki."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the wiki (`wikis`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the wiki.",
                    "required": [
                      "kind",
                      "name",
                      "date_modified",
                      "extra",
                      "content_type",
                      "path",
                      "current_user_can_comment",
                      "materialized_path",
                      "size"
                    ],
                    "properties": {
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time at which the wiki was last modified, as an iso8601 formatted timestamp."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type of object."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name/title of the wiki page."
                      },
                      "extra": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing additional metadata about this wiki, including version information."
                      },
                      "content_type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Content type of the wiki (`text/markdown`)."
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Path to the wiki object."
                      },
                      "current_user_can_comment": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Whether the current user is allowed to post comments on this wiki."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Materialized path to the wiki object."
                      },
                      "size": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Size of the wiki."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the wiki.",
                    "required": [
                      "node",
                      "user",
                      "comments"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the associated node."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the user associated with this wiki."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the comments related to this wiki."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the wiki.",
                    "properties": {
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL to download the content of the wiki."
                      },
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the wiki."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the wiki."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/tvyxz/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/5k3hq/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/tvyxz/comments/?filter%5Btarget%5D=zveyb",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "info": "https://api.osf.io/v2/wikis/zveyb/",
                      "download": "https://api.osf.io/v2/wikis/zveyb/content/",
                      "self": "https://api.osf.io/v2/wikis/zveyb/"
                    },
                    "attributes": {
                      "kind": "file",
                      "name": "home",
                      "date_modified": "2017-02-16T15:45:57.671957",
                      "extra": {
                        "version": 47
                      },
                      "content_type": "text/markdown",
                      "path": "/zveyb",
                      "current_user_can_comment": true,
                      "materialized_path": "/zveyb",
                      "size": 552
                    },
                    "type": "wikis",
                    "id": "xu77p"
                  }
                ],
                "links": {
                  "first": "",
                  "last": "https://api.osf.io/v2/wikis/zveyb/?page=2",
                  "prev": "",
                  "next": "https://api.osf.io/v2/wikis/zveyb/?page=2",
                  "meta": {
                    "total": 12,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/preprints/": {
      "get": {
        "summary": "List all preprints",
        "description": "\nA paginated list of preprints from all preprint providers. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprints. Each resource in the array is a separate preprint object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/?filter[provider]=socarxiv.\n\nPreprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.",
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_list",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Preprint",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the preprint entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the preprint entity (`preprints`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the preprint entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_published": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                      },
                      "doi": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                      },
                      "is_preprint_orphan": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                      },
                      "license_record": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                      },
                      "subjects": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                    "required": [
                      "node",
                      "primary_file",
                      "provider"
                    ],
                    "properties": {
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the citation of the preprint."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the identifiers associated with the preprint."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the license that has been applied to the preprint."
                      },
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "primary_file": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the preprint entity.",
                    "properties": {
                      "doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the DOI entered by the user for the preprint manuscript."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                      },
                      "preprint_doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the OSF assigned DOI for the preprint."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the preprint."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "attributes": {},
                    "relationships": {
                      "node": {
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      },
                      "primary_file": {
                        "data": {
                          "type": "primary_files",
                          "id": "{primary_file_id}"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "providers",
                          "id": "{preprint_provider_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5xuck/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/5894204f594d900200ed23f2/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/socarxiv/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/hqb2p/",
                      "html": "https://osf.io/preprints/socarxiv/hqb2p/",
                      "preprint_doi": "https://dx.doi.org/10.5072/FK2OSF.IO/HQB2P"
                    },
                    "attributes": {
                      "doi": null,
                      "license_record": {
                        "copyright_holders": [],
                        "year": "2017"
                      },
                      "date_modified": "2017-02-03T06:19:00.158000",
                      "is_preprint_orphan": false,
                      "date_published": "2017-02-03T06:18:59.788000",
                      "subjects": [
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Political Science",
                            "id": "584240da54be81056cecac1a"
                          }
                        ]
                      ],
                      "date_created": "2017-02-03T06:16:57.129000",
                      "is_published": true
                    },
                    "type": "preprints",
                    "id": "hqb2p"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/preprints/?page=172",
                  "prev": null,
                  "next": "https://api.osf.io/v2/preprints/?page=2",
                  "meta": {
                    "total": 1720,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a preprint",
        "description": "Creates a new preprint.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created preprint, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Preprint",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the preprint entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the preprint entity (`preprints`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the preprint entity.",
                  "properties": {
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                    },
                    "date_published": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                    },
                    "is_preprint_orphan": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                    },
                    "license_record": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                    },
                    "subjects": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                  "required": [
                    "node",
                    "primary_file",
                    "provider"
                  ],
                  "properties": {
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the citation of the preprint."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the identifiers associated with the preprint."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the license that has been applied to the preprint."
                    },
                    "node": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                    },
                    "primary_file": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the preprint entity.",
                  "properties": {
                    "doi": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL representation of the DOI entered by the user for the preprint manuscript."
                    },
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                    },
                    "preprint_doi": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL representation of the OSF assigned DOI for the preprint."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the preprint."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "attributes": {},
                  "relationships": {
                    "node": {
                      "data": {
                        "type": "nodes",
                        "id": "{node_id}"
                      }
                    },
                    "primary_file": {
                      "data": {
                        "type": "primary_files",
                        "id": "{primary_file_id}"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "{preprint_provider_id}"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_create",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Preprint",
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/preprints/{preprint_id}/": {
      "get": {
        "summary": "Retrieve a preprint",
        "description": "Retrieves the details of a preprint.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested preprint, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_id",
            "description": "The unique identifier of the preprint."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_read",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Preprint",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the preprint entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the preprint entity (`preprints`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the preprint entity.",
                  "properties": {
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                    },
                    "date_published": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                    },
                    "is_preprint_orphan": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                    },
                    "license_record": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                    },
                    "subjects": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                  "required": [
                    "node",
                    "primary_file",
                    "provider"
                  ],
                  "properties": {
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the citation of the preprint."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the identifiers associated with the preprint."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the license that has been applied to the preprint."
                    },
                    "node": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                    },
                    "primary_file": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the preprint entity.",
                  "properties": {
                    "doi": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL representation of the DOI entered by the user for the preprint manuscript."
                    },
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                    },
                    "preprint_doi": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL representation of the OSF assigned DOI for the preprint."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the preprint."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "attributes": {},
                  "relationships": {
                    "node": {
                      "data": {
                        "type": "nodes",
                        "id": "{node_id}"
                      }
                    },
                    "primary_file": {
                      "data": {
                        "type": "primary_files",
                        "id": "{primary_file_id}"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "{preprint_provider_id}"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/bnzx5/",
                          "meta": {}
                        }
                      }
                    },
                    "citation": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/khbvy/citation/",
                          "meta": {}
                        }
                      }
                    },
                    "identifiers": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/khbvy/identifiers/",
                          "meta": {}
                        }
                      }
                    },
                    "primary_file": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/files/57c44b1e594d90004a421ab1/",
                          "meta": {}
                        }
                      }
                    },
                    "provider": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprint_providers/osf/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/preprints/khbvy/",
                    "html": "https://osf.io/khbvy/",
                    "doi": "https://dx.doi.org/10.1371/journal.pbio.1002456",
                    "preprint_doi": "https://dx.doi.org/10.5072/FK2OSF.IO/KHBVY"
                  },
                  "attributes": {
                    "doi": "10.1371/journal.pbio.1002456",
                    "license_record": null,
                    "date_modified": "2016-08-29T14:53:51.185000",
                    "is_preprint_orphan": false,
                    "date_published": "2016-08-29T14:53:51.185000",
                    "subjects": [
                      [
                        {
                          "text": "Social and Behavioral Sciences",
                          "id": "584240da54be81056cecac48"
                        },
                        {
                          "text": "Public Affairs, Public Policy and Public Administration",
                          "id": "584240da54be81056cecaab8"
                        },
                        {
                          "text": "Science and Technology Policy",
                          "id": "584240d954be81056cecaa10"
                        }
                      ],
                      [
                        {
                          "text": "Social and Behavioral Sciences",
                          "id": "584240da54be81056cecac48"
                        },
                        {
                          "text": "Library and Information Science",
                          "id": "584240da54be81056cecab33"
                        },
                        {
                          "text": "Scholarly Publishing",
                          "id": "584240db54be81056cecacd2"
                        }
                      ],
                      [
                        {
                          "text": "Social and Behavioral Sciences",
                          "id": "584240da54be81056cecac48"
                        },
                        {
                          "text": "Psychology",
                          "id": "584240da54be81056cecac68"
                        }
                      ],
                      [
                        {
                          "text": "Social and Behavioral Sciences",
                          "id": "584240da54be81056cecac48"
                        },
                        {
                          "text": "Psychology",
                          "id": "584240da54be81056cecac68"
                        }
                      ]
                    ],
                    "date_created": "2016-08-29T14:53:51.185000",
                    "is_published": true
                  },
                  "type": "preprints",
                  "id": "khbvy"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a preprint",
        "description": "Updates the specified preprint by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated preprint, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_id",
            "description": "The unique identifier of the preprint."
          },
          {
            "in": "body",
            "required": true,
            "name": "data",
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "id": "{preprint_id}",
                  "attributes": {
                    "doi": "{doi}"
                  },
                  "relationships": {
                    "primary_file": {
                      "data": {
                        "type": "primary_files",
                        "id": "{file_id}"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_partial_update",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/preprints/{preprint_id}/citation/": {
      "get": {
        "summary": "Retrieve citation details",
        "description": "The citation details for a preprint, in CSL format.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the details necessary for the preprint citation.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_id",
            "description": "The unique identifier of the preprint whose citation you wish to retrieve."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_citation_list",
        "x-response-schema": "Citation Detail",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "Citation Detail",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the entity being cited."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation entity (either `node-citation`, `preprint-citation`, or `registration-citation`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation entity.",
                  "properties": {
                    "author": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The list of bibliographic authors, represented as dictionaries of their given and family names, for the entitiy being cited."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The DOI for the entity being cited, if one exists."
                    },
                    "publisher": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The publisher of the entity being cited. For nodes and registrations, the publisher is the 'Open Science Framework'. For preprints, the publisher is the same as the preprint provider."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the entity being cited."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the citation entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the entity that is being cited."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "osf.io/khbvy"
                  },
                  "attributes": {
                    "publisher": "Open Science Framework",
                    "author": [
                      {
                        "given": "Mallory",
                        "family": "Kidwell"
                      },
                      {
                        "given": "Ljiljana B",
                        "family": "Lazarevic"
                      },
                      {
                        "given": "Erica",
                        "family": "Baranski"
                      },
                      {
                        "given": "Tom E",
                        "family": "Hardwicke"
                      },
                      {
                        "given": "Sarah",
                        "family": "Piechowski"
                      },
                      {
                        "given": "Lina-Sophia",
                        "family": "Falkenberg"
                      },
                      {
                        "given": "Curtis A",
                        "family": "Kennett"
                      },
                      {
                        "given": "Agnieszka",
                        "family": "Slowik"
                      },
                      {
                        "given": "Carina",
                        "family": "Sonnleitner"
                      },
                      {
                        "given": "Chelsey L",
                        "family": "Hess-Holden"
                      },
                      {
                        "given": "Timothy M",
                        "family": "Errington"
                      },
                      {
                        "given": "Susann",
                        "family": "Fiedler"
                      },
                      {
                        "given": "Brian A",
                        "family": "Nosek"
                      }
                    ],
                    "type": "webpage",
                    "title": "Badges to Acknowledge Open Practices: A Simple, Low-Cost, Effective Method for Increasing Transparency"
                  },
                  "type": "preprint-citation",
                  "id": "khbvy"
                }
              }
            }
          }
        }
      }
    },
    "/preprints/{preprint_id}/citation/{style_id}/": {
      "get": {
        "summary": "Retrieve a styled citation",
        "description": "The citation for a preprint in a specific style.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the preprint citation, in the requested style.",
        "parameters": [
          {
            "description": "The unique identifier of the citation style.",
            "required": true,
            "type": "string",
            "name": "style_id",
            "in": "path"
          },
          {
            "description": "The unique identifier of the preprint.",
            "required": true,
            "type": "string",
            "name": "preprint_id",
            "in": "path"
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_citation_read",
        "x-response-schema": "Styled Citation",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "Styled Citation",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the citation style, e.g. APA."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation style entity (`styled-citations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation style entity.",
                  "properties": {
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The complete entity citation in the requested style."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {},
                  "attributes": {
                    "citation": "Kidwell, M., Lazarevic, L. B., Baranski, E., Hardwicke, T. E., Piechowski, S., Falkenberg, L.-S., … Nosek, B. A. (2016, August 29). Badges to Acknowledge Open Practices: A Simple, Low-Cost, Effective Method for Increasing Transparency. http://doi.org/10.1371/journal.pbio.1002456"
                  },
                  "type": "styled-citations",
                  "id": "apa"
                }
              }
            }
          }
        }
      }
    },
    "/preprint_providers/": {
      "get": {
        "summary": "List all preprint providers",
        "description": "\nA paginated list of all preprint providers. The returned preprint providers are sorted by their creation date, with the most recent preprints appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include preprint providers that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprint_providers/?filter[id]=osf.\n\nPreprint Providers may be filtered by their `id`, `name`,  and `description`",
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_list",
        "x-response-schema": "Preprint Provider",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Preprint Providers",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the preprint provider entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the preprint provider entity (`preprint_providers`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the preprint provider entity.",
                  "properties": {
                    "social_instagram": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4."
                    },
                    "advisory_board": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The HTML representation of the preprint provider's advisory board."
                    },
                    "email_support": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint providers's support email address."
                    },
                    "banner_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4."
                    },
                    "logo_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4."
                    },
                    "subjects_acceptable": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the preprint provider."
                    },
                    "social_facebook": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4."
                    },
                    "email_contact": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's contact email address. This field is deprecated as of verson 2.4."
                    },
                    "example": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The GUID for an example preprint from this preprint provider."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the preprint provider."
                    },
                    "domain": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's domain, if the provider is using a domain to for their preprint service."
                    },
                    "domain_redirect_enabled": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not redirects are enabled for the provider's domain."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the preprint provider.",
                  "properties": {
                    "licenses_acceptable": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to licenses the preprint provider allows."
                    },
                    "taxonomies": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the taxonomies the preprint provider allows."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the preprint list page for the preprint provider."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the preprint entity.",
                  "properties": {
                    "external_url": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the external website for the preprint provider."
                    },
                    "preprints": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the preprint list page for the preprint provider."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the preprint provider."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "licenses_acceptable": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/osf/licenses/",
                            "meta": {}
                          }
                        }
                      },
                      "taxonomies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/osf/taxonomies/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/osf/preprints/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprint_providers/osf/",
                      "preprints": "https://api.osf.io/v2/preprint_providers/osf/preprints/",
                      "external_url": "https://osf.io/preprints/"
                    },
                    "attributes": {
                      "social_instagram": "",
                      "advisory_board": "",
                      "email_support": "",
                      "banner_path": "/static/img/preprint_providers/cos-logo.png",
                      "logo_path": "/static/img/preprint_providers/cos-logo.png",
                      "subjects_acceptable": [],
                      "description": "A scholarly commons to connect the entire research cycle",
                      "social_facebook": "",
                      "header_text": "",
                      "social_twitter": "",
                      "email_contact": "",
                      "example": "khbvy",
                      "name": "Open Science Framework",
                      "domain": "osf.io"
                    },
                    "type": "preprint_providers",
                    "id": "osf"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/preprint_providers/{preprint_provider_id}/": {
      "get": {
        "summary": "Retrieve a preprint provider",
        "description": "Retrieves the details of a preprint provider.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested preprint provider, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Acceptable Subjects Structure\nEach preprint provider specifies acceptable subjects.\n`subjects_acceptable` is an array found in `attributes`.\nSubjects consist of general parent subjects (e.g., Engineering), more specific child subjects (e.g., Aerospace Engineering), and even more specific grandchild subjects (e.g., Aerodynamics and Fluid Mechanics). Subjects can only be nested 3 deep.\n\n\n    \"subjects_acceptable\": [\n        [\n            [\n                # Parent Subject:\n                # Architecture\n                \"584240d954be81056ceca9e5\",\n\n                # Child Subject:\n                # Architectural Engineering\n                \"584240da54be81056cecac87\"\n            ],\n            # Include all Architectural Engineering's children:\n            true\n        ],\n        [\n            [\n                # Parent Subject:\n                # Engineering\n                \"584240da54be81056cecaca9\",\n\n                # Child Subject:\n                # Aerospace Engineering\n                \"584240db54be81056cecacd6\",\n\n                # Grandchild Subject:\n                # Aerodynamics and Fluid Mechanics\n                \"584240da54be81056cecaa74\"\n            ],\n            # All nestings 3 deep must be false\n            false\n        ]\n    ]\n\nThe above structure would allow Architecture, Architectural Engineering, all of Architectural Engineering's children, Engineering, Aerospace Engineering, and Aerodynamics and Fluid Mechanics.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_provider_id",
            "description": "The unique identifier of the preprint provider."
          }
        ],
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_detail",
        "x-response-schema": "Preprint Provider",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Preprint Providers",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the preprint provider entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the preprint provider entity (`preprint_providers`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the preprint provider entity.",
                  "properties": {
                    "social_instagram": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4."
                    },
                    "advisory_board": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The HTML representation of the preprint provider's advisory board."
                    },
                    "email_support": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint providers's support email address."
                    },
                    "banner_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4."
                    },
                    "logo_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4."
                    },
                    "subjects_acceptable": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the preprint provider."
                    },
                    "social_facebook": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4."
                    },
                    "email_contact": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's contact email address. This field is deprecated as of verson 2.4."
                    },
                    "example": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The GUID for an example preprint from this preprint provider."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the preprint provider."
                    },
                    "domain": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's domain, if the provider is using a domain to for their preprint service."
                    },
                    "domain_redirect_enabled": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not redirects are enabled for the provider's domain."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the preprint provider.",
                  "properties": {
                    "licenses_acceptable": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to licenses the preprint provider allows."
                    },
                    "taxonomies": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the taxonomies the preprint provider allows."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the preprint list page for the preprint provider."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the preprint entity.",
                  "properties": {
                    "external_url": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the external website for the preprint provider."
                    },
                    "preprints": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the preprint list page for the preprint provider."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the preprint provider."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "licenses_acceptable": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprint_providers/osf/licenses/",
                          "meta": {}
                        }
                      }
                    },
                    "taxonomies": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprint_providers/osf/taxonomies/",
                          "meta": {}
                        }
                      }
                    },
                    "preprints": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprint_providers/osf/preprints/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/preprint_providers/osf/",
                    "preprints": "https://api.osf.io/v2/preprint_providers/osf/preprints/",
                    "external_url": "https://osf.io/preprints/"
                  },
                  "attributes": {
                    "social_instagram": "",
                    "advisory_board": "",
                    "email_support": "",
                    "banner_path": "/static/img/preprint_providers/cos-logo.png",
                    "logo_path": "/static/img/preprint_providers/cos-logo.png",
                    "subjects_acceptable": [],
                    "description": "A scholarly commons to connect the entire research cycle",
                    "social_facebook": "",
                    "header_text": "",
                    "social_twitter": "",
                    "email_contact": "",
                    "example": "khbvy",
                    "name": "Open Science Framework",
                    "domain": "osf.io"
                  },
                  "type": "preprint_providers",
                  "id": "osf"
                },
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 5,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/preprint_providers/{preprint_provider_id}/preprints/": {
      "get": {
        "summary": "List all preprints",
        "description": "\nA paginated list of preprints from the specified preprint provider. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprints. Each resource in the array is a separate preprint object.\n\nThe `links` key contains a dictionary with keys that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Filtering\nYou can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprint_providers/osf/preprints/?filter[is_published]=true.\n\nPreprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_provider_id",
            "description": "The unique identifier of the preprint provider."
          }
        ],
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_providers_preprints_list",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Preprint",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the preprint entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the preprint entity (`preprints`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the preprint entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_published": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                      },
                      "doi": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                      },
                      "is_preprint_orphan": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                      },
                      "license_record": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                      },
                      "subjects": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                    "required": [
                      "node",
                      "primary_file",
                      "provider"
                    ],
                    "properties": {
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the citation of the preprint."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the identifiers associated with the preprint."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the license that has been applied to the preprint."
                      },
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "primary_file": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the preprint entity.",
                    "properties": {
                      "doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the DOI entered by the user for the preprint manuscript."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                      },
                      "preprint_doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the OSF assigned DOI for the preprint."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the preprint."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "attributes": {},
                    "relationships": {
                      "node": {
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      },
                      "primary_file": {
                        "data": {
                          "type": "primary_files",
                          "id": "{primary_file_id}"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "providers",
                          "id": "{preprint_provider_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5xuck/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/5894204f594d900200ed23f2/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/socarxiv/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/hqb2p/",
                      "html": "https://osf.io/preprints/socarxiv/hqb2p/"
                    },
                    "attributes": {
                      "doi": null,
                      "license_record": {
                        "copyright_holders": [],
                        "year": "2017"
                      },
                      "date_modified": "2017-02-03T06:19:00.158000",
                      "is_preprint_orphan": false,
                      "date_published": "2017-02-03T06:18:59.788000",
                      "subjects": [
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Political Science",
                            "id": "584240da54be81056cecac1a"
                          }
                        ]
                      ],
                      "date_created": "2017-02-03T06:16:57.129000",
                      "is_published": true
                    },
                    "type": "preprints",
                    "id": "hqb2p"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/preprints/?page=172",
                  "prev": null,
                  "next": "https://api.osf.io/v2/preprints/?page=2",
                  "meta": {
                    "total": 1720,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/preprint_providers/{preprint_provider_id}/taxonomies/": {
      "get": {
        "summary": "List all taxonomies",
        "description": "\nA paginated list of the taxonomies for a preprint provider. The returned preprint providers taxonomies are sorted by their creation date, with the most recent preprints appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_provider_id",
            "description": "The unique identifier of the preprint provider."
          }
        ],
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_taxonomies_list",
        "x-response-schema": "Taxonomies",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Taxonomy",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the taxonomy entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the taxonomy entity (`taxonomies`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the taxonomy entity.",
                  "properties": {
                    "text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text name of the taxonomy"
                    },
                    "child_count": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "The number of children this taxonomy contains."
                    },
                    "parents": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the taxonomy entity.",
                  "properties": {
                    "parents": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "An array of links to to this taxonomy's parents. This field is deprecated as of verson 2.4."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the taxonomy."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca838/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240d954be81056ceca97a/"
                      ]
                    },
                    "attributes": {
                      "text": "History of Philosophy",
                      "parents": [
                        {
                          "text": "Philosophy",
                          "id": "584240d954be81056ceca97a"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca838"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/preprint_providers/osf/taxonomies/?page=122",
                  "prev": null,
                  "next": "https://api.osf.io/v2/preprint_providers/osf/taxonomies/?page=2",
                  "meta": {
                    "total": 1217,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/preprint_providers/{preprint_provider_id}/licenses/": {
      "get": {
        "summary": "List all licenses",
        "description": "\nA paginated list of the licenses allowed bya preprint provider.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_provider_id",
            "description": "The unique identifier of the preprint provider."
          }
        ],
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_licenses_list",
        "x-response-schema": "Licenses",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "License",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the license."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the license (`license`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the license.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Name of the license."
                    },
                    "text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Full text of the license."
                    },
                    "required_fields": {
                      "type": "array",
                      "readOnly": true,
                      "description": "Fields required for this license (provided to help front-end validators). Maps to properties on the NodeLicense model.",
                      "items": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Individual fields required by this license."
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the license.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the license."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e965/"
                    },
                    "attributes": {
                      "text": "Copyright {{year}} {{copyrightHolders}}",
                      "required_fields": [
                        "year",
                        "copyrightHolders"
                      ],
                      "name": "No license"
                    },
                    "type": "licenses",
                    "id": "563c1cf88c5e4a3877f9e965"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 3,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/": {
      "get": {
        "summary": "List all registrations",
        "description": "A paginated list of registrations on the OSF to which the user has access.\n\nThe returned registrations are those which are public or which the user has access to view.\n\nNon-registered nodes cannot be accessed through this endpoint (use the [nodes](#Nodes_nodes_list) endpoints instead).\n\n#### Registrations\nA registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.\n\nRegistrations can be made public immediately or embargoed for up to 4 years.\n\n#### Withdrawals\nRegistrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 registrations. Each resource in the array is a separate registration object and contains the full representation of the registration, meaning additional requests to a registration's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/?filter[title]=open.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Registration",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the registration."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the registration entity (`registrations`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the registration entity.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the registered node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                      },
                      "date_withdrawn": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the registered node."
                      },
                      "embargo_end_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a fork of another node."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                      },
                      "pending_embargo_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                      },
                      "pending_registration_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval from project administrators."
                      },
                      "pending_withdrawal": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the registration is publicly visible."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                      },
                      "registered_meta": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary with supplemental registration questions and responses."
                      },
                      "registration_supplement": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registration schema this registration conforms to."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe the registered node."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registered node."
                      },
                      "withdrawn": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration has been withdrawn."
                      },
                      "withdrawal_justification": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this registration is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of the registered node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this registration."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this registration."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this registration."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this registration."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this registration."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this registration."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                      },
                      "registered_by": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the user that initiated this registration."
                      },
                      "registered_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that this registration was registered from."
                      },
                      "registration_schema": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the metaschema that this registration conforms to."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this registration."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this registration."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the registrations entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the registration's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this registration."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "registrations",
                    "attributes": {
                      "draft_registration": "{draft_registration_id}",
                      "registration_choice": "embargo",
                      "lift_embargo": "2017-05-10T20:44:03.185000"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "ipkea",
                    "type": "registrations",
                    "attributes": {
                      "registration_supplement": "OSF-Standard Pre-Data Collection Registration",
                      "pending_embargo_approval": false,
                      "registration": true,
                      "embargo_end_date": null,
                      "withdrawn": false,
                      "withdrawal_justification": null,
                      "category": "project",
                      "preprint": false,
                      "current_user_permissions": [
                        "read"
                      ],
                      "title": "The Effect of Badges on Availability of Data and Materials",
                      "registered_meta": {
                        "looked": {
                          "value": "No"
                        },
                        "datacompletion": {
                          "value": "No"
                        },
                        "comments": {
                          "value": ""
                        }
                      },
                      "public": true,
                      "fork": false,
                      "description": "This investigation seeks to evaluate the impact of badges on the availability and accessibility of open data and materials.",
                      "tags": [
                        "badges",
                        "methodology",
                        "signals",
                        "open science",
                        "open data",
                        "open materials"
                      ],
                      "collection": false,
                      "current_user_can_comment": false,
                      "pending_registration_approval": false,
                      "date_modified": "2016-02-04T20:58:11.042000",
                      "date_registered": "2015-06-01T14:47:40.064000",
                      "date_created": "2015-05-21T19:38:55.398000",
                      "date_withdrawn": null,
                      "pending_withdrawal": false,
                      "node_license": null
                    },
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/metaschemas/564d31db8c5e4a7c9694b2c0/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/comments/?filter%5Btarget%5D=ipkea",
                            "meta": {}
                          }
                        }
                      },
                      "registered_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/rfgdw/",
                            "meta": {}
                          }
                        }
                      },
                      "registered_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/z2u9w/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/ipkea/",
                      "html": "https://osf.io/ipkea/"
                    }
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/registrations/?page=856",
                  "prev": null,
                  "next": "https://api.osf.io/v2/registrations/?page=2",
                  "meta": {
                    "total": 8559,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/": {
      "get": {
        "summary": "Retrieve a registration",
        "description": "Retrieve the details of a given registration.\n#### Permissions\nOnly project contributors may retrieve the details of a registration that is embargoed, or has not yet been made public. Attempting to retrieve a private registration for which you are not a contributor will result in a **403 Forbidden** response.\n\nAuthentication is not required to view the details of a public registration, as public registrations give read-only access to everyone.\n#### Registrations\nA registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.\n\nRegistrations can be made public immediately or embargoed for up to 4 years.\n\n#### Withdrawals\nRegistrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_read",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the registration."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the registration entity (`registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the registration entity.",
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": true,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the registered node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                    },
                    "date_withdrawn": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the registered node."
                    },
                    "embargo_end_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a fork of another node."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                    },
                    "pending_embargo_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                    },
                    "pending_registration_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval from project administrators."
                    },
                    "pending_withdrawal": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the registration is publicly visible."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                    },
                    "registered_meta": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary with supplemental registration questions and responses."
                    },
                    "registration_supplement": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registration schema this registration conforms to."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe the registered node."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registered node."
                    },
                    "withdrawn": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration has been withdrawn."
                    },
                    "withdrawal_justification": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this registration is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of the registered node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this registration."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this registration."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this registration."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this registration."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this registration."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this registration."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                    },
                    "registered_by": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user that initiated this registration."
                    },
                    "registered_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this registration was registered from."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the metaschema that this registration conforms to."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this registration."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this registration."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the registrations entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the registration's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this registration."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "registrations",
                  "attributes": {
                    "draft_registration": "{draft_registration_id}",
                    "registration_choice": "embargo",
                    "lift_embargo": "2017-05-10T20:44:03.185000"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a registration",
        "description": "Updates a registration's privacy from **private** to **public**.\n\nRegistrations can be updated with either a **PUT** or **PATCH** request. The `public` field is the only field that can be modified on a registration\n\nRegistrations can only be turned from private to public, not vice versa.\n#### Permissions\nOnly project administrators may update a registration.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the registration."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the registration entity (`registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the registration entity.",
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": true,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the registered node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                    },
                    "date_withdrawn": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the registered node."
                    },
                    "embargo_end_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a fork of another node."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                    },
                    "pending_embargo_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                    },
                    "pending_registration_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval from project administrators."
                    },
                    "pending_withdrawal": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the registration is publicly visible."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                    },
                    "registered_meta": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary with supplemental registration questions and responses."
                    },
                    "registration_supplement": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registration schema this registration conforms to."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe the registered node."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registered node."
                    },
                    "withdrawn": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration has been withdrawn."
                    },
                    "withdrawal_justification": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this registration is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of the registered node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this registration."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this registration."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this registration."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this registration."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this registration."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this registration."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                    },
                    "registered_by": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user that initiated this registration."
                    },
                    "registered_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this registration was registered from."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the metaschema that this registration conforms to."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this registration."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this registration."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the registrations entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the registration's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this registration."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "registrations",
                  "attributes": {
                    "draft_registration": "{draft_registration_id}",
                    "registration_choice": "embargo",
                    "lift_embargo": "2017-05-10T20:44:03.185000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_partial_update",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Created"
          }
        }
      }
    },
    "/registrations/{registration_id}/citations/": {
      "get": {
        "summary": "List all citation styles",
        "description": "\nA paginated list of the registration's alternative citation styles\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 citation styles. Each resource in the array is a separate citation styles object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include citation styles that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/citations/?filter[title]=open.\n\nCitation styles may be filtered by their `id`, `title`, `short-title`, and `summary`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_citations_list",
        "x-response-schema": "Citation Style",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Citation Style",
                "required": [
                  "id",
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the citation style, e.g. APA."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the citation style entity (`citation-styles`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "required": [
                      "date_parsed",
                      "title"
                    ],
                    "description": "The properties of the citation style entity.",
                    "properties": {
                      "date_parsed": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the citation style was first parsed, as an iso8601 formatted timestamp."
                      },
                      "short_title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The short name for the citation style."
                      },
                      "summary": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The summary of the citation style."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The official name of the citation style."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the citation style entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {},
                    "attributes": {
                      "date_parsed": "2015-02-16T04:16:25.732000",
                      "summary": null,
                      "short_title": "AMR",
                      "title": "Academy of Management Review"
                    },
                    "type": "citation-styles",
                    "id": "academy-of-management-review"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/citations/{citation_id}/": {
      "get": {
        "summary": "Retrieve a citation",
        "description": "Retrieves the citation style details for a registration, in CSL format.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the details necessary for the citation style.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "type": "string",
            "name": "citation_id",
            "required": true,
            "description": "The unique identifier of the citation."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_citation_read",
        "x-response-schema": "Citation Detail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Citation Detail",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the entity being cited."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation entity (either `node-citation`, `preprint-citation`, or `registration-citation`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation entity.",
                  "properties": {
                    "author": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The list of bibliographic authors, represented as dictionaries of their given and family names, for the entitiy being cited."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The DOI for the entity being cited, if one exists."
                    },
                    "publisher": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The publisher of the entity being cited. For nodes and registrations, the publisher is the 'Open Science Framework'. For preprints, the publisher is the same as the preprint provider."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the entity being cited."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the citation entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the entity that is being cited."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "bg4di",
                  "type": "node-citation",
                  "attributes": {
                    "publisher": "Open Science Framework",
                    "author": [
                      {
                        "given": "Timothy M",
                        "family": "Errington"
                      },
                      {
                        "given": "Nicole",
                        "family": "Vasilevsky"
                      },
                      {
                        "given": "Melissa A",
                        "family": "Haendel"
                      }
                    ],
                    "type": "webpage",
                    "title": "Identification Analysis of RP:CB"
                  },
                  "links": {
                    "self": "osf.io/bg4di"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/children/": {
      "get": {
        "summary": "List all child registrations",
        "description": "\nA paginated list of children of a registration.\n\nThe list consists of the next level child registrations for the given registration. The returned registrations are sorted by their `date_modified`, with the most recently updated child registrations appearing first.\n\nThe list will include child registrations that are public, as well as child registrations that are private, if the authenticated user has permission to view them.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 child registrations. If the given registration has zero child registrations, the `data` key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the child registration.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/children/?filter[title]=reproducibility.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_children_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Registration",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the registration."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the registration entity (`registrations`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the registration entity.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the registered node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                      },
                      "date_withdrawn": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the registered node."
                      },
                      "embargo_end_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a fork of another node."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                      },
                      "pending_embargo_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                      },
                      "pending_registration_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval from project administrators."
                      },
                      "pending_withdrawal": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the registration is publicly visible."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                      },
                      "registered_meta": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary with supplemental registration questions and responses."
                      },
                      "registration_supplement": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registration schema this registration conforms to."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe the registered node."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registered node."
                      },
                      "withdrawn": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration has been withdrawn."
                      },
                      "withdrawal_justification": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this registration is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of the registered node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this registration."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this registration."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this registration."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this registration."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this registration."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this registration."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                      },
                      "registered_by": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the user that initiated this registration."
                      },
                      "registered_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that this registration was registered from."
                      },
                      "registration_schema": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the metaschema that this registration conforms to."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this registration."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this registration."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the registrations entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the registration's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this registration."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "registrations",
                    "attributes": {
                      "draft_registration": "{draft_registration_id}",
                      "registration_choice": "embargo",
                      "lift_embargo": "2017-05-10T20:44:03.185000"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/metaschemas/564d31db8c5e4a7c9694b2c0/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/comments/?filter%5Btarget%5D=4cmnz",
                            "meta": {}
                          }
                        }
                      },
                      "registered_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5wprs/",
                            "meta": {}
                          }
                        }
                      },
                      "registered_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/children/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/4cmnz/",
                      "html": "https://osf.io/4cmnz/"
                    },
                    "attributes": {
                      "registration_supplement": "OSF-Standard Pre-Data Collection Registration",
                      "pending_embargo_approval": false,
                      "registration": true,
                      "embargo_end_date": null,
                      "withdrawn": false,
                      "withdrawal_justification": null,
                      "category": "project",
                      "preprint": false,
                      "current_user_permissions": [
                        "read"
                      ],
                      "title": "Full Project Description",
                      "registered_meta": {
                        "looked": {
                          "comments": [],
                          "value": "No",
                          "extra": []
                        },
                        "datacompletion": {
                          "comments": [],
                          "value": "Yes, data collection is underway or complete",
                          "extra": []
                        },
                        "comments": {
                          "comments": [],
                          "value": "Data collection for measurement time T1 is underway, but no data has been collected for T2 (when menstrual cycle information will be assessed). Therefore, data cannot be analysed at the time of preregistration.",
                          "extra": []
                        }
                      },
                      "public": true,
                      "fork": false,
                      "description": "",
                      "tags": [],
                      "collection": false,
                      "current_user_can_comment": false,
                      "pending_registration_approval": false,
                      "date_modified": "2016-05-23T14:22:03.885000",
                      "date_registered": "2016-05-23T14:24:25.478000",
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "date_created": "2016-05-23T12:11:14.853000",
                      "pending_withdrawal": false,
                      "node_license": null
                    },
                    "type": "registrations",
                    "id": "4cmnz"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/comments/": {
      "get": {
        "summary": "List all comments",
        "description": "\nA paginated list of the registration's comments.\n\nThe returned comments are sorted by their creation date, with the most recent comments appearing first.\n#### Permissions\nComments of public registrations are given read-only access to everyone.\n\nIf the comment-level is `private`, only registration contributors have permission to comment.\n\nIf the comment-level is `public`, any logged-in OSF user can comment.\n\nComments of private registrations are only visible to contributors and administrators on the registration.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include comments that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wuerf/comments/?filter[target]=wuerf\n\nComments may be filtered by their `deleted`, `target`, `date_created`, `date_modified`.\n\nMost fields are string fields and will be filtered using simple substring matching. Deleted is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting `true` or `false` in the query will cause the match to fail.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_comments_list",
        "x-response-schema": "Comment",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Comment",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the comment entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the comment entity (`comments`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the comment entity.",
                    "properties": {
                      "can_edit": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to edit this comment"
                      },
                      "content": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The content of the comment."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the comment was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the comment was last modified, as an iso8601 formatted timestamp."
                      },
                      "modified": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment has been edited."
                      },
                      "deleted": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment is deleted."
                      },
                      "is_abuse": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment is flagged or confirmed spam."
                      },
                      "is_ham": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not an admin checked the legitimacy of this comment."
                      },
                      "has_report": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment the current user reported this as spam."
                      },
                      "has_children": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment has replies."
                      },
                      "page": {
                        "description": "The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the comment entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the node the comment is on."
                      },
                      "replies": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the replies to the comment."
                      },
                      "target": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the target of the comment."
                      },
                      "reports": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the reports connected to the comment."
                      },
                      "user": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the user who created the comment."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the comment entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the comment."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "comments",
                    "attributes": {
                      "content": "comment content"
                    },
                    "relationships": {
                      "target": {
                        "data": {
                          "type": "{target_type}",
                          "id": "{target_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "replies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=jg7sezmdnt93",
                            "meta": {}
                          }
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {
                              "type": "nodes"
                            }
                          }
                        }
                      },
                      "reports": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/comments/jg7sezmdnt93/reports/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/6yc8z/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/comments/jg7sezmdnt93/"
                    },
                    "attributes": {
                      "can_edit": false,
                      "date_modified": "2016-04-01T04:45:44.123000",
                      "deleted": false,
                      "is_ham": false,
                      "has_children": false,
                      "modified": false,
                      "content": "We have published a Bayesian reanalysis of this project at PLOS ONE: http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0149794\n\nI explain some of the context on my blog: http://alexanderetz.com/2016/02/26/the-bayesian-rpp-take-2/\n\nPlease note that the analysis we use in this paper is very different from the analysis used in the blog I posted in the previous comment, so the results are different as well.",
                      "has_report": false,
                      "is_abuse": false,
                      "date_created": "2016-02-27T13:50:24.240000",
                      "page": "node"
                    },
                    "type": "comments",
                    "id": "jg7sezmdnt93"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "replies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=23pk9",
                            "meta": {}
                          }
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {
                              "type": "nodes"
                            }
                          }
                        }
                      },
                      "reports": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/comments/23pk9/reports/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/6yc8z/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/comments/23pk9/"
                    },
                    "attributes": {
                      "can_edit": false,
                      "date_modified": "2016-04-01T04:45:37.437000",
                      "deleted": false,
                      "is_ham": false,
                      "has_children": false,
                      "modified": null,
                      "content": "In this blog http://wp.me/p4sgtg-o6 I conduct a Bayesian Re-analysis of the Reproducibility Project that gives a graded measure of replication success. In an attempt to avoid dichotomous success/fail replication outcomes, I calculate a continous outcome (Bayes factor) that answers the question, does the replication result fit more with the original reported effect or a null effect? Many replications are strong successes, many are strong failures, and there are many that lie somewhere in between.",
                      "has_report": false,
                      "is_abuse": false,
                      "date_created": "2015-08-30T14:50:21.093000",
                      "page": "node"
                    },
                    "type": "comments",
                    "id": "23pk9"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/contributors/": {
      "get": {
        "summary": "List all contributors",
        "description": "A paginated list of all contributors on this registration.\nThe returned contributors are sorted by their index.\n\nContributors are users who can make changes to the registration or, in the case of private registration, have read access to the registration.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed in the contributors list on the OSF, while non-bibliographic contributors are not.\n\nNote that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 contributors. Each resource in the array contains the full representation of the contributor. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/contributors/?filter[bibliographic]=true.\n\nContributors may be filtered by their `bibliographic` and `permission` attributes.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_contributors_list",
        "x-response-schema": "Contributor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Contributor",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the contributor entity (`contributors`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the contributor entity.",
                    "properties": {
                      "bibliographic": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                      },
                      "index": {
                        "type": "integer",
                        "readOnly": false,
                        "description": "The position of this contributor in the list of project contributors and in project citations."
                      },
                      "permission": {
                        "type": "string",
                        "enum": [
                          "read",
                          "write",
                          "admin"
                        ],
                        "readOnly": false,
                        "description": "The permission level of the contributor. The default value is 'write'."
                      },
                      "unregistered_contributor": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                    "required": [
                      "node",
                      "user"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the contributor entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the the canonical API endpoint for the contributor."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "contributors",
                    "attributes": {},
                    "relationships": {
                      "user": {
                        "data": {
                          "type": "users",
                          "id": "{user_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/wucr8/contributors/7xea5/"
                    },
                    "embeds": {
                      "users": {
                        "data": {
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/7xea5/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "self": {
                                  "href": "https://api.osf.io/v2/users/7xea5/relationships/institutions/",
                                  "meta": {}
                                },
                                "related": {
                                  "href": "https://api.osf.io/v2/users/7xea5/institutions/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/7xea5/",
                            "profile_image": "https://secure.gravatar.com/avatar/0ddf92ef0f0a7011c21cd07d7940bc32?d=identicon"
                          },
                          "attributes": {
                            "family_name": "Anderl",
                            "suffix": "",
                            "locale": "de",
                            "date_registered": "2014-10-22T13:48:22.652000",
                            "middle_names": "",
                            "given_name": "Christine",
                            "full_name": "Christine Anderl",
                            "active": true,
                            "timezone": "America/Los_Angeles"
                          },
                          "type": "users",
                          "id": "7xea5"
                        }
                      }
                    },
                    "attributes": {
                      "index": 0,
                      "unregistered_contributor": null,
                      "bibliographic": true,
                      "permission": "admin"
                    },
                    "type": "contributors",
                    "id": "wucr8-7xea5"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/contributors/{user_id}/": {
      "get": {
        "summary": "Retrieve a contributor",
        "description": "Retrieves the details of a contributor on this registration.\n\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_contributors_read",
        "x-response-schema": "Contributor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Contributor",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the contributor entity (`contributors`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the contributor entity.",
                    "properties": {
                      "bibliographic": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                      },
                      "index": {
                        "type": "integer",
                        "readOnly": false,
                        "description": "The position of this contributor in the list of project contributors and in project citations."
                      },
                      "permission": {
                        "type": "string",
                        "enum": [
                          "read",
                          "write",
                          "admin"
                        ],
                        "readOnly": false,
                        "description": "The permission level of the contributor. The default value is 'write'."
                      },
                      "unregistered_contributor": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                    "required": [
                      "node",
                      "user"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the contributor entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the the canonical API endpoint for the contributor."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "contributors",
                    "attributes": {},
                    "relationships": {
                      "user": {
                        "data": {
                          "type": "users",
                          "id": "{user_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/wucr8/",
                          "meta": {}
                        }
                      }
                    },
                    "users": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/7xea5/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/registrations/wucr8/contributors/7xea5/"
                  },
                  "embeds": {
                    "users": {
                      "data": {
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/7xea5/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "self": {
                                "href": "https://api.osf.io/v2/users/7xea5/relationships/institutions/",
                                "meta": {}
                              },
                              "related": {
                                "href": "https://api.osf.io/v2/users/7xea5/institutions/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "html": "https://osf.io/7xea5/",
                          "profile_image": "https://secure.gravatar.com/avatar/0ddf92ef0f0a7011c21cd07d7940bc32?d=identicon"
                        },
                        "attributes": {
                          "family_name": "Anderl",
                          "suffix": "",
                          "locale": "de",
                          "date_registered": "2014-10-22T13:48:22.652000",
                          "middle_names": "",
                          "given_name": "Christine",
                          "full_name": "Christine Anderl",
                          "active": true,
                          "timezone": "America/Los_Angeles"
                        },
                        "type": "users",
                        "id": "7xea5"
                      }
                    }
                  },
                  "attributes": {
                    "index": 0,
                    "unregistered_contributor": null,
                    "bibliographic": true,
                    "permission": "admin"
                  },
                  "type": "contributors",
                  "id": "wucr8-7xea5"
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/files/": {
      "get": {
        "summary": "List all storage providers",
        "description": "A paginated list of storage providers enabled on the registration\n\nUsers of the OSF may access their data on a [number of cloud-storage services](https://api.osf.io/v2/#storage-providers) that have integrations with the OSF. We call these **providers**. By default, every node has access to the OSF-provided storage but may use as many of the supported providers as desired.\n\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 files. Each resource in the array is a separate file object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nNote: In the OSF filesystem model, providers are treated as folders, but with special properties that distinguish them from regular folders. Every provider folder is considered a root folder, and may not be deleted through the regular file API.",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_providers_list",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file entity (`files`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the file entity.",
                    "properties": {
                      "extra": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The kind of files object it is (`file` or `folder`)."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Name of the file"
                      },
                      "last_touched": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Unix-style path to the file relative to the provider root."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                      },
                      "current_version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Version number of the file."
                      },
                      "delete_allowed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not deletion of the file is allowed."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the file provider (e.g., `osfstorage`)"
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier for this file entity for this project and storage provider."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user is allowed to post comments."
                      },
                      "guid": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                      },
                      "checkout": {
                        "type": "string",
                        "readOnly": true,
                        "description": "SOON TO BE DEPRECATED, see relationships checkout."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe this file, as entered by project contributors."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node the file is on."
                      },
                      "checkout": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user who checked out the file."
                      },
                      "comments": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the comments on the file."
                      },
                      "versions": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the versions of the file."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file entity.",
                    "properties": {
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the page to view a file's information or a folder's contents."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the file."
                      },
                      "move": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file moves."
                      },
                      "new_folder": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                      },
                      "upload": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file uploads."
                      },
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file downloads."
                      },
                      "delete": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file deletions."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "storage_addons": "https://api.osf.io/v2/addons/?filter%5Bcategories%5D=storage",
                      "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/",
                      "new_folder": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/?kind=folder"
                    },
                    "attributes": {
                      "node": "ezcuj",
                      "path": "/",
                      "kind": "folder",
                      "name": "osfstorage",
                      "provider": "osfstorage"
                    },
                    "type": "files",
                    "id": "ezcuj:osfstorage"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/files/{provider}/": {
      "get": {
        "summary": "List all files",
        "description": "List of all the registration's files/folders for a given storage provider.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of files. Each resource in the array is a separate file object and contains the full representation of the file.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include files that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/files/osfstorage/?filter[kind]=file\n\nFiles may be filtered by `id`, `name`, `node`, `kind`, `path`, `provider`, `size`, and `last_touched`.",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the storage provider."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_files_list",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file entity (`files`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the file entity.",
                    "properties": {
                      "extra": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The kind of files object it is (`file` or `folder`)."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Name of the file"
                      },
                      "last_touched": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Unix-style path to the file relative to the provider root."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                      },
                      "current_version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Version number of the file."
                      },
                      "delete_allowed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not deletion of the file is allowed."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the file provider (e.g., `osfstorage`)"
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier for this file entity for this project and storage provider."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user is allowed to post comments."
                      },
                      "guid": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                      },
                      "checkout": {
                        "type": "string",
                        "readOnly": true,
                        "description": "SOON TO BE DEPRECATED, see relationships checkout."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe this file, as entered by project contributors."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node the file is on."
                      },
                      "checkout": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user who checked out the file."
                      },
                      "comments": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the comments on the file."
                      },
                      "versions": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the versions of the file."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file entity.",
                    "properties": {
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the page to view a file's information or a folder's contents."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the file."
                      },
                      "move": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file moves."
                      },
                      "new_folder": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                      },
                      "upload": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file uploads."
                      },
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file downloads."
                      },
                      "delete": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file deletions."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv",
                            "meta": {}
                          }
                        }
                      },
                      "versions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "info": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                      "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                      "move": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "download": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "delete": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54"
                    },
                    "attributes": {
                      "extra": {
                        "hashes": {
                          "sha256": "2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e",
                          "md5": "44325d4f13b09f3769ede09d7c20a82c"
                        },
                        "downloads": 447
                      },
                      "kind": "file",
                      "name": "OSC2012.pdf",
                      "last_touched": "2015-09-18T01:11:16.328000",
                      "materialized_path": "/OSC2012.pdf",
                      "date_modified": "2014-10-17T19:24:12.264Z",
                      "current_version": 1,
                      "delete_allowed": true,
                      "date_created": "2014-10-17T19:24:12.264Z",
                      "provider": "osfstorage",
                      "path": "/553e69248c5e4a219919ea54",
                      "current_user_can_comment": true,
                      "guid": "sejcv",
                      "checkout": null,
                      "tags": [],
                      "size": 216945
                    },
                    "type": "files",
                    "id": "553e69248c5e4a219919ea54"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/files/{provider}/{path}/": {
      "get": {
        "summary": "Retrieve a file",
        "description": "Retrieves the details of a registration file for the given storage provider.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested registration file object, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the storage provider."
          },
          {
            "in": "path",
            "type": "string",
            "name": "path",
            "required": true,
            "description": "The unique identifier of the file path."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_files_read",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "File",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the file entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the file entity (`files`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the file entity.",
                  "properties": {
                    "extra": {
                      "type": "object",
                      "readOnly": true,
                      "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                    },
                    "kind": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The kind of files object it is (`file` or `folder`)."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "Name of the file"
                    },
                    "last_touched": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                    },
                    "materialized_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Unix-style path to the file relative to the provider root."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                    },
                    "current_version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Version number of the file."
                    },
                    "delete_allowed": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not deletion of the file is allowed."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The id of the file provider (e.g., `osfstorage`)"
                    },
                    "path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique identifier for this file entity for this project and storage provider."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user is allowed to post comments."
                    },
                    "guid": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                    },
                    "checkout": {
                      "type": "string",
                      "readOnly": true,
                      "description": "SOON TO BE DEPRECATED, see relationships checkout."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe this file, as entered by project contributors."
                    },
                    "size": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Size of the file in bytes."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "node": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    },
                    "checkout": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user who checked out the file."
                    },
                    "comments": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the comments on the file."
                    },
                    "versions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the versions of the file."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the file entity.",
                  "properties": {
                    "info": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the page to view a file's information or a folder's contents."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the file."
                    },
                    "move": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file moves."
                    },
                    "new_folder": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                    },
                    "upload": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file uploads."
                    },
                    "download": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file downloads."
                    },
                    "delete": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file deletions."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv",
                          "meta": {}
                        }
                      }
                    },
                    "versions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "info": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "move": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "download": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "delete": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54"
                  },
                  "attributes": {
                    "extra": {
                      "hashes": {
                        "sha256": "2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e",
                        "md5": "44325d4f13b09f3769ede09d7c20a82c"
                      },
                      "downloads": 447
                    },
                    "kind": "file",
                    "name": "OSC2012.pdf",
                    "last_touched": "2015-09-18T01:11:16.328000",
                    "materialized_path": "/OSC2012.pdf",
                    "date_modified": "2014-10-17T19:24:12.264Z",
                    "current_version": 1,
                    "delete_allowed": true,
                    "date_created": "2014-10-17T19:24:12.264Z",
                    "provider": "osfstorage",
                    "path": "/553e69248c5e4a219919ea54",
                    "current_user_can_comment": true,
                    "guid": "sejcv",
                    "checkout": null,
                    "tags": [],
                    "size": 216945
                  },
                  "type": "files",
                  "id": "553e69248c5e4a219919ea54"
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/forks/": {
      "get": {
        "summary": "List all forks",
        "description": "\nA paginated list of the registration’s forks\n\nThe returned forks are sorted by their `forked_date`, with the most recent forks appearing first.\n\nForking a registration creates a copy of an existing registration and all of its contents.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 forks. If the current registration has no fork, the `data` key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the registration's fork.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_forks_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Registration",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the registration."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the registration entity (`registrations`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the registration entity.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the registered node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                      },
                      "date_withdrawn": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the registered node."
                      },
                      "embargo_end_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a fork of another node."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                      },
                      "pending_embargo_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                      },
                      "pending_registration_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval from project administrators."
                      },
                      "pending_withdrawal": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the registration is publicly visible."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                      },
                      "registered_meta": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary with supplemental registration questions and responses."
                      },
                      "registration_supplement": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registration schema this registration conforms to."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe the registered node."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registered node."
                      },
                      "withdrawn": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration has been withdrawn."
                      },
                      "withdrawal_justification": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this registration is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of the registered node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this registration."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this registration."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this registration."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this registration."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this registration."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this registration."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                      },
                      "registered_by": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the user that initiated this registration."
                      },
                      "registered_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that this registration was registered from."
                      },
                      "registration_schema": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the metaschema that this registration conforms to."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this registration."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this registration."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the registrations entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the registration's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this registration."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "registrations",
                    "attributes": {
                      "draft_registration": "{draft_registration_id}",
                      "registration_choice": "embargo",
                      "lift_embargo": "2017-05-10T20:44:03.185000"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/metaschemas/564d31db8c5e4a7c9694b2c0/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/comments/?filter%5Btarget%5D=4cmnz",
                            "meta": {}
                          }
                        }
                      },
                      "registered_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5wprs/",
                            "meta": {}
                          }
                        }
                      },
                      "registered_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/children/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/4cmnz/",
                      "html": "https://osf.io/4cmnz/"
                    },
                    "attributes": {
                      "registration_supplement": "OSF-Standard Pre-Data Collection Registration",
                      "pending_embargo_approval": false,
                      "registration": true,
                      "embargo_end_date": null,
                      "withdrawn": false,
                      "withdrawal_justification": null,
                      "category": "project",
                      "preprint": false,
                      "current_user_permissions": [
                        "read"
                      ],
                      "title": "Full Project Description",
                      "registered_meta": {
                        "looked": {
                          "comments": [],
                          "value": "No",
                          "extra": []
                        },
                        "datacompletion": {
                          "comments": [],
                          "value": "Yes, data collection is underway or complete",
                          "extra": []
                        },
                        "comments": {
                          "comments": [],
                          "value": "Data collection for measurement time T1 is underway, but no data has been collected for T2 (when menstrual cycle information will be assessed). Therefore, data cannot be analysed at the time of preregistration.",
                          "extra": []
                        }
                      },
                      "public": true,
                      "fork": false,
                      "description": "",
                      "tags": [],
                      "collection": false,
                      "current_user_can_comment": false,
                      "pending_registration_approval": false,
                      "date_modified": "2016-05-23T14:22:03.885000",
                      "date_registered": "2016-05-23T14:24:25.478000",
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "date_created": "2016-05-23T12:11:14.853000",
                      "pending_withdrawal": false,
                      "node_license": null
                    },
                    "type": "registrations",
                    "id": "4cmnz"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a fork",
        "description": "Creates a fork of the given registration.\n\nForking a project creates a copy of an existing registration and all of its contents. The fork always points back to the original registration, forming a network of registrations.\n\nYou might use a fork to copy another's work to build on and extend. For example, a professor may create an OSF project of materials for individual student use. Each student forks the project to have his or her own copy of the materials to start his/her own work.\n\nWhen creating a fork, your fork will only contain public components of the current registration and components for which you are a contributor. Private components that you do not have access to will not be forked.\n#### Required\nThere are no required attributes when creating a fork, as all of the forked registration's attributes will be copied from the current registration.\n\nThe `title` field is optional, with the default title being \"Fork of \" prepended to the current registration's title.\n#### Returns\nReturns a JSON object with a `data` key containing the complete representation of the forked registration, if the request is successful.\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the registration."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the registration entity (`registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the registration entity.",
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": true,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the registered node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                    },
                    "date_withdrawn": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the registered node."
                    },
                    "embargo_end_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a fork of another node."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                    },
                    "pending_embargo_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                    },
                    "pending_registration_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval from project administrators."
                    },
                    "pending_withdrawal": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the registration is publicly visible."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                    },
                    "registered_meta": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary with supplemental registration questions and responses."
                    },
                    "registration_supplement": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registration schema this registration conforms to."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe the registered node."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registered node."
                    },
                    "withdrawn": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration has been withdrawn."
                    },
                    "withdrawal_justification": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this registration is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of the registered node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this registration."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this registration."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this registration."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this registration."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this registration."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this registration."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                    },
                    "registered_by": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user that initiated this registration."
                    },
                    "registered_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this registration was registered from."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the metaschema that this registration conforms to."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this registration."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this registration."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the registrations entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the registration's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this registration."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "registrations",
                  "attributes": {
                    "draft_registration": "{draft_registration_id}",
                    "registration_choice": "embargo",
                    "lift_embargo": "2017-05-10T20:44:03.185000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_forks_create",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Registration",
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/registrations/{registration_id}/identifiers/": {
      "get": {
        "summary": "List all identifiers",
        "description": "A paginated list of the registration's identifiers.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of identifiers. Each resource in the array is a separate identifier object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\n\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/identifiers/?filter[category]=ark\n\nIdentifiers may be filtered by their `category` e.g `ark` or `doi`.",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_identifiers_list",
        "x-response-schema": "Identifier",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Identifier",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the identifier entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the identifier entity (`identifiers`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the identifier entity.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "enum": [
                          "ark",
                          "doi"
                        ],
                        "readOnly": true,
                        "description": "The category of the identifier"
                      },
                      "value": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier value itself"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the identifier entity.",
                    "properties": {
                      "referent": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the node the identifier refers to."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the identifier entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the identifier."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "referent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b459/"
                    },
                    "attributes": {
                      "category": "doi",
                      "value": "10.17605/OSF.IO/73PND"
                    },
                    "type": "identifiers",
                    "id": "57f1641db83f6901ed94b459"
                  },
                  {
                    "relationships": {
                      "referent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b45a/"
                    },
                    "attributes": {
                      "category": "ark",
                      "value": "c7605/osf.io/73pnd"
                    },
                    "type": "identifiers",
                    "id": "57f1641db83f6901ed94b45a"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/institutions/": {
      "get": {
        "summary": "List all institutions",
        "description": "A paginated list of institutions affiliated with the registration.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 affiliated institutions. Each resource in the array is a separate institution object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_institutions_list",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Institution",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the institution entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the institution entity (`institutions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the institution entity.",
                    "properties": {
                      "auth_url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Url used to authenticate institution specific login."
                      },
                      "logo_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Static path to the institution specific logo."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full name of the institution."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Description of the institution."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the nodes affiliated with the institution."
                      },
                      "users": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the users affiliated with the institution."
                      },
                      "registrations": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the registrations affiliated with the institution."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the institutions entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the institution."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/cos/"
                    },
                    "attributes": {
                      "auth_url": null,
                      "logo_path": "/static/img/institutions/shields/cos-shield.png",
                      "name": "Center For Open Science",
                      "description": "COS is a non-profit technology company providing free and open services to increase inclusivity and transparency of research. Find out more at <a href=\"https://cos.io\">cos.io</a>."
                    },
                    "type": "institutions",
                    "id": "cos"
                  },
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/uva/"
                    },
                    "attributes": {
                      "auth_url": "https://accounts.osf.io/Shibboleth.sso/Login?entityID=urn%3Amace%3Aincommon%3Avirginia.edu",
                      "logo_path": "/static/img/institutions/shields/uva-shield.png",
                      "name": "University of Virginia",
                      "description": "In partnership with the <a href=\"http://www.virginia.edu/vpr/\">Vice President for Research</a>, <a href=\"http://dsi.virginia.edu\">Data Science Institute</a>, <a href=\"https://www.hsl.virginia.edu\">Health Sciences Library</a>, and <a href=\"http://data.library.virginia.edu\">University Library</a>. Learn more about <a href=\"http://cadre.virginia.edu\">UVA resources for computational and data-driven research</a>. Projects must abide by the <a href=\"http://www.virginia.edu/informationpolicy/security.html\">University Security and Data Protection Policies</a>."
                    },
                    "type": "institutions",
                    "id": "uva"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/linked_nodes/": {
      "get": {
        "summary": "List all linked nodes",
        "description": "List of all nodes linked to the registration.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/linked_nodes/?filter[title]=reproducibility/?filter[title]=reproducibility.\n\nNodes may be filtered by their `title`, `category`, `description`, `public`, `registration`, or `tags`. `title`, `description`, and `category` are string fields and will be filteres using simple substring matching. `public`, `registration` are boolean and can be filtered using truthy values, such as `true`, `false`, `0`, `1`. `tags` is an array of simple strings.",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_linked_nodes_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/comments/?filter%5Btarget%5D=bifc7",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/bifc7/",
                      "html": "https://osf.io/bifc7/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "This is an independent replication as part of the Reproducibility Project: Psychology.",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2017-03-03T05:00:31.512000",
                      "title": "Replication of WA Cunningham, JJ Van Bavel, IR Johnsen (2008, PS 19(2))",
                      "collection": false,
                      "registration": false,
                      "date_created": "2014-07-28T13:53:04.508000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "bifc7"
                  },
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/kxhz5/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/comments/?filter%5Btarget%5D=73pnd",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/73pnd/",
                      "html": "https://osf.io/73pnd/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": true,
                      "preprint": false,
                      "description": null,
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-10-02T19:50:23.605000",
                      "title": "Replication of Hajcak &amp; Foti (2008, PS, Study 1)",
                      "collection": false,
                      "registration": false,
                      "date_created": "2012-10-31T18:50:46.111000",
                      "current_user_can_comment": false,
                      "node_license": {
                        "copyright_holders": [
                          ""
                        ],
                        "year": "2016"
                      },
                      "public": true,
                      "tags": [
                        "anxiety",
                        "EMG",
                        "EEG",
                        "motivation",
                        "ERN"
                      ]
                    },
                    "type": "nodes",
                    "id": "73pnd"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/logs/": {
      "get": {
        "summary": "List all logs",
        "description": "A paginated list of the registration's logs.\n\nThe returned logs are sorted by their `date`, with the most recents logs appearing first.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 logs. Each resource in the array is a separate logs object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include logs that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/logs/?filter[action]=made_private.\n\nLogs may be filtered by their `action`, and `date`.",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_logs_list",
        "x-response-schema": "Log",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Log",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the log."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the log (`logs`)"
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the log.",
                    "required": [
                      "action",
                      "date"
                    ],
                    "properties": {
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time at which the log was created, as an iso8601 formatted timestamp."
                      },
                      "action": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type of action performed on the OSF. See actions section for full list of possible actions."
                      },
                      "params": {
                        "type": "object",
                        "title": "Log Params",
                        "readOnly": true,
                        "description": "The type of action performed on the OSF. See description for full list of possible actions.",
                        "properties": {
                          "addon": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The addon associated with the connected node."
                          },
                          "anonymous_link": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "The view only link added to the node was anonymous."
                          },
                          "bucket": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The Amazon s3 bucket connected to the connected node."
                          },
                          "citation_name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Name of citation associated with the connected node."
                          },
                          "contributors": {
                            "type": "string",
                            "readOnly": true,
                            "description": "List of contributors on the connected node involved in the action represented by this node log."
                          },
                          "data_set": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The dataset associated with the connected node."
                          },
                          "destination": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title."
                          },
                          "figshare_title": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Title of the fighshare project associated with this node log"
                          },
                          "forward_url": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL that the connected node forwards to."
                          },
                          "github_user": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The github user involved with the action represented by this node log."
                          },
                          "github_repo": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The github repository involved with the action represented by this node log."
                          },
                          "file": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary with information about the file involved with the log."
                          },
                          "filename": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Filename for the file associated with the log."
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Kind of the object associated with the log."
                          },
                          "folder": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Folder associated with the log."
                          },
                          "folder_name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Name of the folder associated with the log."
                          },
                          "license": {
                            "type": "string",
                            "readOnly": true,
                            "description": "License for the associated node."
                          },
                          "identifiers": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary containing the DOI and ARK ID for a preprint associated with the log."
                          },
                          "institution": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary containing the ID and Name of the institution associated with the log."
                          },
                          "old_page": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Old name of wiki page for a wiki rename log action."
                          },
                          "page": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Current name of wiki page for rename log action."
                          },
                          "page_id": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Primary key of the wiki page associated with the log."
                          },
                          "params_node": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Node that is refered to in the params of the log."
                          },
                          "params_project": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Project that is refered to in the params of the log."
                          },
                          "path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Path for a file associated with the log."
                          },
                          "pointer": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the node that is linked to the associated node."
                          },
                          "preprint": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Preprint related to the associated node."
                          },
                          "preprint_provider": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Preprint provider for the associated node."
                          },
                          "previous_institution": {
                            "type": "string",
                            "readOnly": true,
                            "description": "If a primary institution for the associated node is changed, this will show the previous institution."
                          },
                          "source": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title."
                          },
                          "study": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dataverse study linked to the associated node."
                          },
                          "tag": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Tag associated with the associated node."
                          },
                          "tags": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Tags associated with the associated node."
                          },
                          "target": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title."
                          },
                          "template_node": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing information about the node that was used as a template for the associated node."
                          },
                          "title_new": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The new title for the associated node."
                          },
                          "title_original": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The original title for the associated node"
                          },
                          "updated_fields": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing all of the fields updated on the associated node."
                          },
                          "urls": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Links to access information about the file associated with this log."
                          },
                          "version": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Version of the wiki page associated with this log."
                          },
                          "wiki": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the wiki page associated with the log."
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the log.",
                    "required": [
                      "node"
                    ],
                    "properties": {
                      "node": {
                        "description": "A relationship to the node associated with this log.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "original_node": {
                        "description": "A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "user": {
                        "description": "A relationship to the user who performed the log action.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "linked_node": {
                        "description": "A relationship to the node linked to this log.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "template_node": {
                        "description": "A relationship to the node used as a template for this log.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "links": {
                    "description": "URLs to alternative representations of the log entity.",
                    "readOnly": true,
                    "type": "object",
                    "title": "Links",
                    "required": [
                      "self"
                    ],
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the log."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/jk5cv/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/4fc706a80b6e9118ef000122/"
                    },
                    "attributes": {
                      "date": "2012-05-31T05:50:32.083000",
                      "action": "contributor_added",
                      "params": {
                        "params_node": {
                          "id": "ezcuj",
                          "title": "Reproducibility Project: Psychology"
                        },
                        "contributors": [
                          {
                            "family_name": "Nosek",
                            "middle_names": "A.",
                            "given_name": "Brian",
                            "full_name": "Brian A. Nosek",
                            "active": true,
                            "id": "cdi38"
                          }
                        ]
                      }
                    },
                    "type": "logs",
                    "id": "4fc706a80b6e9118ef000122"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/n32tp/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/7eshv/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/57431299594d9001ead7174f/"
                    },
                    "attributes": {
                      "date": "2016-05-23T14:22:20.142000",
                      "action": "osf_storage_file_updated",
                      "params": {
                        "contributors": [],
                        "params_project": {
                          "id": "5wprs",
                          "title": "Full Project Description"
                        },
                        "params_node": {
                          "id": "7eshv",
                          "title": "Full Questionnaire [in original language]"
                        },
                        "urls": {
                          "download": "/project/7eshv/files/osfstorage/5742f41c6c613b01de5b15dd/?action=download",
                          "view": "/project/7eshv/files/osfstorage/5742f41c6c613b01de5b15dd/"
                        },
                        "preprint_provider": null,
                        "path": "/StudyMaterials_UEH1.pdf"
                      }
                    },
                    "type": "logs",
                    "id": "57431299594d9001ead7174f"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/n32tp/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/7eshv/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/57431299594d9001ead7174d/"
                    },
                    "attributes": {
                      "date": "2016-05-23T12:13:58.371000",
                      "action": "project_created",
                      "params": {
                        "preprint_provider": null,
                        "params_node": {
                          "id": "7eshv",
                          "title": "Full Questionnaire [in original language]"
                        },
                        "params_project": null,
                        "contributors": []
                      }
                    },
                    "type": "logs",
                    "id": "57431299594d9001ead7174d"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5wprs/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/57431299594d9001ead71746/"
                    },
                    "attributes": {
                      "date": "2016-05-23T12:11:14.853000",
                      "action": "project_created",
                      "params": {
                        "preprint_provider": null,
                        "params_node": {
                          "id": "5wprs",
                          "title": "Full Project Description"
                        },
                        "params_project": null,
                        "contributors": []
                      }
                    },
                    "type": "logs",
                    "id": "57431299594d9001ead71746"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/6gbkh/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/57431299594d9001ead71742/"
                    },
                    "attributes": {
                      "date": "2016-05-23T12:10:48.868000",
                      "action": "project_created",
                      "params": {
                        "preprint_provider": null,
                        "params_node": {
                          "id": "6gbkh",
                          "title": "Investigating fluctuations in cooperative preferences across the natural female menstrual cycle in a within-subjects-design"
                        },
                        "params_project": null,
                        "contributors": []
                      }
                    },
                    "type": "logs",
                    "id": "57431299594d9001ead71742"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 5,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/view_only_links/": {
      "get": {
        "summary": "List all view only links",
        "description": "A paginated list of view only links created for this registration.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 view only links. Each resource in the array is a view only link object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Permissions\n\nView only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.\n\n#### Filtering\n\nYou can optionally request that the response only include view only links that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/view_only_links/?filter[anonymous]=true.\n\nView Only Links may be filtered based on their `name`, `anonymous` and `date_created` fields. Possible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_view_only_links_list",
        "x-response-schema": "View Only Link",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "view-only-links",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the view only link."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the view only link ('view-only-links')."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the view only link entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the view only link was created, as an iso8601 formatted timestamp."
                      },
                      "anonymous": {
                        "type": "boolean",
                        "default": true,
                        "readOnly": false,
                        "description": "Whether or not the view only link has anonymized contributors"
                      },
                      "name": {
                        "type": "string",
                        "default": "Shared project link",
                        "readOnly": false,
                        "description": "The name of the view only link"
                      },
                      "key": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The view only key"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the view only link entity.",
                    "required": [
                      "nodes",
                      "creator"
                    ],
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": false,
                        "description": "A relationship to the nodes which this view only link gives read-only access to."
                      },
                      "creator": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the user who created this view only link."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "self": {
                            "href": "http://api.osf.io/v2/view_only_links/58d03846a170c50025baae61/relationships/nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "http://api.osf.io/v2/view_only_links/58d03846a170c50025baae61/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "creator": {
                        "links": {
                          "related": {
                            "href": "http://api.osf.io/v2/users/4xpu9/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/view_only_links/58d03846a170c50025baae61/"
                    },
                    "attributes": {
                      "date_created": "2017-03-20T20:15:02.488643",
                      "anonymous": false,
                      "key": "c1df490be3294a9bac01ff05c4097ab7",
                      "name": "vol name"
                    },
                    "type": "view_only_links",
                    "id": "58d03846a170c50025baae61"
                  },
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "self": {
                            "href": "http://api.osf.io/v2/view_only_links/58d13827a170c50025baae6e/relationships/nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "http://api.osf.io/v2/view_only_links/58d13827a170c50025baae6e/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "creator": {
                        "links": {
                          "related": {
                            "href": "http://api.osf.io/v2/users/4xpu9/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/view_only_links/58d13827a170c50025baae6e/"
                    },
                    "attributes": {
                      "date_created": "2017-03-21T14:26:47.507504",
                      "anonymous": false,
                      "key": "9794ac36085e4d7086ff4dab49daf1cb",
                      "name": "vol name"
                    },
                    "type": "view_only_links",
                    "id": "58d13827a170c50025baae6e"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/view_only_links/{link_id}/": {
      "get": {
        "summary": "Retrieve a view only link",
        "description": "Retrieves the details of a view only link created from this registration.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested view only link, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Permissions\n\nView only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "type": "string",
            "name": "link_id",
            "required": true,
            "description": "The unique identifier of the view only link."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_view_only_links_read",
        "x-response-schema": "View Only Link",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "view-only-links",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the view only link."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the view only link ('view-only-links')."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the view only link entity.",
                  "properties": {
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the view only link was created, as an iso8601 formatted timestamp."
                    },
                    "anonymous": {
                      "type": "boolean",
                      "default": true,
                      "readOnly": false,
                      "description": "Whether or not the view only link has anonymized contributors"
                    },
                    "name": {
                      "type": "string",
                      "default": "Shared project link",
                      "readOnly": false,
                      "description": "The name of the view only link"
                    },
                    "key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The view only key"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the view only link entity.",
                  "required": [
                    "nodes",
                    "creator"
                  ],
                  "properties": {
                    "nodes": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A relationship to the nodes which this view only link gives read-only access to."
                    },
                    "creator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the user who created this view only link."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "nodes": {
                      "links": {
                        "self": {
                          "href": "http://api.osf.io/v2/view_only_links/<link_id>/relationships/nodes/",
                          "meta": {}
                        },
                        "related": {
                          "href": "http://api.osf.io/v2/view_only_links/<link_id>/nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "creator": {
                      "links": {
                        "related": {
                          "href": "http://api.osf.io/v2/users/<user_id>/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "attributes": {
                    "date_created": "2017-03-20T20:11:01.603851",
                    "anonymous": false,
                    "key": "<view_only_link_key>",
                    "name": "Test View Only Link"
                  },
                  "type": "view-only-links",
                  "id": "<link_id>"
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/wikis/": {
      "get": {
        "summary": "List all wikis",
        "description": "A paginated list of the registration's wiki pages\n#### Returns\nA list of all registration's current wiki page versions ordered by their date_modified. Each resource contains the full representation of the wiki, meaning additional requests to an individual wiki's detail view are not necessary.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Filtering\nWiki pages can be filtered based on their `name` and `date_modified` fields.\n+ `filter[name]=<Str>` -- filter wiki pages by name\n+ `filter[date_modified][comparison_operator]=YYYY-MM-DDTH:M:S` -- filter wiki pages based on date modified.\n\nPossible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_wikis_list",
        "x-response-schema": "Wiki",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Wiki",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the wiki."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the wiki (`wikis`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the wiki.",
                    "required": [
                      "kind",
                      "name",
                      "date_modified",
                      "extra",
                      "content_type",
                      "path",
                      "current_user_can_comment",
                      "materialized_path",
                      "size"
                    ],
                    "properties": {
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time at which the wiki was last modified, as an iso8601 formatted timestamp."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type of object."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name/title of the wiki page."
                      },
                      "extra": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing additional metadata about this wiki, including version information."
                      },
                      "content_type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Content type of the wiki (`text/markdown`)."
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Path to the wiki object."
                      },
                      "current_user_can_comment": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Whether the current user is allowed to post comments on this wiki."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Materialized path to the wiki object."
                      },
                      "size": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Size of the wiki."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the wiki.",
                    "required": [
                      "node",
                      "user",
                      "comments"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the associated node."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the user associated with this wiki."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the comments related to this wiki."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the wiki.",
                    "properties": {
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL to download the content of the wiki."
                      },
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the wiki."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the wiki."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wu3a4/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/edb8y/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wu3a4/comments/?filter%5Btarget%5D=9rb7g",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "info": "https://api.osf.io/v2/wikis/9rb7g/",
                      "download": "https://api.osf.io/v2/wikis/9rb7g/content/",
                      "self": "https://api.osf.io/v2/wikis/9rb7g/"
                    },
                    "attributes": {
                      "kind": "file",
                      "name": "home",
                      "date_modified": "2015-02-11T21:16:50.918000",
                      "extra": {
                        "version": 1
                      },
                      "content_type": "text/markdown",
                      "path": "/9rb7g",
                      "current_user_can_comment": false,
                      "materialized_path": "/9rb7g",
                      "size": 1544
                    },
                    "type": "wikis",
                    "id": "9rb7g"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxonomies/": {
      "get": {
        "summary": "List all taxonomies",
        "description": "\nA paginated list of all [bepress disciplines taxonomies](https://www.bepress.com/wp-content/uploads/2016/12/Digital-Commons-Disciplines-taxonomy-2017-01.pdf).\nNote: this API endpoint is under active development, and is subject to change in the future.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 taxonomies. Each resource in the array is a separate taxonomy object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include taxonomies that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/taxonomies/?filter['id']='{taxonomy_id}'.\n\nTaxonomies may be filtered by their `id`, `parents`, and `text`.",
        "tags": [
          "Taxonomies"
        ],
        "operationId": "taxonomies_list",
        "x-response-schema": "Taxonomy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Taxonomy",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the taxonomy entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the taxonomy entity (`taxonomies`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the taxonomy entity.",
                    "properties": {
                      "text": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The text name of the taxonomy"
                      },
                      "child_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "The number of children this taxonomy contains."
                      },
                      "parents": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the taxonomy entity.",
                    "properties": {
                      "parents": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "An array of links to to this taxonomy's parents. This field is deprecated as of verson 2.4."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the taxonomy."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca838/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240d954be81056ceca97a/"
                      ]
                    },
                    "attributes": {
                      "text": "History of Philosophy",
                      "parents": [
                        {
                          "text": "Philosophy",
                          "id": "584240d954be81056ceca97a"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca838"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca839/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240db54be81056cecacd3/"
                      ]
                    },
                    "attributes": {
                      "text": "Animal Law",
                      "parents": [
                        {
                          "text": "Law",
                          "id": "584240db54be81056cecacd3"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca839"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca83a/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240db54be81056cecacd3/"
                      ]
                    },
                    "attributes": {
                      "text": "Consumer Protection Law",
                      "parents": [
                        {
                          "text": "Law",
                          "id": "584240db54be81056cecacd3"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca83a"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca83b/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240da54be81056cecaa9c/"
                      ]
                    },
                    "attributes": {
                      "text": "Missions and World Christianity",
                      "parents": [
                        {
                          "text": "Religion",
                          "id": "584240da54be81056cecaa9c"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca83b"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca83c/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240d954be81056ceca8fd/"
                      ]
                    },
                    "attributes": {
                      "text": "Other Teacher Education and Professional Development",
                      "parents": [
                        {
                          "text": "Teacher Education and Professional Development",
                          "id": "584240d954be81056ceca8fd"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca83c"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 5,
                  "per_page": 10
                }
              }
            }
          }
        }
      }
    },
    "/taxonomies/{taxonomy_id}/": {
      "get": {
        "summary": "Retrieve a taxonomy",
        "description": "Retrieves the details of a taxonomy.\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested taxonomy, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "taxonomy_id",
            "description": "The unique identifier of the taxonomy."
          }
        ],
        "tags": [
          "Taxonomies"
        ],
        "operationId": "taxonomies_read",
        "x-response-schema": "Taxonomy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Taxonomy",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the taxonomy entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the taxonomy entity (`taxonomies`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the taxonomy entity.",
                  "properties": {
                    "text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text name of the taxonomy"
                    },
                    "child_count": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "The number of children this taxonomy contains."
                    },
                    "parents": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the taxonomy entity.",
                  "properties": {
                    "parents": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "An array of links to to this taxonomy's parents. This field is deprecated as of verson 2.4."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the taxonomy."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "https://api.osf.io/v2/taxonomies/584240d954be81056ceca841/",
                    "parents": [
                      "https://api.osf.io/v2/taxonomies/584240da54be81056cecab8f/"
                    ]
                  },
                  "attributes": {
                    "text": "Public Economics",
                    "parents": [
                      {
                        "text": "Economics",
                        "id": "584240da54be81056cecab8f"
                      }
                    ],
                    "child_count": 0
                  },
                  "type": "taxonomies",
                  "id": "584240d954be81056ceca841"
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "summary": "List all users",
        "description": "\nA paginated list of all users registered on the OSF. The returned users are sorted by their `date_registered`, with the most recently registered users appearing first.\n\nThe subroute `/users/me/` is a special endpoint that always points to the currently logged-in user.\n#### Versioning\nAs of version `2.3`, merged users will not be returned from this endpoint.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 users. Each resource in the array is a separate users object and contains the full representation of the user, meaning additional requests to a user's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/?filter[family_name]=Nosek.\n\nUsers may be filtered by their `id`, `full_name`, `given_name`, `middle_name`, or `family_name`.",
        "tags": [
          "Users"
        ],
        "operationId": "users_list",
        "x-response-schema": "User",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "User",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the user entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the user entity (`users`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the user entity.",
                    "required": [
                      "active",
                      "date_registered",
                      "full_name"
                    ],
                    "properties": {
                      "active": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the user is an active user."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                      },
                      "family_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The family name of the user, used for bibliographic citations."
                      },
                      "full_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The full name of the user, used for display on the OSF."
                      },
                      "given_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The given name of the user, used for bibliographic citations."
                      },
                      "locale": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The user's locale, e.g. 'en_US'."
                      },
                      "middle_names": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The middle names of the user, used for bibliographic citations."
                      },
                      "suffix": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The suffix of the user, used for bibliographic citations."
                      },
                      "timezone": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The user's timezone, e.g. 'Etc/UTC'."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                    "properties": {
                      "institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions the user is affiliated with."
                      },
                      "nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes the user is a contributor to."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the user entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user's profile page on the OSF."
                      },
                      "profile_image": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user's profile image."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "users",
                    "id": "{user_id}",
                    "attributes": {
                      "full_name": "Casey M. Rollins",
                      "middle_names": "Marie"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/q7fts/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/users/q7fts/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/users/q7fts/institutions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/users/q7fts/",
                      "html": "https://osf.io/q7fts/",
                      "profile_image": "https://secure.gravatar.com/avatar/e9d9311ab2f5ab7492a86ac9adb5c8e9?d=identicon"
                    },
                    "attributes": {
                      "family_name": "Rollins",
                      "suffix": "",
                      "locale": "en_US",
                      "date_registered": "2014-06-15T17:39:06.701000",
                      "middle_names": "",
                      "given_name": "Casey",
                      "full_name": "Casey Rollins",
                      "active": true,
                      "timezone": "America/New_York"
                    },
                    "type": "users",
                    "id": "q7fts"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/users/?page=4337",
                  "prev": null,
                  "next": "https://api.osf.io/v2/users/?page=2",
                  "meta": {
                    "total": 43370,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/": {
      "get": {
        "summary": "Retrieve a user",
        "description": "Retrieves the details of a given users.\n\nThe returned information includes the user's bibliographic information and the date the user was registered.\n\nAdditionally, relationships to the list of institutions with which the user is affiliated, and to the list of nodes which the user contributes to (that the requesting user has permission to see) are returned.\n\nIf `me` is given as the `user_id` in the request path, the record of the currently logged-in user will be returned.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested user, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_read",
        "x-response-schema": "User",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "User",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the user entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the user entity (`users`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the user entity.",
                  "required": [
                    "active",
                    "date_registered",
                    "full_name"
                  ],
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the user is an active user."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                    },
                    "family_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The family name of the user, used for bibliographic citations."
                    },
                    "full_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The full name of the user, used for display on the OSF."
                    },
                    "given_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The given name of the user, used for bibliographic citations."
                    },
                    "locale": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's locale, e.g. 'en_US'."
                    },
                    "middle_names": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The middle names of the user, used for bibliographic citations."
                    },
                    "suffix": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The suffix of the user, used for bibliographic citations."
                    },
                    "timezone": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's timezone, e.g. 'Etc/UTC'."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                  "properties": {
                    "institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions the user is affiliated with."
                    },
                    "nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes the user is a contributor to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the user entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile page on the OSF."
                    },
                    "profile_image": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile image."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "users",
                  "id": "{user_id}",
                  "attributes": {
                    "full_name": "Casey M. Rollins",
                    "middle_names": "Marie"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "nodes": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/q7fts/nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "institutions": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/users/q7fts/relationships/institutions/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/users/q7fts/institutions/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/users/q7fts/",
                    "html": "https://osf.io/q7fts/",
                    "profile_image": "https://secure.gravatar.com/avatar/e9d9311ab2f5ab7492a86ac9adb5c8e9?d=identicon"
                  },
                  "attributes": {
                    "family_name": "Rollins",
                    "suffix": "",
                    "locale": "en_US",
                    "date_registered": "2014-06-15T17:39:06.701000",
                    "middle_names": "",
                    "given_name": "Casey",
                    "full_name": "Casey Rollins",
                    "active": true,
                    "timezone": "America/New_York"
                  },
                  "type": "users",
                  "id": "q7fts"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a user",
        "description": "Updates a user by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nUsers can be updated with either a **PUT** or **PATCH** request. The `full_name` field is mandatory in a **PUT** request, and optional in a **PATCH**.\n\n**Note**: if you make a PUT/PATCH request to the `/users/me/` endpoint, you must still provide your full user ID in the ID field of the request. We do not support using the `me` alias in request bodies at this time.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "User",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the user entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the user entity (`users`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the user entity.",
                  "required": [
                    "active",
                    "date_registered",
                    "full_name"
                  ],
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the user is an active user."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                    },
                    "family_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The family name of the user, used for bibliographic citations."
                    },
                    "full_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The full name of the user, used for display on the OSF."
                    },
                    "given_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The given name of the user, used for bibliographic citations."
                    },
                    "locale": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's locale, e.g. 'en_US'."
                    },
                    "middle_names": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The middle names of the user, used for bibliographic citations."
                    },
                    "suffix": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The suffix of the user, used for bibliographic citations."
                    },
                    "timezone": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's timezone, e.g. 'Etc/UTC'."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                  "properties": {
                    "institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions the user is affiliated with."
                    },
                    "nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes the user is a contributor to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the user entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile page on the OSF."
                    },
                    "profile_image": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile image."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "users",
                  "id": "{user_id}",
                  "attributes": {
                    "full_name": "Casey M. Rollins",
                    "middle_names": "Marie"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_partial_update",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "User",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{user_id}/institutions/": {
      "get": {
        "summary": "List all institutions",
        "description": "A paginated list of institutions that the user is affiliated with.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 institutions. Each resource in the array is a complete institution object and contains the full representation of the institution, meaning additional requests to a institution's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "operationId": "users_institutions_list",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Institution",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the institution entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the institution entity (`institutions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the institution entity.",
                    "properties": {
                      "auth_url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Url used to authenticate institution specific login."
                      },
                      "logo_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Static path to the institution specific logo."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full name of the institution."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Description of the institution."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the nodes affiliated with the institution."
                      },
                      "users": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the users affiliated with the institution."
                      },
                      "registrations": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the registrations affiliated with the institution."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the institutions entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the institution."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/uva/"
                    },
                    "attributes": {
                      "auth_url": "https://accounts.osf.io/Shibboleth.sso/Login?entityID=urn%3Amace%3Aincommon%3Avirginia.edu",
                      "logo_path": "/static/img/institutions/shields/uva-shield.png",
                      "name": "University of Virginia",
                      "description": "In partnership with the <a href=\"http://www.virginia.edu/vpr/\">Vice President for Research</a>, <a href=\"http://dsi.virginia.edu\">Data Science Institute</a>, <a href=\"https://www.hsl.virginia.edu\">Health Sciences Library</a>, and <a href=\"http://data.library.virginia.edu\">University Library</a>. Learn more about <a href=\"http://cadre.virginia.edu\">UVA resources for computational and data-driven research</a>. Projects must abide by the <a href=\"http://www.virginia.edu/informationpolicy/security.html\">University Security and Data Protection Policies</a>."
                    },
                    "type": "institutions",
                    "id": "uva"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/nodes/": {
      "get": {
        "summary": "List all nodes",
        "description": "A paginated list of nodes that the user is a contributor to. The returned nodes are sorted by their `date_modified`, with the most recently updated nodes appearing first.\n\nIf the user ID in the path is the same as the logged-in user, all nodes will be returned. Otherwise, only the user's public nodes will be returned.\n\nUser registrations are not available at this endpoint.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 nodes. Each resource in the array is a separate node object and contains the full representation of the node, meaning additional requests to a node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/nodes/?filter[title]=open.\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, `preprint`, and `contributors`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_nodes_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/p7ayb/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/e81xl/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/comments/?filter%5Btarget%5D=0hezb",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/0hezb/",
                      "html": "https://osf.io/0hezb/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": null,
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2017-02-09T20:37:49.060000",
                      "title": "Study 8: Replication of Hatzivassiliou et al., 2010 (Nature)",
                      "collection": false,
                      "registration": false,
                      "date_created": "2013-10-22T20:07:57.674000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "0hezb"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/users/alh38/nodes/?page=23",
                  "prev": null,
                  "next": "https://api.osf.io/v2/users/alh38/nodes/?page=2",
                  "meta": {
                    "total": 224,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/preprints/": {
      "get": {
        "summary": "List all preprints",
        "description": "A paginated list of preprints that the user contributes to. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprints. Each resource in the array is a complete preprint object and contains the full representation of the preprint, meaning additional requests to a preprint's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/preprints/?filter[provider]=psyarxiv.\n\nPreprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_preprints_list",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Preprint",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the preprint entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the preprint entity (`preprints`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the preprint entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_published": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                      },
                      "doi": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                      },
                      "is_preprint_orphan": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                      },
                      "license_record": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                      },
                      "subjects": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A nested array structure that describe subjects related to the preprint, in the BePress taxonomy. Each dictionary contains the text and ID of a subject."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                    "required": [
                      "node",
                      "primary_file",
                      "provider"
                    ],
                    "properties": {
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the citation of the preprint."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the identifiers associated with the preprint."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the license that has been applied to the preprint."
                      },
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "primary_file": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the preprint entity.",
                    "properties": {
                      "doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the DOI entered by the user for the preprint manuscript."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                      },
                      "preprint_doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the OSF assigned DOI for the preprint."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the preprint."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "attributes": {},
                    "relationships": {
                      "node": {
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      },
                      "primary_file": {
                        "data": {
                          "type": "primary_files",
                          "id": "{primary_file_id}"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "providers",
                          "id": "{preprint_provider_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bnzx5/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/khbvy/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/57c44b1e594d90004a421ab1/",
                            "meta": {}
                          }
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/osf/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/khbvy/",
                      "html": "https://osf.io/khbvy/",
                      "doi": "https://dx.doi.org/10.1371/journal.pbio.1002456"
                    },
                    "attributes": {
                      "doi": "10.1371/journal.pbio.1002456",
                      "license_record": null,
                      "date_modified": "2016-08-29T14:53:51.185000",
                      "is_preprint_orphan": false,
                      "date_published": "2016-08-29T14:53:51.185000",
                      "subjects": [
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Public Affairs, Public Policy and Public Administration",
                            "id": "584240da54be81056cecaab8"
                          },
                          {
                            "text": "Science and Technology Policy",
                            "id": "584240d954be81056cecaa10"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Library and Information Science",
                            "id": "584240da54be81056cecab33"
                          },
                          {
                            "text": "Scholarly Publishing",
                            "id": "584240db54be81056cecacd2"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Psychology",
                            "id": "584240da54be81056cecac68"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Psychology",
                            "id": "584240da54be81056cecac68"
                          }
                        ]
                      ],
                      "date_created": "2016-08-29T14:53:51.185000",
                      "is_published": true
                    },
                    "type": "preprints",
                    "id": "khbvy"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 4,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/registrations/": {
      "get": {
        "summary": "List all registrations",
        "description": "A paginated list of registrations that the user is a contributor to. The returned registrations are sorted by their `date_modified`, with the most recently updated registrations appearing first.\n\nIf the user ID in the path is the same as the logged-in user, all registrations will be returned. Otherwise, only the user's public registrations will be returned.\n\nUser nodes are not available at this endpoint.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 registrations. Each resource in the array is a separate registration object and contains the full representation of the registration, meaning additional requests to a registration's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/registrations/?filter[title]=replication.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_registrations_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/metaschemas/564d31db8c5e4a7c9694b2c0/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/sdbdx/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/sdbdx/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/comments/?filter%5Btarget%5D=d5r99",
                            "meta": {}
                          }
                        }
                      },
                      "registered_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qce75/",
                            "meta": {}
                          }
                        }
                      },
                      "registered_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/dnhrw/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/children/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/d5r99/",
                      "html": "https://osf.io/d5r99/"
                    },
                    "attributes": {
                      "registration_supplement": "OSF-Standard Pre-Data Collection Registration",
                      "pending_embargo_approval": false,
                      "registration": true,
                      "embargo_end_date": null,
                      "withdrawn": false,
                      "withdrawal_justification": null,
                      "category": "communication",
                      "preprint": false,
                      "current_user_permissions": [
                        "read"
                      ],
                      "title": "Replication Reports",
                      "registered_meta": {
                        "looked": {
                          "value": "No",
                          "comments": [],
                          "extra": []
                        },
                        "datacompletion": {
                          "value": "No, data collection has not begun",
                          "comments": [],
                          "extra": []
                        },
                        "comments": {
                          "value": "",
                          "comments": [],
                          "extra": []
                        }
                      },
                      "public": true,
                      "fork": false,
                      "description": "",
                      "tags": [],
                      "collection": false,
                      "current_user_can_comment": true,
                      "pending_registration_approval": false,
                      "date_modified": "2016-11-18T19:14:42.873000",
                      "date_registered": "2016-11-18T19:16:56.962000",
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "date_created": "2016-09-27T01:12:42.135000",
                      "pending_withdrawal": false,
                      "node_license": null
                    },
                    "type": "registrations",
                    "id": "d5r99"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/users/cdi38/registrations/?page=17",
                  "prev": null,
                  "next": "https://api.osf.io/v2/users/cdi38/registrations/?page=2",
                  "meta": {
                    "total": 170,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/addons/": {
      "get": {
        "summary": "List all user addons",
        "description": "\nA paginated list of authorized user addons\n\n#### Permissions\n\nUser addons are visible only to the user that authorized the addon.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 addons. Each resource in the array is a separate addon object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\nAttempting to request the accounts for an addon that is not enabled will result in a **404 Not Found** response.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_addons_list",
        "x-response-schema": "User Addon",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "User Addon",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the user addon entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the user addon entity (`user_addons`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the user addon entity.",
                    "required": [
                      "user_has_auth"
                    ],
                    "properties": {
                      "user_has_auth": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the user has access to this user addon."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the user addon entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The canonical API endpoint to this user addon."
                      },
                      "accounts": {
                        "type": "object",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A dictionary with addon_account id as key, an array of connected nodes and link to user account as value"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/box/",
                      "accounts": {
                        "562d9acf8c5e4a14112e489e": {
                          "nodes_connected": [
                            "https://api.osf.io/v2/nodes/t3y58/"
                          ],
                          "account": "https://api.osf.io/v2/users/q7fts/addons/box/accounts/562d9acf8c5e4a14112e489e/"
                        }
                      }
                    },
                    "attributes": {
                      "user_has_auth": true
                    },
                    "type": "user_addons",
                    "id": "box"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/dropbox/",
                      "accounts": {
                        "56742db88c5e4a396d689e3e": {
                          "nodes_connected": [],
                          "account": "https://api.osf.io/v2/users/q7fts/addons/dropbox/accounts/56742db88c5e4a396d689e3e/"
                        }
                      }
                    },
                    "attributes": {
                      "user_has_auth": true
                    },
                    "type": "user_addons",
                    "id": "dropbox"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/github/",
                      "accounts": {
                        "570edf7f9ad5a101f90030f6": {
                          "nodes_connected": [
                            "https://api.osf.io/v2/nodes/t3y58/"
                          ],
                          "account": "https://api.osf.io/v2/users/q7fts/addons/github/accounts/570edf7f9ad5a101f90030f6/"
                        }
                      }
                    },
                    "attributes": {
                      "user_has_auth": true
                    },
                    "type": "user_addons",
                    "id": "github"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/googledrive/",
                      "accounts": {
                        "58fe1cb59ad5a1025c8ae281": {
                          "nodes_connected": [],
                          "account": "https://api.osf.io/v2/users/q7fts/addons/googledrive/accounts/58fe1cb59ad5a1025c8ae281/"
                        },
                        "563c1c518c5e4a36e7dc5450": {
                          "nodes_connected": [
                            "https://api.osf.io/v2/nodes/6y5jf/",
                            "https://api.osf.io/v2/nodes/t3y58/"
                          ],
                          "account": "https://api.osf.io/v2/users/q7fts/addons/googledrive/accounts/563c1c518c5e4a36e7dc5450/"
                        }
                      }
                    },
                    "attributes": {
                      "user_has_auth": true
                    },
                    "type": "user_addons",
                    "id": "googledrive"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 4,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/addons/{provider}/": {
      "get": {
        "summary": "Retrieve a user addon",
        "description": "Retrieves the details of an authorized user addon\n\n#### Permissions\n\nUser addons are visible only to the user that authorized the addon.\n\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested user addon, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\nAttempting to request the accounts for an addon that is not enabled will result in a **404 Not Found** response.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "user_id",
            "description": "The unique identifier of the user."
          },
          {
            "in": "path",
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the addon provider."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_addons_read",
        "x-response-schema": "User Addon",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "User Addon",
              "required": [
                "id",
                "type",
                "attributes",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the user addon entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the user addon entity (`user_addons`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the user addon entity.",
                  "required": [
                    "user_has_auth"
                  ],
                  "properties": {
                    "user_has_auth": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the user has access to this user addon."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the user addon entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The canonical API endpoint to this user addon."
                    },
                    "accounts": {
                      "type": "object",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A dictionary with addon_account id as key, an array of connected nodes and link to user account as value"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "https://api.osf.io/v2/users/me/addons/dropbox/",
                    "accounts": {
                      "58d16ece9ad5a10201025eb4": {
                        "nodes_connected": [],
                        "account": "https://api.osf.io/v2/users/f542f/addons/dropbox/accounts/58d16ece9ad5a10201025eb4/"
                      }
                    }
                  },
                  "attributes": {
                    "user_has_auth": true
                  },
                  "type": "user_addons",
                  "id": "dropbox"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/addons/{provider}/accounts/": {
      "get": {
        "summary": "List all addon accounts",
        "description": "\nA paginated list of addon accounts authorized by this user.\n\n#### Permissions\n\nAddon accounts are visible only to the user that authorized the account.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of at most 10 addon account objects. Each resource in the array is a separate  addon account object and contains the full representation of the addon account.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "user_id",
            "description": "The unique identifier of the user."
          },
          {
            "in": "path",
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the addon provider."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "Users_addon_accounts_list",
        "x-response-schema": "Addon Account",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Addon Account",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the addon account entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the addon account entity (`external_accounts`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the addon account entity.",
                    "required": [
                      "display_name",
                      "provider"
                    ],
                    "properties": {
                      "display_name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The user's display name on the third-party service"
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The short name of the third-party service"
                      },
                      "profile_url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The link to user's profile on third-party service"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the addon account entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The canonical api endpoint of this addon account"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/dropbox/accounts/58d16ece9ad5a10201027eb4/"
                    },
                    "attributes": {
                      "display_name": "Fabrice Mizero",
                      "profile_url": null,
                      "provider": "dropbox"
                    },
                    "type": "external_accounts",
                    "id": "58d16ece9ad5a10201027eb4"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/addons/{provider}/accounts/{account_id}/": {
      "get": {
        "summary": "Retrieve an addon account",
        "description": "Retrieves the details of an addon account\n\n#### Permissions\n\nAddon accounts are visible only to the user that authorized the account.\n\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested addon account, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "user_id",
            "description": "The unique identifier of the user."
          },
          {
            "in": "path",
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the addon provider."
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the addon account."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "Users_addon_accounts_read",
        "x-response-schema": "Addon Account",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Addon Account",
              "required": [
                "id",
                "type",
                "attributes",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the addon account entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the addon account entity (`external_accounts`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the addon account entity.",
                  "required": [
                    "display_name",
                    "provider"
                  ],
                  "properties": {
                    "display_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The user's display name on the third-party service"
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The short name of the third-party service"
                    },
                    "profile_url": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The link to user's profile on third-party service"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the addon account entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The canonical api endpoint of this addon account"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "data": {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/dropbox/accounts/58d16ece9ad5a10201027eb4/"
                    },
                    "attributes": {
                      "display_name": "Fabrice Mizero",
                      "profile_url": null,
                      "provider": "dropbox"
                    },
                    "type": "external_accounts",
                    "id": "58d16ece9ad5a10201027eb4"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/view_only_links/{link_id}/": {
      "get": {
        "summary": "Retrieve a view only link",
        "description": "Retrieves details about a specific view only link.\n#### Permissions\nOnly project administrators may retrieve the details of a view only link. Attempting to retrieve a view only link without appropriate permissions will result in a 403 Forbidden response.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested view only link, if the request is successful.\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "link_id",
            "required": true,
            "description": "The unique identifier of the view only link."
          }
        ],
        "tags": [
          "View Only Links"
        ],
        "operationId": "view_only_links_read",
        "x-response-schema": "View Only Link",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "view-only-links",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the view only link."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the view only link ('view-only-links')."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the view only link entity.",
                  "properties": {
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the view only link was created, as an iso8601 formatted timestamp."
                    },
                    "anonymous": {
                      "type": "boolean",
                      "default": true,
                      "readOnly": false,
                      "description": "Whether or not the view only link has anonymized contributors"
                    },
                    "name": {
                      "type": "string",
                      "default": "Shared project link",
                      "readOnly": false,
                      "description": "The name of the view only link"
                    },
                    "key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The view only key"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the view only link entity.",
                  "required": [
                    "nodes",
                    "creator"
                  ],
                  "properties": {
                    "nodes": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A relationship to the nodes which this view only link gives read-only access to."
                    },
                    "creator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the user who created this view only link."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "nodes": {
                      "links": {
                        "self": {
                          "href": "http://api.osf.io/v2/view_only_links/<link_id>/relationships/nodes/",
                          "meta": {}
                        },
                        "related": {
                          "href": "http://api.osf.io/v2/view_only_links/<link_id>/nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "creator": {
                      "links": {
                        "related": {
                          "href": "http://api.osf.io/v2/users/<user_id>/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "attributes": {
                    "date_created": "2017-03-20T20:11:01.603851",
                    "anonymous": false,
                    "key": "<view_only_link_key>",
                    "name": "Test View Only Link"
                  },
                  "type": "view-only-links",
                  "id": "<link_id>"
                }
              }
            }
          }
        }
      }
    },
    "/view_only_links/{link_id}/nodes/": {
      "get": {
        "summary": "List all nodes",
        "description": "\nThe list of nodes which this view only link gives read-only access to.\n#### Permissions\nOnly project administrators may retrieve the nodes of a view only link. Attempting to retrieve a view only link without appropriate permissions will result in a 403 Forbidden response.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object and contains the full representation of the node, meaning additional requests to a node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "link_id",
            "required": true,
            "description": "The unique identifier of the view only link."
          }
        ],
        "tags": [
          "View Only Links"
        ],
        "operationId": "view_only_links_node_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/comments/?filter%5Btarget%5D=bifc7",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/bifc7/",
                      "html": "https://osf.io/bifc7/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "This is an independent replication as part of the Reproducibility Project: Psychology.",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2017-03-03T05:00:31.512000",
                      "title": "Replication of WA Cunningham, JJ Van Bavel, IR Johnsen (2008, PS 19(2))",
                      "collection": false,
                      "registration": false,
                      "date_created": "2014-07-28T13:53:04.508000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "bifc7"
                  },
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/kxhz5/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/comments/?filter%5Btarget%5D=73pnd",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/73pnd/",
                      "html": "https://osf.io/73pnd/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": true,
                      "preprint": false,
                      "description": null,
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-10-02T19:50:23.605000",
                      "title": "Replication of Hajcak &amp; Foti (2008, PS, Study 1)",
                      "collection": false,
                      "registration": false,
                      "date_created": "2012-10-31T18:50:46.111000",
                      "current_user_can_comment": false,
                      "node_license": {
                        "copyright_holders": [
                          ""
                        ],
                        "year": "2016"
                      },
                      "public": true,
                      "tags": [
                        "anxiety",
                        "EMG",
                        "EEG",
                        "motivation",
                        "ERN"
                      ]
                    },
                    "type": "nodes",
                    "id": "73pnd"
                  },
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "template_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/3mqkb/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/comments/?filter%5Btarget%5D=mjasz",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/mjasz/",
                      "html": "https://osf.io/mjasz/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": null,
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-08-31T18:16:25.056000",
                      "title": "Replication of Winawer, Huk, & Boroditsky (Psychological Science, 2008)",
                      "collection": false,
                      "registration": false,
                      "date_created": "2014-09-23T18:58:54.915000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "mjasz"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 3,
                  "per_page": 10
                }
              }
            }
          }
        }
      }
    },
    "/wikis/{wiki_id}/": {
      "get": {
        "summary": "Retrieve a Wiki",
        "description": "Retrieves the details about a specific wiki.\nA wiki is a collection of markdown text pages that can be used to describe the project or dataset of contained in the attached node.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested wiki, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "wiki_id",
            "description": "The unique identifier of the wiki."
          }
        ],
        "tags": [
          "Wikis"
        ],
        "operationId": "wiki_read",
        "x-response-schema": "Wiki",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Wiki",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the wiki."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the wiki (`wikis`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the wiki.",
                  "required": [
                    "kind",
                    "name",
                    "date_modified",
                    "extra",
                    "content_type",
                    "path",
                    "current_user_can_comment",
                    "materialized_path",
                    "size"
                  ],
                  "properties": {
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The date and time at which the wiki was last modified, as an iso8601 formatted timestamp."
                    },
                    "kind": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The type of object."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name/title of the wiki page."
                    },
                    "extra": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary containing additional metadata about this wiki, including version information."
                    },
                    "content_type": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Content type of the wiki (`text/markdown`)."
                    },
                    "path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Path to the wiki object."
                    },
                    "current_user_can_comment": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Whether the current user is allowed to post comments on this wiki."
                    },
                    "materialized_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Materialized path to the wiki object."
                    },
                    "size": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Size of the wiki."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the wiki.",
                  "required": [
                    "node",
                    "user",
                    "comments"
                  ],
                  "properties": {
                    "node": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the associated node."
                    },
                    "user": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the user associated with this wiki."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the comments related to this wiki."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the wiki.",
                  "properties": {
                    "download": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL to download the content of the wiki."
                    },
                    "info": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the wiki."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the wiki."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/tvyxz/",
                          "meta": {}
                        }
                      }
                    },
                    "user": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/5k3hq/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/tvyxz/comments/?filter%5Btarget%5D=zveyb",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "info": "https://api.osf.io/v2/wikis/zveyb/",
                    "download": "https://api.osf.io/v2/wikis/zveyb/content/",
                    "self": "https://api.osf.io/v2/wikis/zveyb/"
                  },
                  "attributes": {
                    "kind": "file",
                    "name": "home",
                    "date_modified": "2017-02-16T15:45:57.671957",
                    "extra": {
                      "version": 47
                    },
                    "content_type": "text/markdown",
                    "path": "/zveyb",
                    "current_user_can_comment": true,
                    "materialized_path": "/zveyb",
                    "size": 552
                  },
                  "type": "wikis",
                  "id": "xu77p"
                }
              }
            }
          }
        }
      }
    },
    "/wikis/{wiki_id}/content/": {
      "get": {
        "summary": "Retrieve the Content of a Wiki",
        "description": "Retrieves the plaintext content of a wiki in markdown format.\n#### Returns\nReturns `text/markdown` of the wiki content itself.\nIf the request is unsuccessful, plaintext with the error message will be displayed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "wiki_id",
            "description": "The unique identifier of the wiki."
          }
        ],
        "tags": [
          "Wikis"
        ],
        "operationId": "wiki_content",
        "x-response-schema": "Wiki",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/collections/": {
      "get": {
        "summary": "List all Collections",
        "description": "Retrieves a list collections, either public or related to the user\n#### Permissions\nAnonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.\n\nComments on private nodes are only visible to contributors and administrators on the parent node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "tags": [
          "Collections"
        ],
        "operationId": "collections_list",
        "x-response-schema": "Collection",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Collection",
                "required": [
                  "type"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the collection."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the entity (`collections`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the collection.",
                    "properties": {
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the collection."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the collection was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the collection was last modified, as an iso8601 formatted timestamp."
                      },
                      "bookmarks": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "This attribute indicates if a collection is being used as part of the bookmarking feature that allows each user to create a personal collection."
                      },
                      "is_promoted": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "???"
                      },
                      "is_public": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "This attribute indicates if a collection is viewable to a user with no special permissions."
                      },
                      "status_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `status` metadata options acceptable for entities in the a collection. This indicates the status of a entity within a collection."
                      },
                      "collected_type_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `collected_type` metadata options acceptable for entities in the a collection. This indicates the collected types of entities within a collection."
                      },
                      "volume_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `volume` metadata options acceptable for entities in the a collection.  This indicates what volumes exist of a multi-volume collection."
                      },
                      "issue_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `issue` metadata options acceptable for entities in the a collection.  This indicates what issues exist of a multi-issue collection."
                      },
                      "program_area_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `program_area` metadata options acceptable for entities in the a collection.  This indicates what program areas a collection is composed of ."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current collection."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current collection."
                      },
                      "linked_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that are linked to the current collection."
                      },
                      "linked_preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that are linked to the current collection."
                      },
                      "collected_metadata": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of metadata entries that are linked to the current collections."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this collection."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "attributes": {
                      "title": "Metascience's Collection",
                      "date_created": "2019-09-18T19:24:28.751486Z",
                      "date_modified": "2019-09-18T19:24:28.886438Z",
                      "bookmarks\"": false,
                      "is_promoted\"": true,
                      "is_public": true,
                      "status_choices": [
                        "Proposed",
                        "Active",
                        "Completed",
                        "Archived"
                      ],
                      "collected_type_choices": [
                        "Research",
                        "Teaching",
                        "Community Activity",
                        "Meeting",
                        "Other"
                      ],
                      "volume_choices": [],
                      "issue_choices\"": [],
                      "program_area_choices": []
                    },
                    "relationships": {
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/providers/collections/metascience/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_registrations": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_registrations/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/linked_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_preprints": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_preprints/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/linked_preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "collected_metadata": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/collected_metadata/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/collections/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/collections/",
                  "first": null,
                  "last": "https://api.osf.io/v2/collections/?page=2",
                  "next": "https://api.osf.io/v2/collections/?page=2",
                  "prev": null
                },
                "meta": {
                  "total": 11,
                  "per_page": 10,
                  "version": 2.2
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Collection",
        "description": "Retrieves a list collections, either public or related to the user\n#### Permissions\nAnonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.\n\nComments on private nodes are only visible to contributors and administrators on the parent node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "collections",
                  "attributes": {
                    "title": "An Excellent Collection Title"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_create",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "examples": {
              "application/json": null
            }
          }
        }
      }
    },
    "/collections/{collection_id}/": {
      "get": {
        "summary": "Retrieve a Collection",
        "description": "Retrieves a collection, if the user has appropriate permissions.\n\n#### Permissions\nAnonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_detail",
        "x-response-schema": "Collection",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Collection",
                "required": [
                  "type"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the collection."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the entity (`collections`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the collection.",
                    "properties": {
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the collection."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the collection was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the collection was last modified, as an iso8601 formatted timestamp."
                      },
                      "bookmarks": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "This attribute indicates if a collection is being used as part of the bookmarking feature that allows each user to create a personal collection."
                      },
                      "is_promoted": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "???"
                      },
                      "is_public": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "This attribute indicates if a collection is viewable to a user with no special permissions."
                      },
                      "status_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `status` metadata options acceptable for entities in the a collection. This indicates the status of a entity within a collection."
                      },
                      "collected_type_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `collected_type` metadata options acceptable for entities in the a collection. This indicates the collected types of entities within a collection."
                      },
                      "volume_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `volume` metadata options acceptable for entities in the a collection.  This indicates what volumes exist of a multi-volume collection."
                      },
                      "issue_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `issue` metadata options acceptable for entities in the a collection.  This indicates what issues exist of a multi-issue collection."
                      },
                      "program_area_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `program_area` metadata options acceptable for entities in the a collection.  This indicates what program areas a collection is composed of ."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current collection."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current collection."
                      },
                      "linked_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that are linked to the current collection."
                      },
                      "linked_preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that are linked to the current collection."
                      },
                      "collected_metadata": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of metadata entries that are linked to the current collections."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this collection."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "type": "collections",
                "data": {
                  "attributes": {
                    "title": "Metascience's Collection",
                    "date_created": "2019-09-18T19:24:28.751486Z",
                    "date_modified": "2019-09-18T19:24:28.886438Z",
                    "bookmarks\"": false,
                    "is_promoted\"": true,
                    "is_public": true,
                    "status_choices": [
                      "Proposed",
                      "Active",
                      "Completed",
                      "Archived"
                    ],
                    "collected_type_choices": [
                      "Research",
                      "Teaching",
                      "Community Activity",
                      "Meeting",
                      "Other"
                    ],
                    "volume_choices": [],
                    "issue_choices\"": [],
                    "program_area_choices": []
                  },
                  "relationships": {
                    "provider": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/providers/collections/metascience/",
                          "meta": {}
                        }
                      }
                    },
                    "node_links": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/node_links/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_nodes": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_nodes/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/linked_nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_registrations": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_registrations/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/linked_registrations/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_preprints": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_preprints/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/linked_preprints/",
                          "meta": {}
                        }
                      }
                    },
                    "collected_metadata": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/collected_metadata/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/collections/"
                  }
                },
                "meta": {
                  "version": 2.2
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Collection",
        "description": "Deletes a collection, if the user has appropriate permissions.\n#### Permissions\nUsers must have write permissions on a collection in order to delete it\n#### Returns\nNothing is returned in the body",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_delete",
        "x-response-schema": "Collection",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/collections/{collection_id}/linked_nodes": {
      "get": {
        "summary": "List All Linked Nodes for a Collection",
        "description": "List of all nodes linked to the given collection.\n#### Permissions\nThis returns all public nodes associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_nodes_list",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "2vewn",
                    "type": "nodes",
                    "attributes": {
                      "title": "A Good Node Title",
                      "description": "A good Node description.",
                      "category": "project",
                      "custom_citation": null,
                      "date_created": "2020-05-11T17:57:58.725950Z",
                      "date_modified": "2020-11-20T14:31:59.946554Z",
                      "registration": false,
                      "preprint": false,
                      "fork": false,
                      "collection": false,
                      "tags": [],
                      "node_license": {
                        "copyright_holders": [
                          "Test User"
                        ],
                        "year": "2020"
                      },
                      "analytics_key": "c438e67a7680113ee310cad8121e520bab632f3df95d443a4fadb0cbf3af890acc0d91ab6499297ec622bb827979c6005f13a80b3eddcf87a081667e6b2ac3da6eff414dc659b19e3a473f8bf7ef295bff3c036c955c8313fa6ce1da1253e74592e0b399940ca9f099b36923df8c11622d0a1768ae53f79a6061da76007061207f299a0e507f1ff47baeb902f2c403f0",
                      "current_user_can_comment": false,
                      "current_user_permissions": [],
                      "current_user_is_contributor": false,
                      "current_user_is_contributor_or_group_member": false,
                      "wiki_enabled": true,
                      "public": true
                    },
                    "relationships": {
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e965/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "563c1cf88c5e4a3877f9e965",
                          "type": "licenses"
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/children/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/comments/?filter%5Btarget%5D=2vewn",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "bibliographic_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/bibliographic_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "implicit_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/implicit_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/files/",
                            "meta": {}
                          }
                        }
                      },
                      "settings": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/settings/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "2vewn",
                          "type": "nodes"
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "data": null
                      },
                      "template_node": {
                        "data": null
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "groups": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/groups/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_by_nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/linked_by_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_by_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/linked_by_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "data": null
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/institutions/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/relationships/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "region": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/regions/us/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "us",
                          "type": "regions"
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "2vewn",
                          "type": "nodes"
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/linked_nodes/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/relationships/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/linked_registrations/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/relationships/linked_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/citation/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "2vewn",
                          "type": "nodes"
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "storage": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/storage/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "2vewn",
                          "type": "nodes"
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "html": "https://osf.io/2vewn/",
                      "self": "https://api.osf.io/v2/nodes/2vewn/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/collections/ux3nq/linked_nodes/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/linked_nodes/relationships/": {
      "post": {
        "summary": "Link Nodes to Collection",
        "description": "This endpoint allow users to a add a node to a collection by issuing a POST request.\n#### Permissions\nThis returns all public nodes associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": [
                  {
                    "type": "linked_nodes",
                    "id": "guid0"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "newid"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "test2"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "guid4"
                  }
                ]
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_nodes_relationships",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "examples": {
              "application/json": null
            }
          }
        }
      },
      "get": {
        "summary": "Give a Sparse List of Node Ids",
        "description": "List of all the node ids linked to the given collection.\n#### Permissions\nThis returns all public nodes associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_nodes_relationships_create",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "nodes",
                    "id": "guid0"
                  },
                  {
                    "type": "nodes",
                    "id": "newid"
                  },
                  {
                    "type": "nodes",
                    "id": "test2"
                  },
                  {
                    "type": "nodes",
                    "id": "guid4"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/collections/dse23/relationships/linked_nodes/",
                  "html": "https://api.osf.io/v2/collections/dse23/linked_nodes/"
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove Nodes From Collection",
        "description": "\nThis removes associated nodes from a collection\n#### Permissions\nAny user with write permissions on this collection should be to remove nodes from this collection.\n#### Returns\nNothing in the response body.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": [
                  {
                    "type": "linked_nodes",
                    "id": "guid0"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "newid"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "test2"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "guid4"
                  }
                ]
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_nodes_relationships_delete",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": null
            }
          }
        }
      }
    },
    "/collections/{collection_id}/linked_registrations/": {
      "get": {
        "summary": "List All Linked Registrations for a Collection",
        "description": "List of all registrations linked to the given collection.\n#### Permissions\nThis returns all public registrations associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_registrations_list",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "qrwhu",
                    "type": "registrations",
                    "attributes": {
                      "title": "A Good Registration Title",
                      "description": "Half believe though on significant.",
                      "category": "project",
                      "custom_citation": "",
                      "date_created": "2020-12-10T14:36:42.195364Z",
                      "date_modified": "2020-12-10T14:36:39.925278Z",
                      "registration": true,
                      "preprint": false,
                      "fork": false,
                      "collection": false,
                      "tags": [],
                      "access_requests_enabled": false,
                      "node_license": null,
                      "analytics_key": null,
                      "current_user_can_comment": true,
                      "current_user_permissions": [],
                      "current_user_is_contributor": false,
                      "current_user_is_contributor_or_group_member": false,
                      "wiki_enabled": true,
                      "public": true,
                      "reviews_state": "initial",
                      "article_doi": null,
                      "pending_embargo_approval": false,
                      "pending_embargo_termination_approval": false,
                      "embargoed": false,
                      "pending_registration_approval": false,
                      "archiving": false,
                      "pending_withdrawal": false,
                      "withdrawn": false,
                      "date_registered": "2020-12-10T14:36:42.166193Z",
                      "date_withdrawn": null,
                      "embargo_end_date": null,
                      "withdrawal_justification": null,
                      "registration_supplement": "Open-Ended Registration",
                      "registered_meta": {},
                      "registration_responses": {
                        "summary": ""
                      }
                    },
                    "relationships": {
                      "license": {
                        "data": null
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/children/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/comments/?filter%5Btarget%5D=qrwhu",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "bibliographic_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/bibliographic_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "implicit_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/implicit_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/files/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "data": null
                      },
                      "template_node": {
                        "data": null
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_by_nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/linked_by_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_by_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/linked_by_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "data": null
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/institutions/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/relationships/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "region": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/regions/us/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "us",
                          "type": "regions"
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "qrwhu",
                          "type": "registrations"
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/linked_nodes/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/relationships/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/linked_registrations/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/relationships/linked_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/citation/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "qrwhu",
                          "type": "registrations"
                        }
                      },
                      "storage": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qrwhu/storage/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "qrwhu",
                          "type": "nodes"
                        }
                      },
                      "registered_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/9hr6c/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "9hr6c",
                          "type": "users"
                        }
                      },
                      "registered_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/4gnbx/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "4gnbx",
                          "type": "nodes"
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/5fa1bb678ccd39001e96c32b/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "5fa1bb678ccd39001e96c32b",
                          "type": "registration-schemas"
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/providers/registrations/osf/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "osf",
                          "type": "registration-providers"
                        }
                      },
                      "review_actions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/actions/",
                            "meta": {}
                          }
                        }
                      },
                      "requests": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/requests/",
                            "meta": {}
                          }
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "html": "https://osf.io/qrwhu/",
                      "self": "https://api.osf.io/v2/registrations/qrwhu/"
                    }
                  }
                ]
              },
              "meta": {
                "total": 1,
                "per_page": 10,
                "version": "2.20"
              },
              "links": {
                "self": "https://api.osf.io/v2/collections/nywr6/linked_registrations/",
                "first": null,
                "last": null,
                "prev": null,
                "next": null
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/linked_registrations/relationships/": {
      "post": {
        "summary": "Link Registrations to Collection",
        "description": "This endpoint allow users to a add a registration to a collection by issuing a POST request.\n#### Permissions\nThis returns all public registrations associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": [
                  {
                    "type": "linked_registrations",
                    "id": "guid0"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "newid"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "test2"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "guid4"
                  }
                ]
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_registrations_relationships",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "examples": {
              "application/json": null
            }
          }
        }
      },
      "get": {
        "summary": "Give a Sparse List of Registrations Ids",
        "description": "List of all the registration ids linked to the given collection.\n#### Permissions\nThis returns all public registrations associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_registrations_relationships_create",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "registrations",
                    "id": "guid0"
                  },
                  {
                    "type": "registrations",
                    "id": "newid"
                  },
                  {
                    "type": "registrations",
                    "id": "test2"
                  },
                  {
                    "type": "registrations",
                    "id": "guid4"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/collections/dse23/relationships/linked_registrations/",
                  "html": "https://api.osf.io/v2/collections/dse23/linked_registrations/"
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove Registrations From Collection",
        "description": "\nThis removes associated registrations from a collection\n#### Permissions\nAny user with write permissions on this collection should be to remove registrations from this collection.\n#### Returns\nNothing in the response body.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": [
                  {
                    "type": "linked_registrations",
                    "id": "guid0"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "newid"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "test2"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "guid4"
                  }
                ]
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_registrations_relationships_delete",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": null
            }
          }
        }
      }
    },
    "/collections/{collection_id}/linked_preprints/": {
      "get": {
        "summary": "List All Linked Preprints for a Collection",
        "description": "List of all preprints linked to the given collection.\n#### Permissions\nThis returns all public preprints associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_preprints_list",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "zjxhs",
                    "type": "preprints",
                    "attributes": {
                      "date_created": "2020-12-10T13:55:03.994648Z",
                      "date_modified": "2020-12-10T13:55:05.252565Z",
                      "date_published": "2020-12-10T13:55:05.046084Z",
                      "original_publication_date": null,
                      "doi": "10.123/0",
                      "title": "A Good Preprint Title",
                      "description": "Research physical language morning consumer front population.",
                      "is_published": true,
                      "is_preprint_orphan": false,
                      "license_record": null,
                      "tags": [],
                      "preprint_doi_created": "2020-12-10T13:55:05.230155Z",
                      "date_withdrawn": null,
                      "current_user_permissions": [],
                      "public": true,
                      "reviews_state": "accepted",
                      "date_last_transitioned": "2020-12-10T13:55:05.046084Z"
                    },
                    "relationships": {
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "bibliographic_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/bibliographic_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/citation/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "zjxhs",
                          "type": "preprints"
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "node": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/relationships/node/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "data": null
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/providers/preprints/slug1/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "slug1",
                          "type": "preprint-providers"
                        }
                      },
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/files/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/5fd228b8e64e1300aa99ee17/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "5fd228b8e64e1300aa99ee17",
                          "type": "files"
                        }
                      },
                      "review_actions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/review_actions/",
                            "meta": {}
                          }
                        }
                      },
                      "requests": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/requests/",
                            "meta": {}
                          }
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/zjxhs/",
                      "html": "https://osf.io/preprints/slug1/zjxhs/",
                      "doi": "https://doi.org/10.123/0",
                      "preprint_doi": "https://doi.org/None/FK2osf.io/zjxhs"
                    }
                  }
                ]
              },
              "meta": {
                "total": 1,
                "per_page": 10,
                "version": "2.20"
              },
              "links": {
                "self": "https://api.osf.io/v2/collections/nywr6/linked_preprints/",
                "first": null,
                "last": null,
                "prev": null,
                "next": null
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/collected_metadata/": {
      "get": {
        "summary": "Retrieve a list of collected metadata for a collection",
        "description": "List of user created metadata for entities within a collection.\n#### Permissions\nIn order to view this metadata it must be public or a user must have read permissions for collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_registrations_list",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "2vewn",
                    "type": "collected-metadata",
                    "attributes": {
                      "collected_type": "Document Analysis",
                      "status": "",
                      "volume": "",
                      "issue": "",
                      "program_area": "N/A",
                      "subjects": []
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/794j8/?format=json",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "794j8",
                          "type": "users"
                        }
                      },
                      "collection": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ux3nq/?format=json",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "ux3nq",
                          "type": "collections"
                        }
                      },
                      "guid": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/guids/2vewn/?format=json",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "guid": {
                        "data": {
                          "id": "2vewn",
                          "type": "nodes",
                          "attributes": {
                            "title": "A Good Node Title",
                            "description": "A Good Node Description",
                            "category": "project",
                            "custom_citation": null,
                            "date_created": "2020-05-11T17:57:58.725950",
                            "date_modified": "2020-11-20T14:31:59.946554",
                            "registration": false,
                            "preprint": false,
                            "fork": false,
                            "collection": false,
                            "tags": [],
                            "access_requests_enabled": true,
                            "node_license": {
                              "copyright_holders": [
                                "Test User"
                              ],
                              "year": "2020"
                            },
                            "analytics_key": "c438e67a7680113ee310cad8121e520bab632f3df95d443a4fadb0cbf3af890acc0d91ab6499297ec622bb827979c6005f13a80b3eddcf87a081667e6b2ac3da6eff414dc659b19e3a473f8bf7ef295bff3c036c955c8313fa6ce1da1253e74592e0b399940ca9f099b36923df8c11622d0a1768ae53f79a6061da76007061207f299a0e507f1ff47baeb902f2c403f0",
                            "current_user_can_comment": false,
                            "current_user_permissions": [
                              "read"
                            ],
                            "current_user_is_contributor": false,
                            "current_user_is_contributor_or_group_member": false,
                            "wiki_enabled": true,
                            "public": true,
                            "subjects": []
                          },
                          "relationships": {
                            "license": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e965/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "563c1cf88c5e4a3877f9e965",
                                "type": "licenses"
                              }
                            },
                            "children": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/children/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "comments": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/comments/?format=json&filter%5Btarget%5D=2vewn",
                                  "meta": {}
                                }
                              }
                            },
                            "contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/contributors/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "bibliographic_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/bibliographic_contributors/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "implicit_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/implicit_contributors/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "files": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/files/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "settings": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/settings/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "2vewn",
                                "type": "nodes"
                              }
                            },
                            "wikis": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/wikis/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "forks": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/forks/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/groups/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "node_links": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/node_links/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/linked_by_nodes/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/linked_by_registrations/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "identifiers": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/identifiers/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "affiliated_institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/institutions/?format=json",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/relationships/institutions/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "draft_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/draft_registrations/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/registrations/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "region": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/regions/us/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "us",
                                "type": "regions"
                              }
                            },
                            "root": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "2vewn",
                                "type": "nodes"
                              }
                            },
                            "logs": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/logs/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/linked_nodes/?format=json",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/relationships/linked_nodes/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/linked_registrations/?format=json",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/relationships/linked_registrations/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "view_only_links": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/view_only_links/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "citation": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/citation/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "2vewn",
                                "type": "nodes"
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/preprints/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "storage": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/storage/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "2vewn",
                                "type": "nodes"
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/2vewn/",
                            "self": "https://api.osf.io/v2/nodes/2vewn/"
                          }
                        }
                      }
                    },
                    "links": {}
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Metadata or Subjects to a Entity in a Collection",
        "description": "List of user created metadata for entities within a collection.\n#### Permissions\nTo edit this collection a user must have collections write permissions\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "application/json": {
                  "data": {
                    "type": "collected-metadata",
                    "attributes": {
                      "volume": "test",
                      "guid": "test0",
                      "subjects": "5fd228b7e64e1300aa99ee15"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_add_metadata",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK"
          }
        }
      }
    },
    "/collections/{collection_id}/collected_metadata/{cgm_id}": {
      "get": {
        "summary": "Retrieve Specific Metadata for a Collection",
        "description": "\n#### Permissions\nIn order to view this metadata it must be public or a user must have read permissions for collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_registrations_detail",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "data": {
                "id": "zw4sh",
                "type": "collected-metadata",
                "attributes": {
                  "collected_type": "Action Research",
                  "status": "",
                  "volume": "",
                  "issue": "",
                  "program_area": "Child Welfare"
                },
                "relationships": {
                  "creator": {
                    "links": {
                      "related": {
                        "href": "https://api.osf.io/v2/users/nsx26/",
                        "meta": {}
                      }
                    },
                    "data": {
                      "id": "nsx26",
                      "type": "users"
                    }
                  },
                  "collection": {
                    "links": {
                      "related": {
                        "href": "https://api.osf.io/v2/collections/ux3nq/",
                        "meta": {}
                      }
                    },
                    "data": {
                      "id": "ux3nq",
                      "type": "collections"
                    }
                  },
                  "guid": {
                    "links": {
                      "related": {
                        "href": "https://api.osf.io/v2/guids/zw4sh/",
                        "meta": {}
                      }
                    }
                  },
                  "subjects": {
                    "links": {
                      "related": {
                        "href": "https://api.osf.io/v2/collections/ux3nq/collected_metadata/zw4sh/subjects/",
                        "meta": {}
                      },
                      "self": {
                        "href": "https://api.osf.io/v2/collections/ux3nq/collected_metadata/zw4sh/relationships/subjects/",
                        "meta": {}
                      }
                    }
                  }
                },
                "embeds": {
                  "guid": {
                    "data": {
                      "id": "zw4sh",
                      "type": "nodes",
                      "attributes": {
                        "title": "test",
                        "description": "flaksdjfasdlkfj lkjdf aslkdfj sdlfkj",
                        "category": "project",
                        "custom_citation": null,
                        "date_created": "2020-06-05T18:02:28.254638Z",
                        "date_modified": "2020-10-21T15:47:17.646448Z",
                        "registration": false,
                        "preprint": false,
                        "fork": false,
                        "collection": false,
                        "tags": [],
                        "node_license": {
                          "copyright_holders": [],
                          "year": null
                        },
                        "analytics_key": "",
                        "current_user_can_comment": false,
                        "current_user_permissions": [],
                        "current_user_is_contributor": false,
                        "current_user_is_contributor_or_group_member": false,
                        "wiki_enabled": true,
                        "public": false
                      },
                      "relationships": {
                        "license": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "563c1cf88c5e4a3877f9e96a",
                            "type": "licenses"
                          }
                        },
                        "children": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/children/",
                              "meta": {}
                            }
                          }
                        },
                        "comments": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/comments/?filter%5Btarget%5D=zw4sh",
                              "meta": {}
                            }
                          }
                        },
                        "contributors": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/contributors/",
                              "meta": {}
                            }
                          }
                        },
                        "bibliographic_contributors": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/bibliographic_contributors/",
                              "meta": {}
                            }
                          }
                        },
                        "implicit_contributors": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/implicit_contributors/",
                              "meta": {}
                            }
                          }
                        },
                        "files": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/files/",
                              "meta": {}
                            }
                          }
                        },
                        "settings": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/settings/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "zw4sh",
                            "type": "nodes"
                          }
                        },
                        "wikis": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/wikis/",
                              "meta": {}
                            }
                          }
                        },
                        "forked_from": {
                          "data": null
                        },
                        "template_node": {
                          "data": null
                        },
                        "forks": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/forks/",
                              "meta": {}
                            }
                          }
                        },
                        "groups": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/groups/",
                              "meta": {}
                            }
                          }
                        },
                        "linked_by_nodes": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/linked_by_nodes/",
                              "meta": {}
                            }
                          }
                        },
                        "linked_by_registrations": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/linked_by_registrations/",
                              "meta": {}
                            }
                          }
                        },
                        "parent": {
                          "data": null
                        },
                        "identifiers": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/identifiers/",
                              "meta": {}
                            }
                          }
                        },
                        "affiliated_institutions": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/institutions/",
                              "meta": {}
                            },
                            "self": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/relationships/institutions/",
                              "meta": {}
                            }
                          }
                        },
                        "draft_registrations": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/draft_registrations/",
                              "meta": {}
                            }
                          }
                        },
                        "registrations": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/registrations/",
                              "meta": {}
                            }
                          }
                        },
                        "region": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/regions/us/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "us",
                            "type": "regions"
                          }
                        },
                        "root": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "zw4sh",
                            "type": "nodes"
                          }
                        },
                        "logs": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/logs/",
                              "meta": {}
                            }
                          }
                        },
                        "linked_nodes": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/linked_nodes/",
                              "meta": {}
                            },
                            "self": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/relationships/linked_nodes/",
                              "meta": {}
                            }
                          }
                        },
                        "linked_registrations": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/linked_registrations/",
                              "meta": {}
                            },
                            "self": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/relationships/linked_registrations/",
                              "meta": {}
                            }
                          }
                        },
                        "view_only_links": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/view_only_links/",
                              "meta": {}
                            }
                          }
                        },
                        "citation": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/citation/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "zw4sh",
                            "type": "nodes"
                          }
                        },
                        "preprints": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/preprints/",
                              "meta": {}
                            }
                          }
                        },
                        "storage": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/storage/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "zw4sh",
                            "type": "nodes"
                          }
                        },
                        "subjects": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/subjects/",
                              "meta": {}
                            },
                            "self": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/relationships/subjects/",
                              "meta": {}
                            }
                          }
                        }
                      },
                      "links": {
                        "html": "https://osf.io/zw4sh/",
                        "self": "https://api.osf.io/v2/nodes/zw4sh/"
                      }
                    }
                  }
                },
                "links": {}
              },
              "meta": {
                "version": "2.20"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Metadata or Subjects to an Entity in a Collection",
        "description": "List of user created metadata for entities within a collection.\n#### Permissions\nTo edit this collection a user must have collections write permissions\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "application/json": {
                  "data": {
                    "type": "collected-metadata",
                    "attributes": {
                      "volume": "test",
                      "guid": "test0",
                      "subjects": "5fd228b7e64e1300aa99ee15"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_detail",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete Collection Metadata from entitiy",
        "description": "\n#### Permissions\nOnly a user with collection admin permissions can delete collected metadata\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_delete",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT"
          }
        }
      }
    },
    "/collections/{collection_id}/collected_metadata/{cgm_id}/subjects/": {
      "get": {
        "summary": "Retrieve subject data for a specific piece of metadata info for a collection",
        "description": "\n#### Permissions\nIn order to view these subject it must be a public collection or a user must have read permissions for collection.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error, other then permissions errors.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_collected_metadata",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "5fd228b7e64e1300aa99ee15",
                    "type": "subjects",
                    "attributes": {
                      "text": "Example Subject #0",
                      "taxonomy_name": ""
                    },
                    "relationships": {
                      "parent": {
                        "data": null
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "http://localhost:8000/v2/subjects/5fd228b7e64e1300aa99ee15/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "parent": {
                        "errors": [
                          {
                            "detail": "Not found."
                          }
                        ]
                      }
                    },
                    "links": {
                      "self": "http://localhost:8000/v2/subjects/5fd228b7e64e1300aa99ee15/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "http://localhost:8000/v2/collections/nywr6/collected_metadata/zjxhs/subjects/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/collected_metadata/{cgm_id}/relationships/subjects/": {
      "get": {
        "summary": "Retrieve subject metadata for a specific piece of metadata in a collection",
        "description": "\n#### Permissions\nThis is public for a logged out user when an entity is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_subjects_relationships",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "subjects",
                    "id": "5fd228b7e64e1300aa99ee15"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/collections/nywr6/collected_metadata/zjxhs/relationships/subjects/",
                  "html": "https://api.osf.io/v2/collections/nywr6/collected_metadata/zjxhs/subjects/"
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update subjects for a specific piece of metadata in a collection",
        "description": "\n#### Permissions\nThis is editable for a user with a write permission for this collection.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "application/json": {
                  "data": {
                    "type": "subjects",
                    "id": "5fd228b7e64e1300aa99ee15"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_subjects_relationships_update",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK"
          }
        }
      }
    }
  }
}